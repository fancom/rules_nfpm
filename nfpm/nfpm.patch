diff --git a/BUILD.bazel b/BUILD.bazel
new file mode 100644
index 0000000..7239e2a
--- /dev/null
+++ b/BUILD.bazel
@@ -0,0 +1,27 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test", "go_binary")
+
+go_library(
+    name = "nfpm",
+    srcs = ["nfpm.go"],
+    importpath = "github.com/goreleaser/nfpm/v2",
+    visibility = ["//visibility:public"],
+    deps = [
+        "@cat_dario_mergo//:go_default_library",
+        "@com_github_aleksi_pointer//:go_default_library",
+        "@com_github_goreleaser_chglog//:go_default_library",
+        "@com_github_goreleaser_nfpm_v2//files",
+        "@com_github_goreleaser_nfpm_v2//internal/modtime",
+        "@com_github_masterminds_semver_v3//:go_default_library",
+        "@in_gopkg_yaml_v3//:go_default_library",
+    ],
+)
+
+go_test(
+    name = "nfpm_test",
+    srcs = ["nfpm_test.go"],
+    deps = [
+        "@com_github_goreleaser_nfpm_v2//:go_default_library",
+        "@com_github_goreleaser_nfpm_v2//files:go_default_library",
+        "@com_github_stretchr_testify//require:go_default_library",
+    ],
+)
diff --git a/MODULE.bazel b/MODULE.bazel
new file mode 100644
index 0000000..f18beeb
--- /dev/null
+++ b/MODULE.bazel
@@ -0,0 +1,31 @@
+module(
+    name = "com_github_goreleaser_nfpm_v2",
+    repo_name = "com_github_goreleaser_nfpm_v2",
+)
+bazel_dep(name = "bazel_skylib", version = "1.4.2")
+bazel_dep(name = "rules_go", version = "0.45.1", repo_name = "io_bazel_rules_go")
+bazel_dep(name = "gazelle", version = "0.35.0", repo_name = "bazel_gazelle")
+go_deps = use_extension("@bazel_gazelle//:extensions.bzl", "go_deps")
+go_deps.from_file(go_mod = "//:go.mod")
+use_repo(
+    go_deps,
+    "in_gopkg_yaml_v3",
+    "com_github_masterminds_semver_v3",
+    "com_github_aleksi_pointer",
+    "cat_dario_mergo",
+    "com_github_goreleaser_chglog",
+    "com_github_goreleaser_fileglob",
+    "com_github_caarlos0_go_version",
+    "com_github_spf13_cobra",
+    "com_github_invopop_jsonschema",
+    "com_github_muesli_mango_cobra",
+    "com_github_muesli_roff",
+    "com_github_klauspost_pgzip",
+    "com_github_ulikunitz_xz",
+    "com_github_google_rpmpack",
+    "com_github_blakesmith_ar",
+    "com_github_klauspost_compress",
+    "com_github_protonmail_go_crypto",
+    "org_golang_x_exp"
+)
+bazel_dep(name = "circl", version = "1.3.7")
\ No newline at end of file
diff --git a/MODULE.bazel.lock b/MODULE.bazel.lock
new file mode 100644
index 0000000..43e26e1
--- /dev/null
+++ b/MODULE.bazel.lock
@@ -0,0 +1,3416 @@
+{
+  "lockFileVersion": 3,
+  "moduleFileHash": "2ce191ff77ea7eb9e494e9083651113c224354380d16c01fd1a695e82ae13ced",
+  "flags": {
+    "cmdRegistries": [
+      "https://bcr.bazel.build/"
+    ],
+    "cmdModuleOverrides": {},
+    "allowedYankedVersions": [],
+    "envVarAllowedYankedVersions": "",
+    "ignoreDevDependency": false,
+    "directDependenciesMode": "WARNING",
+    "compatibilityMode": "ERROR"
+  },
+  "localOverrideHashes": {
+    "bazel_tools": "922ea6752dc9105de5af957f7a99a6933c0a6a712d23df6aad16a9c399f7e787"
+  },
+  "moduleDepGraph": {
+    "<root>": {
+      "name": "com_github_goreleaser_nfpm_v2",
+      "version": "",
+      "key": "<root>",
+      "repoName": "com_github_goreleaser_nfpm_v2",
+      "executionPlatformsToRegister": [],
+      "toolchainsToRegister": [],
+      "extensionUsages": [
+        {
+          "extensionBzlFile": "@bazel_gazelle//:extensions.bzl",
+          "extensionName": "go_deps",
+          "usingModule": "<root>",
+          "location": {
+            "file": "@@//:MODULE.bazel",
+            "line": 8,
+            "column": 24
+          },
+          "imports": {
+            "in_gopkg_yaml_v3": "in_gopkg_yaml_v3",
+            "com_github_masterminds_semver_v3": "com_github_masterminds_semver_v3",
+            "com_github_aleksi_pointer": "com_github_aleksi_pointer",
+            "cat_dario_mergo": "cat_dario_mergo",
+            "com_github_goreleaser_chglog": "com_github_goreleaser_chglog",
+            "com_github_goreleaser_fileglob": "com_github_goreleaser_fileglob",
+            "com_github_caarlos0_go_version": "com_github_caarlos0_go_version",
+            "com_github_spf13_cobra": "com_github_spf13_cobra",
+            "com_github_invopop_jsonschema": "com_github_invopop_jsonschema",
+            "com_github_muesli_mango_cobra": "com_github_muesli_mango_cobra",
+            "com_github_muesli_roff": "com_github_muesli_roff",
+            "com_github_klauspost_pgzip": "com_github_klauspost_pgzip",
+            "com_github_ulikunitz_xz": "com_github_ulikunitz_xz",
+            "com_github_google_rpmpack": "com_github_google_rpmpack",
+            "com_github_blakesmith_ar": "com_github_blakesmith_ar",
+            "com_github_klauspost_compress": "com_github_klauspost_compress",
+            "com_github_protonmail_go_crypto": "com_github_protonmail_go_crypto",
+            "org_golang_x_exp": "org_golang_x_exp"
+          },
+          "devImports": [],
+          "tags": [
+            {
+              "tagName": "from_file",
+              "attributeValues": {
+                "go_mod": "//:go.mod"
+              },
+              "devDependency": false,
+              "location": {
+                "file": "@@//:MODULE.bazel",
+                "line": 9,
+                "column": 18
+              }
+            }
+          ],
+          "hasDevUseExtension": false,
+          "hasNonDevUseExtension": true
+        }
+      ],
+      "deps": {
+        "bazel_skylib": "bazel_skylib@1.5.0",
+        "io_bazel_rules_go": "rules_go@0.45.1",
+        "bazel_gazelle": "gazelle@0.35.0",
+        "circl": "circl@1.3.7",
+        "bazel_tools": "bazel_tools@_",
+        "local_config_platform": "local_config_platform@_"
+      }
+    },
+    "bazel_skylib@1.5.0": {
+      "name": "bazel_skylib",
+      "version": "1.5.0",
+      "key": "bazel_skylib@1.5.0",
+      "repoName": "bazel_skylib",
+      "executionPlatformsToRegister": [],
+      "toolchainsToRegister": [
+        "//toolchains/unittest:cmd_toolchain",
+        "//toolchains/unittest:bash_toolchain"
+      ],
+      "extensionUsages": [],
+      "deps": {
+        "platforms": "platforms@0.0.7",
+        "bazel_tools": "bazel_tools@_",
+        "local_config_platform": "local_config_platform@_"
+      },
+      "repoSpec": {
+        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
+        "ruleClassName": "http_archive",
+        "attributes": {
+          "name": "bazel_skylib~1.5.0",
+          "urls": [
+            "https://github.com/bazelbuild/bazel-skylib/releases/download/1.5.0/bazel-skylib-1.5.0.tar.gz"
+          ],
+          "integrity": "sha256-zVWgYudjuTSZIfD124w5MyiNyLpPdt2UFqrGis7jy5Q=",
+          "strip_prefix": "",
+          "remote_patches": {},
+          "remote_patch_strip": 0
+        }
+      }
+    },
+    "rules_go@0.45.1": {
+      "name": "rules_go",
+      "version": "0.45.1",
+      "key": "rules_go@0.45.1",
+      "repoName": "io_bazel_rules_go",
+      "executionPlatformsToRegister": [],
+      "toolchainsToRegister": [
+        "@go_toolchains//:all"
+      ],
+      "extensionUsages": [
+        {
+          "extensionBzlFile": "@io_bazel_rules_go//go:extensions.bzl",
+          "extensionName": "go_sdk",
+          "usingModule": "rules_go@0.45.1",
+          "location": {
+            "file": "https://bcr.bazel.build/modules/rules_go/0.45.1/MODULE.bazel",
+            "line": 16,
+            "column": 23
+          },
+          "imports": {
+            "go_toolchains": "go_toolchains",
+            "io_bazel_rules_nogo": "io_bazel_rules_nogo"
+          },
+          "devImports": [],
+          "tags": [
+            {
+              "tagName": "download",
+              "attributeValues": {
+                "name": "go_default_sdk",
+                "version": "1.21.1"
+              },
+              "devDependency": false,
+              "location": {
+                "file": "https://bcr.bazel.build/modules/rules_go/0.45.1/MODULE.bazel",
+                "line": 17,
+                "column": 16
+              }
+            }
+          ],
+          "hasDevUseExtension": false,
+          "hasNonDevUseExtension": true
+        },
+        {
+          "extensionBzlFile": "@gazelle//:extensions.bzl",
+          "extensionName": "go_deps",
+          "usingModule": "rules_go@0.45.1",
+          "location": {
+            "file": "https://bcr.bazel.build/modules/rules_go/0.45.1/MODULE.bazel",
+            "line": 32,
+            "column": 24
+          },
+          "imports": {
+            "com_github_gogo_protobuf": "com_github_gogo_protobuf",
+            "com_github_golang_mock": "com_github_golang_mock",
+            "com_github_golang_protobuf": "com_github_golang_protobuf",
+            "org_golang_google_genproto": "org_golang_google_genproto",
+            "org_golang_google_grpc": "org_golang_google_grpc",
+            "org_golang_google_grpc_cmd_protoc_gen_go_grpc": "org_golang_google_grpc_cmd_protoc_gen_go_grpc",
+            "org_golang_google_protobuf": "org_golang_google_protobuf",
+            "org_golang_x_net": "org_golang_x_net",
+            "org_golang_x_tools": "org_golang_x_tools"
+          },
+          "devImports": [],
+          "tags": [
+            {
+              "tagName": "from_file",
+              "attributeValues": {
+                "go_mod": "//:go.mod"
+              },
+              "devDependency": false,
+              "location": {
+                "file": "https://bcr.bazel.build/modules/rules_go/0.45.1/MODULE.bazel",
+                "line": 33,
+                "column": 18
+              }
+            }
+          ],
+          "hasDevUseExtension": false,
+          "hasNonDevUseExtension": true
+        }
+      ],
+      "deps": {
+        "io_bazel_rules_go_bazel_features": "bazel_features@1.1.1",
+        "bazel_skylib": "bazel_skylib@1.5.0",
+        "platforms": "platforms@0.0.7",
+        "rules_proto": "rules_proto@4.0.0",
+        "com_google_protobuf": "protobuf@3.19.6",
+        "gazelle": "gazelle@0.35.0",
+        "bazel_tools": "bazel_tools@_",
+        "local_config_platform": "local_config_platform@_"
+      },
+      "repoSpec": {
+        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
+        "ruleClassName": "http_archive",
+        "attributes": {
+          "name": "rules_go~0.45.1",
+          "urls": [
+            "https://github.com/bazelbuild/rules_go/releases/download/v0.45.1/rules_go-v0.45.1.zip"
+          ],
+          "integrity": "sha256-ZzSnGZk7G6Tr6YBuhThkOVqNOWitJ/nddZwZaz6zq+g=",
+          "strip_prefix": "",
+          "remote_patches": {},
+          "remote_patch_strip": 0
+        }
+      }
+    },
+    "gazelle@0.35.0": {
+      "name": "gazelle",
+      "version": "0.35.0",
+      "key": "gazelle@0.35.0",
+      "repoName": "bazel_gazelle",
+      "executionPlatformsToRegister": [],
+      "toolchainsToRegister": [],
+      "extensionUsages": [
+        {
+          "extensionBzlFile": "@io_bazel_rules_go//go:extensions.bzl",
+          "extensionName": "go_sdk",
+          "usingModule": "gazelle@0.35.0",
+          "location": {
+            "file": "https://bcr.bazel.build/modules/gazelle/0.35.0/MODULE.bazel",
+            "line": 12,
+            "column": 23
+          },
+          "imports": {
+            "go_host_compatible_sdk_label": "go_host_compatible_sdk_label"
+          },
+          "devImports": [],
+          "tags": [],
+          "hasDevUseExtension": false,
+          "hasNonDevUseExtension": true
+        },
+        {
+          "extensionBzlFile": "@bazel_gazelle//internal/bzlmod:non_module_deps.bzl",
+          "extensionName": "non_module_deps",
+          "usingModule": "gazelle@0.35.0",
+          "location": {
+            "file": "https://bcr.bazel.build/modules/gazelle/0.35.0/MODULE.bazel",
+            "line": 20,
+            "column": 32
+          },
+          "imports": {
+            "bazel_gazelle_go_repository_cache": "bazel_gazelle_go_repository_cache",
+            "bazel_gazelle_go_repository_tools": "bazel_gazelle_go_repository_tools",
+            "bazel_gazelle_is_bazel_module": "bazel_gazelle_is_bazel_module"
+          },
+          "devImports": [],
+          "tags": [],
+          "hasDevUseExtension": false,
+          "hasNonDevUseExtension": true
+        },
+        {
+          "extensionBzlFile": "@bazel_gazelle//:extensions.bzl",
+          "extensionName": "go_deps",
+          "usingModule": "gazelle@0.35.0",
+          "location": {
+            "file": "https://bcr.bazel.build/modules/gazelle/0.35.0/MODULE.bazel",
+            "line": 28,
+            "column": 24
+          },
+          "imports": {
+            "com_github_bazelbuild_buildtools": "com_github_bazelbuild_buildtools",
+            "com_github_bmatcuk_doublestar_v4": "com_github_bmatcuk_doublestar_v4",
+            "com_github_fsnotify_fsnotify": "com_github_fsnotify_fsnotify",
+            "com_github_google_go_cmp": "com_github_google_go_cmp",
+            "com_github_pmezard_go_difflib": "com_github_pmezard_go_difflib",
+            "org_golang_x_mod": "org_golang_x_mod",
+            "org_golang_x_sync": "org_golang_x_sync",
+            "org_golang_x_tools": "org_golang_x_tools",
+            "org_golang_x_tools_go_vcs": "org_golang_x_tools_go_vcs",
+            "bazel_gazelle_go_repository_config": "bazel_gazelle_go_repository_config",
+            "com_github_golang_protobuf": "com_github_golang_protobuf",
+            "org_golang_google_protobuf": "org_golang_google_protobuf"
+          },
+          "devImports": [],
+          "tags": [
+            {
+              "tagName": "from_file",
+              "attributeValues": {
+                "go_mod": "//:go.mod"
+              },
+              "devDependency": false,
+              "location": {
+                "file": "https://bcr.bazel.build/modules/gazelle/0.35.0/MODULE.bazel",
+                "line": 29,
+                "column": 18
+              }
+            },
+            {
+              "tagName": "module",
+              "attributeValues": {
+                "path": "golang.org/x/tools",
+                "sum": "h1:zdAyfUGbYmuVokhzVmghFl2ZJh5QhcfebBgmVPFYA+8=",
+                "version": "v0.15.0"
+              },
+              "devDependency": false,
+              "location": {
+                "file": "https://bcr.bazel.build/modules/gazelle/0.35.0/MODULE.bazel",
+                "line": 33,
+                "column": 15
+              }
+            }
+          ],
+          "hasDevUseExtension": false,
+          "hasNonDevUseExtension": true
+        }
+      ],
+      "deps": {
+        "bazel_skylib": "bazel_skylib@1.5.0",
+        "com_google_protobuf": "protobuf@3.19.6",
+        "io_bazel_rules_go": "rules_go@0.45.1",
+        "rules_proto": "rules_proto@4.0.0",
+        "bazel_tools": "bazel_tools@_",
+        "local_config_platform": "local_config_platform@_"
+      },
+      "repoSpec": {
+        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
+        "ruleClassName": "http_archive",
+        "attributes": {
+          "name": "gazelle~0.35.0",
+          "urls": [
+            "https://github.com/bazelbuild/bazel-gazelle/releases/download/v0.35.0/bazel-gazelle-v0.35.0.tar.gz"
+          ],
+          "integrity": "sha256-MpOL2hbmcABjA1R5Bj2dJMYO2o15/Uc5Vj9Q0zHLMgk=",
+          "strip_prefix": "",
+          "remote_patches": {},
+          "remote_patch_strip": 0
+        }
+      }
+    },
+    "circl@1.3.7": {
+      "name": "circl",
+      "version": "1.3.7",
+      "key": "circl@1.3.7",
+      "repoName": "circl",
+      "executionPlatformsToRegister": [],
+      "toolchainsToRegister": [],
+      "extensionUsages": [
+        {
+          "extensionBzlFile": "@gazelle//:extensions.bzl",
+          "extensionName": "go_deps",
+          "usingModule": "circl@1.3.7",
+          "location": {
+            "file": "https://bcr.bazel.build/modules/circl/1.3.7/MODULE.bazel",
+            "line": 9,
+            "column": 24
+          },
+          "imports": {
+            "com_github_bwesterb_go_ristretto": "com_github_bwesterb_go_ristretto",
+            "org_golang_x_crypto": "org_golang_x_crypto",
+            "org_golang_x_sys": "org_golang_x_sys"
+          },
+          "devImports": [],
+          "tags": [
+            {
+              "tagName": "from_file",
+              "attributeValues": {
+                "go_mod": "//:go.mod"
+              },
+              "devDependency": false,
+              "location": {
+                "file": "https://bcr.bazel.build/modules/circl/1.3.7/MODULE.bazel",
+                "line": 10,
+                "column": 18
+              }
+            }
+          ],
+          "hasDevUseExtension": false,
+          "hasNonDevUseExtension": true
+        }
+      ],
+      "deps": {
+        "io_bazel_rules_go": "rules_go@0.45.1",
+        "gazelle": "gazelle@0.35.0",
+        "bazel_tools": "bazel_tools@_",
+        "local_config_platform": "local_config_platform@_"
+      },
+      "repoSpec": {
+        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
+        "ruleClassName": "http_archive",
+        "attributes": {
+          "name": "circl~1.3.7",
+          "urls": [
+            "https://proxy.golang.org/github.com/cloudflare/circl/@v/v1.3.7.zip"
+          ],
+          "integrity": "sha256-RJcJPLdUTTDp1ddBpeYsFPuJicQnHKCpoKA6c1cLO4M=",
+          "strip_prefix": "github.com/cloudflare/circl@v1.3.7",
+          "remote_patches": {
+            "https://bcr.bazel.build/modules/circl/1.3.7/patches/add_module_file.patch": "sha256-oJqWBroozXyWQ2XpjeE9Bc1ovwCE+eFjuuHZp6tke68=",
+            "https://bcr.bazel.build/modules/circl/1.3.7/patches/generate_build_files.patch": "sha256-eeaK8yZzN37I4sMke+y0VZkGs6umdC1NGFNM6oPuMpc=",
+            "https://bcr.bazel.build/modules/circl/1.3.7/patches/modify_build_files.patch": "sha256-tQe2SIRz5t9HN9n5KrWCakNujPWQUcR3AR4uakOBIy8="
+          },
+          "remote_patch_strip": 1
+        }
+      }
+    },
+    "bazel_tools@_": {
+      "name": "bazel_tools",
+      "version": "",
+      "key": "bazel_tools@_",
+      "repoName": "bazel_tools",
+      "executionPlatformsToRegister": [],
+      "toolchainsToRegister": [
+        "@local_config_cc_toolchains//:all",
+        "@local_config_sh//:local_sh_toolchain"
+      ],
+      "extensionUsages": [
+        {
+          "extensionBzlFile": "@bazel_tools//tools/cpp:cc_configure.bzl",
+          "extensionName": "cc_configure_extension",
+          "usingModule": "bazel_tools@_",
+          "location": {
+            "file": "@@bazel_tools//:MODULE.bazel",
+            "line": 17,
+            "column": 29
+          },
+          "imports": {
+            "local_config_cc": "local_config_cc",
+            "local_config_cc_toolchains": "local_config_cc_toolchains"
+          },
+          "devImports": [],
+          "tags": [],
+          "hasDevUseExtension": false,
+          "hasNonDevUseExtension": true
+        },
+        {
+          "extensionBzlFile": "@bazel_tools//tools/osx:xcode_configure.bzl",
+          "extensionName": "xcode_configure_extension",
+          "usingModule": "bazel_tools@_",
+          "location": {
+            "file": "@@bazel_tools//:MODULE.bazel",
+            "line": 21,
+            "column": 32
+          },
+          "imports": {
+            "local_config_xcode": "local_config_xcode"
+          },
+          "devImports": [],
+          "tags": [],
+          "hasDevUseExtension": false,
+          "hasNonDevUseExtension": true
+        },
+        {
+          "extensionBzlFile": "@rules_java//java:extensions.bzl",
+          "extensionName": "toolchains",
+          "usingModule": "bazel_tools@_",
+          "location": {
+            "file": "@@bazel_tools//:MODULE.bazel",
+            "line": 24,
+            "column": 32
+          },
+          "imports": {
+            "local_jdk": "local_jdk",
+            "remote_java_tools": "remote_java_tools",
+            "remote_java_tools_linux": "remote_java_tools_linux",
+            "remote_java_tools_windows": "remote_java_tools_windows",
+            "remote_java_tools_darwin_x86_64": "remote_java_tools_darwin_x86_64",
+            "remote_java_tools_darwin_arm64": "remote_java_tools_darwin_arm64"
+          },
+          "devImports": [],
+          "tags": [],
+          "hasDevUseExtension": false,
+          "hasNonDevUseExtension": true
+        },
+        {
+          "extensionBzlFile": "@bazel_tools//tools/sh:sh_configure.bzl",
+          "extensionName": "sh_configure_extension",
+          "usingModule": "bazel_tools@_",
+          "location": {
+            "file": "@@bazel_tools//:MODULE.bazel",
+            "line": 35,
+            "column": 39
+          },
+          "imports": {
+            "local_config_sh": "local_config_sh"
+          },
+          "devImports": [],
+          "tags": [],
+          "hasDevUseExtension": false,
+          "hasNonDevUseExtension": true
+        },
+        {
+          "extensionBzlFile": "@bazel_tools//tools/test:extensions.bzl",
+          "extensionName": "remote_coverage_tools_extension",
+          "usingModule": "bazel_tools@_",
+          "location": {
+            "file": "@@bazel_tools//:MODULE.bazel",
+            "line": 39,
+            "column": 48
+          },
+          "imports": {
+            "remote_coverage_tools": "remote_coverage_tools"
+          },
+          "devImports": [],
+          "tags": [],
+          "hasDevUseExtension": false,
+          "hasNonDevUseExtension": true
+        },
+        {
+          "extensionBzlFile": "@bazel_tools//tools/android:android_extensions.bzl",
+          "extensionName": "remote_android_tools_extensions",
+          "usingModule": "bazel_tools@_",
+          "location": {
+            "file": "@@bazel_tools//:MODULE.bazel",
+            "line": 42,
+            "column": 42
+          },
+          "imports": {
+            "android_gmaven_r8": "android_gmaven_r8",
+            "android_tools": "android_tools"
+          },
+          "devImports": [],
+          "tags": [],
+          "hasDevUseExtension": false,
+          "hasNonDevUseExtension": true
+        }
+      ],
+      "deps": {
+        "rules_cc": "rules_cc@0.0.9",
+        "rules_java": "rules_java@7.1.0",
+        "rules_license": "rules_license@0.0.7",
+        "rules_proto": "rules_proto@4.0.0",
+        "rules_python": "rules_python@0.4.0",
+        "platforms": "platforms@0.0.7",
+        "com_google_protobuf": "protobuf@3.19.6",
+        "zlib": "zlib@1.3",
+        "build_bazel_apple_support": "apple_support@1.5.0",
+        "local_config_platform": "local_config_platform@_"
+      }
+    },
+    "local_config_platform@_": {
+      "name": "local_config_platform",
+      "version": "",
+      "key": "local_config_platform@_",
+      "repoName": "local_config_platform",
+      "executionPlatformsToRegister": [],
+      "toolchainsToRegister": [],
+      "extensionUsages": [],
+      "deps": {
+        "platforms": "platforms@0.0.7",
+        "bazel_tools": "bazel_tools@_"
+      }
+    },
+    "platforms@0.0.7": {
+      "name": "platforms",
+      "version": "0.0.7",
+      "key": "platforms@0.0.7",
+      "repoName": "platforms",
+      "executionPlatformsToRegister": [],
+      "toolchainsToRegister": [],
+      "extensionUsages": [],
+      "deps": {
+        "rules_license": "rules_license@0.0.7",
+        "bazel_tools": "bazel_tools@_",
+        "local_config_platform": "local_config_platform@_"
+      },
+      "repoSpec": {
+        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
+        "ruleClassName": "http_archive",
+        "attributes": {
+          "name": "platforms",
+          "urls": [
+            "https://github.com/bazelbuild/platforms/releases/download/0.0.7/platforms-0.0.7.tar.gz"
+          ],
+          "integrity": "sha256-OlYcmee9vpFzqmU/1Xn+hJ8djWc5V4CrR3Cx84FDHVE=",
+          "strip_prefix": "",
+          "remote_patches": {},
+          "remote_patch_strip": 0
+        }
+      }
+    },
+    "bazel_features@1.1.1": {
+      "name": "bazel_features",
+      "version": "1.1.1",
+      "key": "bazel_features@1.1.1",
+      "repoName": "bazel_features",
+      "executionPlatformsToRegister": [],
+      "toolchainsToRegister": [],
+      "extensionUsages": [
+        {
+          "extensionBzlFile": "@bazel_features//private:extensions.bzl",
+          "extensionName": "version_extension",
+          "usingModule": "bazel_features@1.1.1",
+          "location": {
+            "file": "https://bcr.bazel.build/modules/bazel_features/1.1.1/MODULE.bazel",
+            "line": 6,
+            "column": 24
+          },
+          "imports": {
+            "bazel_features_globals": "bazel_features_globals",
+            "bazel_features_version": "bazel_features_version"
+          },
+          "devImports": [],
+          "tags": [],
+          "hasDevUseExtension": false,
+          "hasNonDevUseExtension": true
+        }
+      ],
+      "deps": {
+        "bazel_tools": "bazel_tools@_",
+        "local_config_platform": "local_config_platform@_"
+      },
+      "repoSpec": {
+        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
+        "ruleClassName": "http_archive",
+        "attributes": {
+          "name": "bazel_features~1.1.1",
+          "urls": [
+            "https://github.com/bazel-contrib/bazel_features/releases/download/v1.1.1/bazel_features-v1.1.1.tar.gz"
+          ],
+          "integrity": "sha256-YsJuQn5cvHUQJERpJ2IuOYqdzfMsZDJSOIFXCdEcEag=",
+          "strip_prefix": "bazel_features-1.1.1",
+          "remote_patches": {
+            "https://bcr.bazel.build/modules/bazel_features/1.1.1/patches/module_dot_bazel_version.patch": "sha256-+56MAEsc7bYN/Pzhn252ZQUxiRzZg9bynXj1qpsmCYs="
+          },
+          "remote_patch_strip": 1
+        }
+      }
+    },
+    "rules_proto@4.0.0": {
+      "name": "rules_proto",
+      "version": "4.0.0",
+      "key": "rules_proto@4.0.0",
+      "repoName": "rules_proto",
+      "executionPlatformsToRegister": [],
+      "toolchainsToRegister": [],
+      "extensionUsages": [],
+      "deps": {
+        "bazel_skylib": "bazel_skylib@1.5.0",
+        "rules_cc": "rules_cc@0.0.9",
+        "bazel_tools": "bazel_tools@_",
+        "local_config_platform": "local_config_platform@_"
+      },
+      "repoSpec": {
+        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
+        "ruleClassName": "http_archive",
+        "attributes": {
+          "name": "rules_proto~4.0.0",
+          "urls": [
+            "https://github.com/bazelbuild/rules_proto/archive/refs/tags/4.0.0.zip"
+          ],
+          "integrity": "sha256-Lr5z6xyuRA19pNtRYMGjKaynwQpck4H/lwYyVjyhoq4=",
+          "strip_prefix": "rules_proto-4.0.0",
+          "remote_patches": {
+            "https://bcr.bazel.build/modules/rules_proto/4.0.0/patches/module_dot_bazel.patch": "sha256-MclJO7tIAM2ElDAmscNId9pKTpOuDGHgVlW/9VBOIp0="
+          },
+          "remote_patch_strip": 0
+        }
+      }
+    },
+    "protobuf@3.19.6": {
+      "name": "protobuf",
+      "version": "3.19.6",
+      "key": "protobuf@3.19.6",
+      "repoName": "protobuf",
+      "executionPlatformsToRegister": [],
+      "toolchainsToRegister": [],
+      "extensionUsages": [],
+      "deps": {
+        "bazel_skylib": "bazel_skylib@1.5.0",
+        "zlib": "zlib@1.3",
+        "rules_python": "rules_python@0.4.0",
+        "rules_cc": "rules_cc@0.0.9",
+        "rules_proto": "rules_proto@4.0.0",
+        "rules_java": "rules_java@7.1.0",
+        "bazel_tools": "bazel_tools@_",
+        "local_config_platform": "local_config_platform@_"
+      },
+      "repoSpec": {
+        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
+        "ruleClassName": "http_archive",
+        "attributes": {
+          "name": "protobuf~3.19.6",
+          "urls": [
+            "https://github.com/protocolbuffers/protobuf/archive/refs/tags/v3.19.6.zip"
+          ],
+          "integrity": "sha256-OH4sVZuyx8G8N5jE5s/wFTgaebJ1hpavy/johzC0c4k=",
+          "strip_prefix": "protobuf-3.19.6",
+          "remote_patches": {
+            "https://bcr.bazel.build/modules/protobuf/3.19.6/patches/relative_repo_names.patch": "sha256-w/5gw/zGv8NFId+669hcdw1Uus2lxgYpulATHIwIByI=",
+            "https://bcr.bazel.build/modules/protobuf/3.19.6/patches/remove_dependency_on_rules_jvm_external.patch": "sha256-THUTnVgEBmjA0W7fKzIyZOVG58DnW9HQTkr4D2zKUUc=",
+            "https://bcr.bazel.build/modules/protobuf/3.19.6/patches/add_module_dot_bazel_for_examples.patch": "sha256-s/b1gi3baK3LsXefI2rQilhmkb2R5jVJdnT6zEcdfHY=",
+            "https://bcr.bazel.build/modules/protobuf/3.19.6/patches/module_dot_bazel.patch": "sha256-S0DEni8zgx7rHscW3z/rCEubQnYec0XhNet640cw0h4="
+          },
+          "remote_patch_strip": 1
+        }
+      }
+    },
+    "rules_cc@0.0.9": {
+      "name": "rules_cc",
+      "version": "0.0.9",
+      "key": "rules_cc@0.0.9",
+      "repoName": "rules_cc",
+      "executionPlatformsToRegister": [],
+      "toolchainsToRegister": [
+        "@local_config_cc_toolchains//:all"
+      ],
+      "extensionUsages": [
+        {
+          "extensionBzlFile": "@bazel_tools//tools/cpp:cc_configure.bzl",
+          "extensionName": "cc_configure_extension",
+          "usingModule": "rules_cc@0.0.9",
+          "location": {
+            "file": "https://bcr.bazel.build/modules/rules_cc/0.0.9/MODULE.bazel",
+            "line": 9,
+            "column": 29
+          },
+          "imports": {
+            "local_config_cc_toolchains": "local_config_cc_toolchains"
+          },
+          "devImports": [],
+          "tags": [],
+          "hasDevUseExtension": false,
+          "hasNonDevUseExtension": true
+        }
+      ],
+      "deps": {
+        "platforms": "platforms@0.0.7",
+        "bazel_tools": "bazel_tools@_",
+        "local_config_platform": "local_config_platform@_"
+      },
+      "repoSpec": {
+        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
+        "ruleClassName": "http_archive",
+        "attributes": {
+          "name": "rules_cc~0.0.9",
+          "urls": [
+            "https://github.com/bazelbuild/rules_cc/releases/download/0.0.9/rules_cc-0.0.9.tar.gz"
+          ],
+          "integrity": "sha256-IDeHW5pEVtzkp50RKorohbvEqtlo5lh9ym5k86CQDN8=",
+          "strip_prefix": "rules_cc-0.0.9",
+          "remote_patches": {
+            "https://bcr.bazel.build/modules/rules_cc/0.0.9/patches/module_dot_bazel_version.patch": "sha256-mM+qzOI0SgAdaJBlWOSMwMPKpaA9b7R37Hj/tp5bb4g="
+          },
+          "remote_patch_strip": 0
+        }
+      }
+    },
+    "rules_java@7.1.0": {
+      "name": "rules_java",
+      "version": "7.1.0",
+      "key": "rules_java@7.1.0",
+      "repoName": "rules_java",
+      "executionPlatformsToRegister": [],
+      "toolchainsToRegister": [
+        "//toolchains:all",
+        "@local_jdk//:runtime_toolchain_definition",
+        "@local_jdk//:bootstrap_runtime_toolchain_definition",
+        "@remotejdk11_linux_toolchain_config_repo//:all",
+        "@remotejdk11_linux_aarch64_toolchain_config_repo//:all",
+        "@remotejdk11_linux_ppc64le_toolchain_config_repo//:all",
+        "@remotejdk11_linux_s390x_toolchain_config_repo//:all",
+        "@remotejdk11_macos_toolchain_config_repo//:all",
+        "@remotejdk11_macos_aarch64_toolchain_config_repo//:all",
+        "@remotejdk11_win_toolchain_config_repo//:all",
+        "@remotejdk11_win_arm64_toolchain_config_repo//:all",
+        "@remotejdk17_linux_toolchain_config_repo//:all",
+        "@remotejdk17_linux_aarch64_toolchain_config_repo//:all",
+        "@remotejdk17_linux_ppc64le_toolchain_config_repo//:all",
+        "@remotejdk17_linux_s390x_toolchain_config_repo//:all",
+        "@remotejdk17_macos_toolchain_config_repo//:all",
+        "@remotejdk17_macos_aarch64_toolchain_config_repo//:all",
+        "@remotejdk17_win_toolchain_config_repo//:all",
+        "@remotejdk17_win_arm64_toolchain_config_repo//:all",
+        "@remotejdk21_linux_toolchain_config_repo//:all",
+        "@remotejdk21_linux_aarch64_toolchain_config_repo//:all",
+        "@remotejdk21_macos_toolchain_config_repo//:all",
+        "@remotejdk21_macos_aarch64_toolchain_config_repo//:all",
+        "@remotejdk21_win_toolchain_config_repo//:all"
+      ],
+      "extensionUsages": [
+        {
+          "extensionBzlFile": "@rules_java//java:extensions.bzl",
+          "extensionName": "toolchains",
+          "usingModule": "rules_java@7.1.0",
+          "location": {
+            "file": "https://bcr.bazel.build/modules/rules_java/7.1.0/MODULE.bazel",
+            "line": 19,
+            "column": 27
+          },
+          "imports": {
+            "remote_java_tools": "remote_java_tools",
+            "remote_java_tools_linux": "remote_java_tools_linux",
+            "remote_java_tools_windows": "remote_java_tools_windows",
+            "remote_java_tools_darwin_x86_64": "remote_java_tools_darwin_x86_64",
+            "remote_java_tools_darwin_arm64": "remote_java_tools_darwin_arm64",
+            "local_jdk": "local_jdk",
+            "remotejdk11_linux_toolchain_config_repo": "remotejdk11_linux_toolchain_config_repo",
+            "remotejdk11_linux_aarch64_toolchain_config_repo": "remotejdk11_linux_aarch64_toolchain_config_repo",
+            "remotejdk11_linux_ppc64le_toolchain_config_repo": "remotejdk11_linux_ppc64le_toolchain_config_repo",
+            "remotejdk11_linux_s390x_toolchain_config_repo": "remotejdk11_linux_s390x_toolchain_config_repo",
+            "remotejdk11_macos_toolchain_config_repo": "remotejdk11_macos_toolchain_config_repo",
+            "remotejdk11_macos_aarch64_toolchain_config_repo": "remotejdk11_macos_aarch64_toolchain_config_repo",
+            "remotejdk11_win_toolchain_config_repo": "remotejdk11_win_toolchain_config_repo",
+            "remotejdk11_win_arm64_toolchain_config_repo": "remotejdk11_win_arm64_toolchain_config_repo",
+            "remotejdk17_linux_toolchain_config_repo": "remotejdk17_linux_toolchain_config_repo",
+            "remotejdk17_linux_aarch64_toolchain_config_repo": "remotejdk17_linux_aarch64_toolchain_config_repo",
+            "remotejdk17_linux_ppc64le_toolchain_config_repo": "remotejdk17_linux_ppc64le_toolchain_config_repo",
+            "remotejdk17_linux_s390x_toolchain_config_repo": "remotejdk17_linux_s390x_toolchain_config_repo",
+            "remotejdk17_macos_toolchain_config_repo": "remotejdk17_macos_toolchain_config_repo",
+            "remotejdk17_macos_aarch64_toolchain_config_repo": "remotejdk17_macos_aarch64_toolchain_config_repo",
+            "remotejdk17_win_toolchain_config_repo": "remotejdk17_win_toolchain_config_repo",
+            "remotejdk17_win_arm64_toolchain_config_repo": "remotejdk17_win_arm64_toolchain_config_repo",
+            "remotejdk21_linux_toolchain_config_repo": "remotejdk21_linux_toolchain_config_repo",
+            "remotejdk21_linux_aarch64_toolchain_config_repo": "remotejdk21_linux_aarch64_toolchain_config_repo",
+            "remotejdk21_macos_toolchain_config_repo": "remotejdk21_macos_toolchain_config_repo",
+            "remotejdk21_macos_aarch64_toolchain_config_repo": "remotejdk21_macos_aarch64_toolchain_config_repo",
+            "remotejdk21_win_toolchain_config_repo": "remotejdk21_win_toolchain_config_repo"
+          },
+          "devImports": [],
+          "tags": [],
+          "hasDevUseExtension": false,
+          "hasNonDevUseExtension": true
+        }
+      ],
+      "deps": {
+        "platforms": "platforms@0.0.7",
+        "rules_cc": "rules_cc@0.0.9",
+        "bazel_skylib": "bazel_skylib@1.5.0",
+        "rules_proto": "rules_proto@4.0.0",
+        "rules_license": "rules_license@0.0.7",
+        "bazel_tools": "bazel_tools@_",
+        "local_config_platform": "local_config_platform@_"
+      },
+      "repoSpec": {
+        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
+        "ruleClassName": "http_archive",
+        "attributes": {
+          "name": "rules_java~7.1.0",
+          "urls": [
+            "https://github.com/bazelbuild/rules_java/releases/download/7.1.0/rules_java-7.1.0.tar.gz"
+          ],
+          "integrity": "sha256-o3pOX2OrgnFuXdau75iO2EYcegC46TYnImKJn1h81OE=",
+          "strip_prefix": "",
+          "remote_patches": {},
+          "remote_patch_strip": 0
+        }
+      }
+    },
+    "rules_license@0.0.7": {
+      "name": "rules_license",
+      "version": "0.0.7",
+      "key": "rules_license@0.0.7",
+      "repoName": "rules_license",
+      "executionPlatformsToRegister": [],
+      "toolchainsToRegister": [],
+      "extensionUsages": [],
+      "deps": {
+        "bazel_tools": "bazel_tools@_",
+        "local_config_platform": "local_config_platform@_"
+      },
+      "repoSpec": {
+        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
+        "ruleClassName": "http_archive",
+        "attributes": {
+          "name": "rules_license~0.0.7",
+          "urls": [
+            "https://github.com/bazelbuild/rules_license/releases/download/0.0.7/rules_license-0.0.7.tar.gz"
+          ],
+          "integrity": "sha256-RTHezLkTY5ww5cdRKgVNXYdWmNrrddjPkPKEN1/nw2A=",
+          "strip_prefix": "",
+          "remote_patches": {},
+          "remote_patch_strip": 0
+        }
+      }
+    },
+    "rules_python@0.4.0": {
+      "name": "rules_python",
+      "version": "0.4.0",
+      "key": "rules_python@0.4.0",
+      "repoName": "rules_python",
+      "executionPlatformsToRegister": [],
+      "toolchainsToRegister": [
+        "@bazel_tools//tools/python:autodetecting_toolchain"
+      ],
+      "extensionUsages": [
+        {
+          "extensionBzlFile": "@rules_python//bzlmod:extensions.bzl",
+          "extensionName": "pip_install",
+          "usingModule": "rules_python@0.4.0",
+          "location": {
+            "file": "https://bcr.bazel.build/modules/rules_python/0.4.0/MODULE.bazel",
+            "line": 7,
+            "column": 28
+          },
+          "imports": {
+            "pypi__click": "pypi__click",
+            "pypi__pip": "pypi__pip",
+            "pypi__pip_tools": "pypi__pip_tools",
+            "pypi__pkginfo": "pypi__pkginfo",
+            "pypi__setuptools": "pypi__setuptools",
+            "pypi__wheel": "pypi__wheel"
+          },
+          "devImports": [],
+          "tags": [],
+          "hasDevUseExtension": false,
+          "hasNonDevUseExtension": true
+        }
+      ],
+      "deps": {
+        "bazel_tools": "bazel_tools@_",
+        "local_config_platform": "local_config_platform@_"
+      },
+      "repoSpec": {
+        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
+        "ruleClassName": "http_archive",
+        "attributes": {
+          "name": "rules_python~0.4.0",
+          "urls": [
+            "https://github.com/bazelbuild/rules_python/releases/download/0.4.0/rules_python-0.4.0.tar.gz"
+          ],
+          "integrity": "sha256-lUqom0kb5KCDMEosuDgBnIuMNyCnq7nEy4GseiQjDOo=",
+          "strip_prefix": "",
+          "remote_patches": {
+            "https://bcr.bazel.build/modules/rules_python/0.4.0/patches/propagate_pip_install_dependencies.patch": "sha256-v7S/dem/mixg63MF4KoRGDA4KEol9ab/tIVp+6Xq0D0=",
+            "https://bcr.bazel.build/modules/rules_python/0.4.0/patches/module_dot_bazel.patch": "sha256-kG4VIfWxQazzTuh50mvsx6pmyoRVA4lfH5rkto/Oq+Y="
+          },
+          "remote_patch_strip": 1
+        }
+      }
+    },
+    "zlib@1.3": {
+      "name": "zlib",
+      "version": "1.3",
+      "key": "zlib@1.3",
+      "repoName": "zlib",
+      "executionPlatformsToRegister": [],
+      "toolchainsToRegister": [],
+      "extensionUsages": [],
+      "deps": {
+        "platforms": "platforms@0.0.7",
+        "rules_cc": "rules_cc@0.0.9",
+        "bazel_tools": "bazel_tools@_",
+        "local_config_platform": "local_config_platform@_"
+      },
+      "repoSpec": {
+        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
+        "ruleClassName": "http_archive",
+        "attributes": {
+          "name": "zlib~1.3",
+          "urls": [
+            "https://github.com/madler/zlib/releases/download/v1.3/zlib-1.3.tar.gz"
+          ],
+          "integrity": "sha256-/wukwpIBPbwnUws6geH5qBPNOd4Byl4Pi/NVcC76WT4=",
+          "strip_prefix": "zlib-1.3",
+          "remote_patches": {
+            "https://bcr.bazel.build/modules/zlib/1.3/patches/add_build_file.patch": "sha256-Ei+FYaaOo7A3jTKunMEodTI0Uw5NXQyZEcboMC8JskY=",
+            "https://bcr.bazel.build/modules/zlib/1.3/patches/module_dot_bazel.patch": "sha256-fPWLM+2xaF/kuy+kZc1YTfW6hNjrkG400Ho7gckuyJk="
+          },
+          "remote_patch_strip": 0
+        }
+      }
+    },
+    "apple_support@1.5.0": {
+      "name": "apple_support",
+      "version": "1.5.0",
+      "key": "apple_support@1.5.0",
+      "repoName": "build_bazel_apple_support",
+      "executionPlatformsToRegister": [],
+      "toolchainsToRegister": [
+        "@local_config_apple_cc_toolchains//:all"
+      ],
+      "extensionUsages": [
+        {
+          "extensionBzlFile": "@build_bazel_apple_support//crosstool:setup.bzl",
+          "extensionName": "apple_cc_configure_extension",
+          "usingModule": "apple_support@1.5.0",
+          "location": {
+            "file": "https://bcr.bazel.build/modules/apple_support/1.5.0/MODULE.bazel",
+            "line": 17,
+            "column": 35
+          },
+          "imports": {
+            "local_config_apple_cc": "local_config_apple_cc",
+            "local_config_apple_cc_toolchains": "local_config_apple_cc_toolchains"
+          },
+          "devImports": [],
+          "tags": [],
+          "hasDevUseExtension": false,
+          "hasNonDevUseExtension": true
+        }
+      ],
+      "deps": {
+        "bazel_skylib": "bazel_skylib@1.5.0",
+        "platforms": "platforms@0.0.7",
+        "bazel_tools": "bazel_tools@_",
+        "local_config_platform": "local_config_platform@_"
+      },
+      "repoSpec": {
+        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
+        "ruleClassName": "http_archive",
+        "attributes": {
+          "name": "apple_support~1.5.0",
+          "urls": [
+            "https://github.com/bazelbuild/apple_support/releases/download/1.5.0/apple_support.1.5.0.tar.gz"
+          ],
+          "integrity": "sha256-miM41vja0yRPgj8txghKA+TQ+7J8qJLclw5okNW0gYQ=",
+          "strip_prefix": "",
+          "remote_patches": {},
+          "remote_patch_strip": 0
+        }
+      }
+    }
+  },
+  "moduleExtensions": {
+    "@@apple_support~1.5.0//crosstool:setup.bzl%apple_cc_configure_extension": {
+      "general": {
+        "bzlTransitiveDigest": "pMLFCYaRPkgXPQ8vtuNkMfiHfPmRBy6QJfnid4sWfv0=",
+        "accumulatedFileDigests": {},
+        "envVariables": {},
+        "generatedRepoSpecs": {
+          "local_config_apple_cc": {
+            "bzlFile": "@@apple_support~1.5.0//crosstool:setup.bzl",
+            "ruleClassName": "_apple_cc_autoconf",
+            "attributes": {
+              "name": "apple_support~1.5.0~apple_cc_configure_extension~local_config_apple_cc"
+            }
+          },
+          "local_config_apple_cc_toolchains": {
+            "bzlFile": "@@apple_support~1.5.0//crosstool:setup.bzl",
+            "ruleClassName": "_apple_cc_autoconf_toolchains",
+            "attributes": {
+              "name": "apple_support~1.5.0~apple_cc_configure_extension~local_config_apple_cc_toolchains"
+            }
+          }
+        },
+        "recordedRepoMappingEntries": [
+          [
+            "apple_support~1.5.0",
+            "bazel_tools",
+            "bazel_tools"
+          ]
+        ]
+      }
+    },
+    "@@bazel_features~1.1.1//private:extensions.bzl%version_extension": {
+      "general": {
+        "bzlTransitiveDigest": "xm7Skm1Las5saxzFWt2hbS+e68BWi+MXyt6+lKIhjPA=",
+        "accumulatedFileDigests": {},
+        "envVariables": {},
+        "generatedRepoSpecs": {
+          "bazel_features_version": {
+            "bzlFile": "@@bazel_features~1.1.1//private:version_repo.bzl",
+            "ruleClassName": "version_repo",
+            "attributes": {
+              "name": "bazel_features~1.1.1~version_extension~bazel_features_version"
+            }
+          },
+          "bazel_features_globals": {
+            "bzlFile": "@@bazel_features~1.1.1//private:globals_repo.bzl",
+            "ruleClassName": "globals_repo",
+            "attributes": {
+              "name": "bazel_features~1.1.1~version_extension~bazel_features_globals",
+              "globals": {
+                "RunEnvironmentInfo": "5.3.0",
+                "DefaultInfo": "0.0.1",
+                "__TestingOnly_NeverAvailable": "1000000000.0.0"
+              }
+            }
+          }
+        },
+        "recordedRepoMappingEntries": []
+      }
+    },
+    "@@bazel_tools//tools/cpp:cc_configure.bzl%cc_configure_extension": {
+      "general": {
+        "bzlTransitiveDigest": "mcsWHq3xORJexV5/4eCvNOLxFOQKV6eli3fkr+tEaqE=",
+        "accumulatedFileDigests": {},
+        "envVariables": {},
+        "generatedRepoSpecs": {
+          "local_config_cc": {
+            "bzlFile": "@@bazel_tools//tools/cpp:cc_configure.bzl",
+            "ruleClassName": "cc_autoconf",
+            "attributes": {
+              "name": "bazel_tools~cc_configure_extension~local_config_cc"
+            }
+          },
+          "local_config_cc_toolchains": {
+            "bzlFile": "@@bazel_tools//tools/cpp:cc_configure.bzl",
+            "ruleClassName": "cc_autoconf_toolchains",
+            "attributes": {
+              "name": "bazel_tools~cc_configure_extension~local_config_cc_toolchains"
+            }
+          }
+        },
+        "recordedRepoMappingEntries": [
+          [
+            "bazel_tools",
+            "bazel_tools",
+            "bazel_tools"
+          ]
+        ]
+      }
+    },
+    "@@bazel_tools//tools/osx:xcode_configure.bzl%xcode_configure_extension": {
+      "general": {
+        "bzlTransitiveDigest": "Qh2bWTU6QW6wkrd87qrU4YeY+SG37Nvw3A0PR4Y0L2Y=",
+        "accumulatedFileDigests": {},
+        "envVariables": {},
+        "generatedRepoSpecs": {
+          "local_config_xcode": {
+            "bzlFile": "@@bazel_tools//tools/osx:xcode_configure.bzl",
+            "ruleClassName": "xcode_autoconf",
+            "attributes": {
+              "name": "bazel_tools~xcode_configure_extension~local_config_xcode",
+              "xcode_locator": "@bazel_tools//tools/osx:xcode_locator.m",
+              "remote_xcode": ""
+            }
+          }
+        },
+        "recordedRepoMappingEntries": []
+      }
+    },
+    "@@bazel_tools//tools/sh:sh_configure.bzl%sh_configure_extension": {
+      "general": {
+        "bzlTransitiveDigest": "hp4NgmNjEg5+xgvzfh6L83bt9/aiiWETuNpwNuF1MSU=",
+        "accumulatedFileDigests": {},
+        "envVariables": {},
+        "generatedRepoSpecs": {
+          "local_config_sh": {
+            "bzlFile": "@@bazel_tools//tools/sh:sh_configure.bzl",
+            "ruleClassName": "sh_config",
+            "attributes": {
+              "name": "bazel_tools~sh_configure_extension~local_config_sh"
+            }
+          }
+        },
+        "recordedRepoMappingEntries": []
+      }
+    },
+    "@@gazelle~0.35.0//:extensions.bzl%go_deps": {
+      "general": {
+        "bzlTransitiveDigest": "zP01muRk4s4xWGK3gNPXOyDMQkOPsIhu99akeKWFFQ0=",
+        "accumulatedFileDigests": {
+          "@@//:go.mod": "075992fbd5b5d7ae7fd39696c36ee6d9c67c24c9fb3538eecfd72efe1de4703c",
+          "@@//:go.sum": "5c6896cd2db44401ba89497f654bbabb4237868de971731f986d0548eb6c9675",
+          "@@gazelle~0.35.0//:go.mod": "48dc6e771c3028ee1c18b9ffc81e596fd5f6d7e0016c5ef280e30f2821f60473",
+          "@@gazelle~0.35.0//:go.sum": "7c4460e8ecb5dd8691a51d4fa2e9e4751108b933636497ce46db499fc2e7a88d",
+          "@@circl~1.3.7//:go.sum": "0bd5c0e45a89a2de0ac7eead749230a78347445611e14f5732a53177e2dcf703",
+          "@@rules_go~0.45.1//:go.mod": "de22304b720f7f61350ec1c9739de6c0a1b1103fd22bfeb6e92c6c843ddc6d6e",
+          "@@rules_go~0.45.1//:go.sum": "d56fdb19b21a5f12bcf625c49432371ac39c2def0f564098fbda107f7c080f40",
+          "@@circl~1.3.7//:go.mod": "9ae0a84b061664ec8589ba6a61c18c83c890212072a18e48c9b6b0ba9e68da8c"
+        },
+        "envVariables": {},
+        "generatedRepoSpecs": {
+          "org_golang_x_tools_go_vcs": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~org_golang_x_tools_go_vcs",
+              "importpath": "golang.org/x/tools/go/vcs",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:cOIJqWBl99H1dH5LWizPa+0ImeeJq3t3cJjaeOWUAL4=",
+              "replace": "",
+              "version": "v0.1.0-deprecated"
+            }
+          },
+          "com_github_fsnotify_fsnotify": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_fsnotify_fsnotify",
+              "importpath": "github.com/fsnotify/fsnotify",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:8JEhPFa5W2WU7YfeZzPNqzMP6Lwt7L2715Ggo0nosvA=",
+              "replace": "",
+              "version": "v1.7.0"
+            }
+          },
+          "com_github_bahlo_generic_list_go": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_bahlo_generic_list_go",
+              "importpath": "github.com/bahlo/generic-list-go",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:5sz/EEAK+ls5wF+NeqDpk5+iNdMDXrh3z3nPnH1Wvgk=",
+              "replace": "",
+              "version": "v0.2.0"
+            }
+          },
+          "com_github_mitchellh_copystructure": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_mitchellh_copystructure",
+              "importpath": "github.com/mitchellh/copystructure",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:vpKXTN4ewci03Vljg/q9QvCGUDttBOGBIa15WveJJGw=",
+              "replace": "",
+              "version": "v1.2.0"
+            }
+          },
+          "com_github_spf13_cobra": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_spf13_cobra",
+              "importpath": "github.com/spf13/cobra",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:7aJaZx1B85qltLMc546zn58BxxfZdR/W22ej9CFoEf0=",
+              "replace": "",
+              "version": "v1.8.0"
+            }
+          },
+          "org_golang_x_exp": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~org_golang_x_exp",
+              "importpath": "golang.org/x/exp",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:c0vyKkb6yr3KR7jEfJaOSv4lG7xPkbN6r52aJz1d8a8=",
+              "replace": "",
+              "version": "v0.0.0-20231206192017-f3f8817b8deb"
+            }
+          },
+          "com_github_spf13_cast": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_spf13_cast",
+              "importpath": "github.com/spf13/cast",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:R+kOtfhWQE6TVQzY+4D7wJLBgkdVasCEFxSUBYBYIlA=",
+              "replace": "",
+              "version": "v1.5.1"
+            }
+          },
+          "org_golang_x_net": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~org_golang_x_net",
+              "importpath": "golang.org/x/net",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:zTwKpTd2XuCqf8huc7Fo2iSy+4RHPd10s4KzeTnVr1c=",
+              "replace": "",
+              "version": "v0.19.0"
+            }
+          },
+          "com_github_spf13_pflag": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_spf13_pflag",
+              "importpath": "github.com/spf13/pflag",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=",
+              "replace": "",
+              "version": "v1.0.5"
+            }
+          },
+          "com_github_protonmail_go_crypto": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_protonmail_go_crypto",
+              "importpath": "github.com/ProtonMail/go-crypto",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:LRuvITjQWX+WIfr930YHG2HNfjR1uOfyf5vE0kC2U78=",
+              "replace": "",
+              "version": "v1.0.0"
+            }
+          },
+          "com_github_muesli_mango_cobra": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_muesli_mango_cobra",
+              "importpath": "github.com/muesli/mango-cobra",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:DQvjzAM0PMZr85Iv9LIMaYISpTOliMEg+uMFtNbYvWg=",
+              "replace": "",
+              "version": "v1.2.0"
+            }
+          },
+          "com_github_invopop_jsonschema": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_invopop_jsonschema",
+              "importpath": "github.com/invopop/jsonschema",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:6ovsNSuvn9wEQVOyc72aycBMVQFKz7cPdMJn10CvzRI=",
+              "replace": "",
+              "version": "v0.12.0"
+            }
+          },
+          "com_github_masterminds_goutils": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_masterminds_goutils",
+              "importpath": "github.com/Masterminds/goutils",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:5nUrii3FMTL5diU80unEVvNevw1nH4+ZV4DSLVJLSYI=",
+              "replace": "",
+              "version": "v1.1.1"
+            }
+          },
+          "com_github_protonmail_gopenpgp_v2": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_protonmail_gopenpgp_v2",
+              "importpath": "github.com/ProtonMail/gopenpgp/v2",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:Awsg7MPc2gD3I7IFac2qE3Gdls0lZW8SzrFZ3k1oz0s=",
+              "replace": "",
+              "version": "v2.7.1"
+            }
+          },
+          "com_github_microsoft_go_winio": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_microsoft_go_winio",
+              "importpath": "github.com/Microsoft/go-winio",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:9/kr64B9VUZrLm5YYwbGtUJnMgqWVOdUAXu6Migciow=",
+              "replace": "",
+              "version": "v0.6.1"
+            }
+          },
+          "com_github_golang_mock": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_golang_mock",
+              "importpath": "github.com/golang/mock",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:YojYx61/OLFsiv6Rw1Z96LpldJIy31o+UHmwAUMJ6/U=",
+              "replace": "",
+              "version": "v1.7.0-rc.1"
+            }
+          },
+          "org_golang_x_sync": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~org_golang_x_sync",
+              "importpath": "golang.org/x/sync",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:60k92dhOjHxJkrqnwsfl8KuaHbn/5dl0lUPUklKo3qE=",
+              "replace": "",
+              "version": "v0.5.0"
+            }
+          },
+          "com_gitlab_digitalxero_go_conventional_commit": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_gitlab_digitalxero_go_conventional_commit",
+              "importpath": "gitlab.com/digitalxero/go-conventional-commit",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:8/dO6WWG+98PMhlZowt/YjuiKhqhGlOCwlIV8SqqGh8=",
+              "replace": "",
+              "version": "v1.0.7"
+            }
+          },
+          "com_github_imdario_mergo": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_imdario_mergo",
+              "importpath": "github.com/imdario/mergo",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:wwQJbIsHYGMUyLSPrEq1CT16AhnhNJQ51+4fdHUnCl4=",
+              "replace": "",
+              "version": "v0.3.16"
+            }
+          },
+          "com_github_caarlos0_go_version": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_caarlos0_go_version",
+              "importpath": "github.com/caarlos0/go-version",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:1bikKHkGGVIIxqCmufhSSs3hpBScgHGacrvsi8FuIfc=",
+              "replace": "",
+              "version": "v0.1.1"
+            }
+          },
+          "org_golang_google_protobuf": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~org_golang_google_protobuf",
+              "importpath": "google.golang.org/protobuf",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:g0LDEJHgrBl9N9r17Ru3sqWhkIx2NB67okBHPwC7hs8=",
+              "replace": "",
+              "version": "v1.31.0"
+            }
+          },
+          "com_github_emirpasic_gods": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_emirpasic_gods",
+              "importpath": "github.com/emirpasic/gods",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:FXtiHYKDGKCW2KzwZKx0iC0PQmdlorYgdFG9jPXJ1Bc=",
+              "replace": "",
+              "version": "v1.18.1"
+            }
+          },
+          "com_github_muesli_mango": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_muesli_mango",
+              "importpath": "github.com/muesli/mango",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:DZQK45d2gGbql1arsYA4vfg4d7I9Hfx5rX/GCmzsAvI=",
+              "replace": "",
+              "version": "v0.1.0"
+            }
+          },
+          "org_golang_x_mod": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~org_golang_x_mod",
+              "importpath": "golang.org/x/mod",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:dGoOF9QVLYng8IHTm7BAyWqCqSheQ5pYWGhzW00YJr0=",
+              "replace": "",
+              "version": "v0.14.0"
+            }
+          },
+          "com_github_bwesterb_go_ristretto": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_bwesterb_go_ristretto",
+              "importpath": "github.com/bwesterb/go-ristretto",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:1w53tCkGhCQ5djbat3+MH0BAQ5Kfgbt56UZQ/JMzngw=",
+              "replace": "",
+              "version": "v1.2.3"
+            }
+          },
+          "in_gopkg_yaml_v3": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~in_gopkg_yaml_v3",
+              "importpath": "gopkg.in/yaml.v3",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=",
+              "replace": "",
+              "version": "v3.0.1"
+            }
+          },
+          "org_golang_x_crypto": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~org_golang_x_crypto",
+              "importpath": "golang.org/x/crypto",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:r8bRNjWL3GshPW3gkd+RpvzWrZAwPS49OmTGZ/uhM4k=",
+              "replace": "",
+              "version": "v0.17.0"
+            }
+          },
+          "com_github_skeema_knownhosts": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_skeema_knownhosts",
+              "importpath": "github.com/skeema/knownhosts",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:SHWdIUa82uGZz+F+47k8SY4QhhI291cXCpopT1lK2AQ=",
+              "replace": "",
+              "version": "v1.2.1"
+            }
+          },
+          "com_github_masterminds_semver_v3": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_masterminds_semver_v3",
+              "importpath": "github.com/Masterminds/semver/v3",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:RN9w6+7QoMeJVGyfmbcgs28Br8cvmnucEXnY0rYXWg0=",
+              "replace": "",
+              "version": "v3.2.1"
+            }
+          },
+          "com_github_golang_protobuf": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_golang_protobuf",
+              "importpath": "github.com/golang/protobuf",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:KhyjKVUg7Usr/dYsdSqoFveMYd5ko72D+zANwlG1mmg=",
+              "replace": "",
+              "version": "v1.5.3"
+            }
+          },
+          "com_github_buger_jsonparser": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_buger_jsonparser",
+              "importpath": "github.com/buger/jsonparser",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:2PnMjfWD7wBILjqQbt530v576A/cAbQvEW9gGIpYMUs=",
+              "replace": "",
+              "version": "v1.1.1"
+            }
+          },
+          "com_github_inconshreveable_mousetrap": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_inconshreveable_mousetrap",
+              "importpath": "github.com/inconshreveable/mousetrap",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:wN+x4NVGpMsO7ErUn/mUI3vEoE6Jt13X2s0bqwp9tc8=",
+              "replace": "",
+              "version": "v1.1.0"
+            }
+          },
+          "com_github_klauspost_compress": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_klauspost_compress",
+              "importpath": "github.com/klauspost/compress",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:d4vBd+7CHydUqpFBgUEKkSdtSugf9YFmSkvUYPquI5E=",
+              "replace": "",
+              "version": "v1.17.5"
+            }
+          },
+          "com_github_blakesmith_ar": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_blakesmith_ar",
+              "importpath": "github.com/blakesmith/ar",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:m935MPodAbYS46DG4pJSv7WO+VECIWUQ7OJYSoTrMh4=",
+              "replace": "",
+              "version": "v0.0.0-20190502131153-809d4375e1fb"
+            }
+          },
+          "com_github_caarlos0_go_rpmutils": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_caarlos0_go_rpmutils",
+              "importpath": "github.com/caarlos0/go-rpmutils",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:5TPRjT2njvPKzXUcrcg6Dt+JPzQF+M5K7xb5V1Nwteg=",
+              "replace": "",
+              "version": "v0.2.1-0.20240105125627-01185134a559"
+            }
+          },
+          "com_github_huandu_xstrings": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_huandu_xstrings",
+              "importpath": "github.com/huandu/xstrings",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:/Gcsuc1x8JVbJ9/rlye4xZnVAbEkGauT8lbebqcQws4=",
+              "replace": "",
+              "version": "v1.3.3"
+            }
+          },
+          "com_github_cyphar_filepath_securejoin": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_cyphar_filepath_securejoin",
+              "importpath": "github.com/cyphar/filepath-securejoin",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:Ugdm7cg7i6ZK6x3xDF1oEu1nfkyfH53EtKeQYTC3kyg=",
+              "replace": "",
+              "version": "v0.2.4"
+            }
+          },
+          "org_golang_google_grpc_cmd_protoc_gen_go_grpc": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~org_golang_google_grpc_cmd_protoc_gen_go_grpc",
+              "importpath": "google.golang.org/grpc/cmd/protoc-gen-go-grpc",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:rNBFJjBCOgVr9pWD7rs/knKL4FRTKgpZmsRfV214zcA=",
+              "replace": "",
+              "version": "v1.3.0"
+            }
+          },
+          "com_github_muesli_roff": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_muesli_roff",
+              "importpath": "github.com/muesli/roff",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:YD0lalCotmYuF5HhZliKWlIx7IEhiXeSfq7hNjFqGF8=",
+              "replace": "",
+              "version": "v0.1.0"
+            }
+          },
+          "com_github_pmezard_go_difflib": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_pmezard_go_difflib",
+              "importpath": "github.com/pmezard/go-difflib",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=",
+              "replace": "",
+              "version": "v1.0.0"
+            }
+          },
+          "com_github_bmatcuk_doublestar_v4": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_bmatcuk_doublestar_v4",
+              "importpath": "github.com/bmatcuk/doublestar/v4",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:FH9SifrbvJhnlQpztAx++wlkk70QBf0iBWDwNy7PA4I=",
+              "replace": "",
+              "version": "v4.6.1"
+            }
+          },
+          "com_github_goreleaser_chglog": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_goreleaser_chglog",
+              "importpath": "github.com/goreleaser/chglog",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:Sk6BMIpx8+vpAf8KyPit34OgWui8c7nKTMHhYx88jJ4=",
+              "replace": "",
+              "version": "v0.5.0"
+            }
+          },
+          "com_github_ulikunitz_xz": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_ulikunitz_xz",
+              "importpath": "github.com/ulikunitz/xz",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:kpFauv27b6ynzBNT/Xy+1k+fK4WswhN/6PN5WhFAGw8=",
+              "replace": "",
+              "version": "v0.5.11"
+            }
+          },
+          "com_github_davecgh_go_spew": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_davecgh_go_spew",
+              "importpath": "github.com/davecgh/go-spew",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=",
+              "replace": "",
+              "version": "v1.1.1"
+            }
+          },
+          "org_golang_x_tools": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~org_golang_x_tools",
+              "importpath": "golang.org/x/tools",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:GO788SKMRunPIBCXiQyo2AaexLstOrVhuAL5YwsckQM=",
+              "replace": "",
+              "version": "v0.16.0"
+            }
+          },
+          "com_github_bazelbuild_buildtools": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_bazelbuild_buildtools",
+              "importpath": "github.com/bazelbuild/buildtools",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:2Gc2Q6hVR1SJ8bBI9Ybzoggp8u/ED2WkM4MfvEIn9+c=",
+              "replace": "",
+              "version": "v0.0.0-20231115204819-d4c9dccdfbb1"
+            }
+          },
+          "org_golang_google_genproto": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~org_golang_google_genproto",
+              "importpath": "google.golang.org/genproto",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:+kGHl1aib/qcwaRi1CbqBZ1rk19r85MNUf8HaBghugY=",
+              "replace": "",
+              "version": "v0.0.0-20200526211855-cb27e3aa2013"
+            }
+          },
+          "com_github_kevinburke_ssh_config": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_kevinburke_ssh_config",
+              "importpath": "github.com/kevinburke/ssh_config",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:x584FjTGwHzMwvHx18PXxbBVzfnxogHaAReU4gf13a4=",
+              "replace": "",
+              "version": "v1.2.0"
+            }
+          },
+          "com_github_gogo_protobuf": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_gogo_protobuf",
+              "importpath": "github.com/gogo/protobuf",
+              "build_directives": [
+                "gazelle:proto disable"
+              ],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q=",
+              "replace": "",
+              "version": "v1.3.2"
+            }
+          },
+          "com_github_stretchr_testify": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_stretchr_testify",
+              "importpath": "github.com/stretchr/testify",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:CcVxjf3Q8PM0mHUKJCdn+eZZtm5yQwehR5yeSVQQcUk=",
+              "replace": "",
+              "version": "v1.8.4"
+            }
+          },
+          "com_github_shopspring_decimal": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_shopspring_decimal",
+              "importpath": "github.com/shopspring/decimal",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:abSATXmQEYyShuxI4/vyW3tV1MrKAJzCZ/0zLUXYbsQ=",
+              "replace": "",
+              "version": "v1.2.0"
+            }
+          },
+          "com_github_protonmail_go_mime": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_protonmail_go_mime",
+              "importpath": "github.com/ProtonMail/go-mime",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:tCbYj7/299ekTTXpdwKYF8eBlsYsDVoggDAuAjoK66k=",
+              "replace": "",
+              "version": "v0.0.0-20230322103455-7d82a3887f2f"
+            }
+          },
+          "com_github_pkg_errors": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_pkg_errors",
+              "importpath": "github.com/pkg/errors",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=",
+              "replace": "",
+              "version": "v0.9.1"
+            }
+          },
+          "com_github_go_git_go_git_v5": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_go_git_go_git_v5",
+              "importpath": "github.com/go-git/go-git/v5",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:XIZc1p+8YzypNr34itUfSvYJcv+eYdTnTvOZ2vD3cA4=",
+              "replace": "",
+              "version": "v5.11.0"
+            }
+          },
+          "cat_dario_mergo": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~cat_dario_mergo",
+              "importpath": "dario.cat/mergo",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:AGCNq9Evsj31mOgNPcLyXc+4PNABt905YmuqPYYpBWk=",
+              "replace": "",
+              "version": "v1.0.0"
+            }
+          },
+          "com_github_go_git_go_billy_v5": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_go_git_go_billy_v5",
+              "importpath": "github.com/go-git/go-billy/v5",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:yEY4yhzCDuMGSv83oGxiBotRzhwhNr8VZyphhiu+mTU=",
+              "replace": "",
+              "version": "v5.5.0"
+            }
+          },
+          "com_github_jbenet_go_context": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_jbenet_go_context",
+              "importpath": "github.com/jbenet/go-context",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:BQSFePA1RWJOlocH6Fxy8MmwDt+yVQYULKfN0RoTN8A=",
+              "replace": "",
+              "version": "v0.0.0-20150711004518-d14ea06fba99"
+            }
+          },
+          "org_golang_google_grpc": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~org_golang_google_grpc",
+              "importpath": "google.golang.org/grpc",
+              "build_directives": [
+                "gazelle:proto disable"
+              ],
+              "build_file_generation": "on",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:pnP7OclFFFgFi4VHQDQDaoXUVauOFyktqTsqqgzFKbc=",
+              "replace": "",
+              "version": "v1.40.1"
+            }
+          },
+          "com_github_klauspost_pgzip": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_klauspost_pgzip",
+              "importpath": "github.com/klauspost/pgzip",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:8RXeL5crjEUFnR2/Sn6GJNWtSQ3Dk8pq4CL3jvdDyjU=",
+              "replace": "",
+              "version": "v1.2.6"
+            }
+          },
+          "com_github_aleksi_pointer": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_aleksi_pointer",
+              "importpath": "github.com/AlekSi/pointer",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:glcy/gc4h8HnG2Z3ZECSzZ1IX1x2JxRVuDzaJwQE0+w=",
+              "replace": "",
+              "version": "v1.2.0"
+            }
+          },
+          "com_github_pjbgf_sha1cd": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_pjbgf_sha1cd",
+              "importpath": "github.com/pjbgf/sha1cd",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:4D5XXmUUBUl/xQ6IjCkEAbqXskkq/4O7LmGn0AqMDs4=",
+              "replace": "",
+              "version": "v0.3.0"
+            }
+          },
+          "com_github_go_git_gcfg": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_go_git_gcfg",
+              "importpath": "github.com/go-git/gcfg",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:+zs/tPmkDkHx3U66DAb0lQFJrpS6731Oaa12ikc+DiI=",
+              "replace": "",
+              "version": "v1.5.1-0.20230307220236-3a3c6141e376"
+            }
+          },
+          "com_github_google_go_cmp": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_google_go_cmp",
+              "importpath": "github.com/google/go-cmp",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=",
+              "replace": "",
+              "version": "v0.6.0"
+            }
+          },
+          "com_github_cavaliergopher_cpio": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_cavaliergopher_cpio",
+              "importpath": "github.com/cavaliergopher/cpio",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:KQFSeKmZhv0cr+kawA3a0xTQCU4QxXF1vhU7P7av2KM=",
+              "replace": "",
+              "version": "v1.0.1"
+            }
+          },
+          "org_golang_x_text": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~org_golang_x_text",
+              "importpath": "golang.org/x/text",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:ScX5w1eTa3QqT8oi6+ziP7dTV1S2+ALU0bI+0zXKWiQ=",
+              "replace": "",
+              "version": "v0.14.0"
+            }
+          },
+          "in_gopkg_warnings_v0": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~in_gopkg_warnings_v0",
+              "importpath": "gopkg.in/warnings.v0",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:wFXVbFY8DY5/xOe1ECiWdKCzZlxgshcYVNkBHstARME=",
+              "replace": "",
+              "version": "v0.1.2"
+            }
+          },
+          "com_github_cpuguy83_go_md2man_v2": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_cpuguy83_go_md2man_v2",
+              "importpath": "github.com/cpuguy83/go-md2man/v2",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:qMCsGGgs+MAzDFyp9LpAe1Lqy/fY/qCovCm0qnXZOBM=",
+              "replace": "",
+              "version": "v2.0.3"
+            }
+          },
+          "com_github_google_uuid": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_google_uuid",
+              "importpath": "github.com/google/uuid",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:t6JiXgmwXMjEs8VusXIJk2BXHsn+wx8BZdTaoZ5fu7I=",
+              "replace": "",
+              "version": "v1.3.0"
+            }
+          },
+          "com_github_xanzy_ssh_agent": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_xanzy_ssh_agent",
+              "importpath": "github.com/xanzy/ssh-agent",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:+/15pJfg/RsTxqYcX6fHqOXZwwMP+2VyYWJeWM2qQFM=",
+              "replace": "",
+              "version": "v0.3.3"
+            }
+          },
+          "com_github_mailru_easyjson": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_mailru_easyjson",
+              "importpath": "github.com/mailru/easyjson",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:UGYAvKxe3sBsEDzO8ZeWOSlIQfWFlxbzLZe7hwFURr0=",
+              "replace": "",
+              "version": "v0.7.7"
+            }
+          },
+          "com_github_russross_blackfriday_v2": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_russross_blackfriday_v2",
+              "importpath": "github.com/russross/blackfriday/v2",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:JIOH55/0cWyOuilr9/qlrm0BSXldqnqwMsf35Ld67mk=",
+              "replace": "",
+              "version": "v2.1.0"
+            }
+          },
+          "com_github_muesli_mango_pflag": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_muesli_mango_pflag",
+              "importpath": "github.com/muesli/mango-pflag",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:UADqbYgpUyRoBja3g6LUL+3LErjpsOwaC9ywvBWe7Sg=",
+              "replace": "",
+              "version": "v0.1.0"
+            }
+          },
+          "com_github_sergi_go_diff": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_sergi_go_diff",
+              "importpath": "github.com/sergi/go-diff",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:XU+rvMAioB0UC3q1MFrIQy4Vo5/4VsRDQQXHsEya6xQ=",
+              "replace": "",
+              "version": "v1.2.0"
+            }
+          },
+          "com_github_masterminds_sprig_v3": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_masterminds_sprig_v3",
+              "importpath": "github.com/Masterminds/sprig/v3",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:eL2fZNezLomi0uOLqjQoN6BfsDD+fyLtgbJMAj9n6YA=",
+              "replace": "",
+              "version": "v3.2.3"
+            }
+          },
+          "com_github_wk8_go_ordered_map_v2": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_wk8_go_ordered_map_v2",
+              "importpath": "github.com/wk8/go-ordered-map/v2",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:5h/BUHu93oj4gIdvHHHGsScSTMijfx5PeYkE/fJgbpc=",
+              "replace": "",
+              "version": "v2.1.8"
+            }
+          },
+          "bazel_gazelle_go_repository_config": {
+            "bzlFile": "@@gazelle~0.35.0//internal/bzlmod:go_deps.bzl",
+            "ruleClassName": "_go_repository_config",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~bazel_gazelle_go_repository_config",
+              "importpaths": {
+                "cat_dario_mergo": "dario.cat/mergo",
+                "com_github_aleksi_pointer": "github.com/AlekSi/pointer",
+                "com_github_masterminds_semver_v3": "github.com/Masterminds/semver/v3",
+                "com_github_protonmail_go_crypto": "github.com/ProtonMail/go-crypto",
+                "com_github_protonmail_gopenpgp_v2": "github.com/ProtonMail/gopenpgp/v2",
+                "com_github_blakesmith_ar": "github.com/blakesmith/ar",
+                "com_github_caarlos0_go_rpmutils": "github.com/caarlos0/go-rpmutils",
+                "com_github_caarlos0_go_version": "github.com/caarlos0/go-version",
+                "com_github_google_rpmpack": "github.com/google/rpmpack",
+                "com_github_goreleaser_chglog": "github.com/goreleaser/chglog",
+                "com_github_goreleaser_fileglob": "github.com/goreleaser/fileglob",
+                "com_github_invopop_jsonschema": "github.com/invopop/jsonschema",
+                "com_github_klauspost_compress": "github.com/klauspost/compress",
+                "com_github_klauspost_pgzip": "github.com/klauspost/pgzip",
+                "com_github_muesli_mango_cobra": "github.com/muesli/mango-cobra",
+                "com_github_muesli_roff": "github.com/muesli/roff",
+                "com_github_spf13_cobra": "github.com/spf13/cobra",
+                "com_github_stretchr_testify": "github.com/stretchr/testify",
+                "com_github_ulikunitz_xz": "github.com/ulikunitz/xz",
+                "com_github_xi2_xz": "github.com/xi2/xz",
+                "org_golang_x_exp": "golang.org/x/exp",
+                "in_gopkg_yaml_v3": "gopkg.in/yaml.v3",
+                "com_github_masterminds_goutils": "github.com/Masterminds/goutils",
+                "com_github_masterminds_sprig_v3": "github.com/Masterminds/sprig/v3",
+                "com_github_microsoft_go_winio": "github.com/Microsoft/go-winio",
+                "com_github_protonmail_go_mime": "github.com/ProtonMail/go-mime",
+                "com_github_bahlo_generic_list_go": "github.com/bahlo/generic-list-go",
+                "com_github_buger_jsonparser": "github.com/buger/jsonparser",
+                "com_github_cavaliergopher_cpio": "github.com/cavaliergopher/cpio",
+                "@circl~1.3.7": "github.com/cloudflare/circl",
+                "com_github_cpuguy83_go_md2man_v2": "github.com/cpuguy83/go-md2man/v2",
+                "com_github_cyphar_filepath_securejoin": "github.com/cyphar/filepath-securejoin",
+                "com_github_davecgh_go_spew": "github.com/davecgh/go-spew",
+                "com_github_emirpasic_gods": "github.com/emirpasic/gods",
+                "com_github_go_git_gcfg": "github.com/go-git/gcfg",
+                "com_github_go_git_go_billy_v5": "github.com/go-git/go-billy/v5",
+                "com_github_go_git_go_git_v5": "github.com/go-git/go-git/v5",
+                "com_github_gobwas_glob": "github.com/gobwas/glob",
+                "com_github_golang_groupcache": "github.com/golang/groupcache",
+                "com_github_google_uuid": "github.com/google/uuid",
+                "com_github_huandu_xstrings": "github.com/huandu/xstrings",
+                "com_github_imdario_mergo": "github.com/imdario/mergo",
+                "com_github_inconshreveable_mousetrap": "github.com/inconshreveable/mousetrap",
+                "com_github_jbenet_go_context": "github.com/jbenet/go-context",
+                "com_github_kevinburke_ssh_config": "github.com/kevinburke/ssh_config",
+                "com_github_mailru_easyjson": "github.com/mailru/easyjson",
+                "com_github_mitchellh_copystructure": "github.com/mitchellh/copystructure",
+                "com_github_mitchellh_reflectwalk": "github.com/mitchellh/reflectwalk",
+                "com_github_muesli_mango": "github.com/muesli/mango",
+                "com_github_muesli_mango_pflag": "github.com/muesli/mango-pflag",
+                "com_github_pjbgf_sha1cd": "github.com/pjbgf/sha1cd",
+                "com_github_pkg_errors": "github.com/pkg/errors",
+                "com_github_pmezard_go_difflib": "github.com/pmezard/go-difflib",
+                "com_github_russross_blackfriday_v2": "github.com/russross/blackfriday/v2",
+                "com_github_sergi_go_diff": "github.com/sergi/go-diff",
+                "com_github_shopspring_decimal": "github.com/shopspring/decimal",
+                "com_github_skeema_knownhosts": "github.com/skeema/knownhosts",
+                "com_github_spf13_cast": "github.com/spf13/cast",
+                "com_github_spf13_pflag": "github.com/spf13/pflag",
+                "com_github_wk8_go_ordered_map_v2": "github.com/wk8/go-ordered-map/v2",
+                "com_github_xanzy_ssh_agent": "github.com/xanzy/ssh-agent",
+                "com_gitlab_digitalxero_go_conventional_commit": "gitlab.com/digitalxero/go-conventional-commit",
+                "org_golang_x_crypto": "golang.org/x/crypto",
+                "org_golang_x_mod": "golang.org/x/mod",
+                "org_golang_x_net": "golang.org/x/net",
+                "org_golang_x_sys": "golang.org/x/sys",
+                "org_golang_x_text": "golang.org/x/text",
+                "org_golang_x_tools": "golang.org/x/tools",
+                "in_gopkg_warnings_v0": "gopkg.in/warnings.v0",
+                "com_github_gogo_protobuf": "github.com/gogo/protobuf",
+                "com_github_golang_mock": "github.com/golang/mock",
+                "com_github_golang_protobuf": "github.com/golang/protobuf",
+                "org_golang_google_genproto": "google.golang.org/genproto",
+                "org_golang_google_grpc": "google.golang.org/grpc",
+                "org_golang_google_grpc_cmd_protoc_gen_go_grpc": "google.golang.org/grpc/cmd/protoc-gen-go-grpc",
+                "org_golang_google_protobuf": "google.golang.org/protobuf",
+                "com_github_bazelbuild_buildtools": "github.com/bazelbuild/buildtools",
+                "com_github_bmatcuk_doublestar_v4": "github.com/bmatcuk/doublestar/v4",
+                "com_github_fsnotify_fsnotify": "github.com/fsnotify/fsnotify",
+                "com_github_google_go_cmp": "github.com/google/go-cmp",
+                "org_golang_x_sync": "golang.org/x/sync",
+                "org_golang_x_tools_go_vcs": "golang.org/x/tools/go/vcs",
+                "com_github_bwesterb_go_ristretto": "github.com/bwesterb/go-ristretto",
+                "@rules_go~0.45.1": "github.com/bazelbuild/rules_go",
+                "@gazelle~0.35.0": "github.com/bazelbuild/bazel-gazelle"
+              },
+              "module_names": {
+                "@rules_go~0.45.1": "rules_go",
+                "@gazelle~0.35.0": "gazelle",
+                "@circl~1.3.7": "circl"
+              },
+              "build_naming_conventions": {}
+            }
+          },
+          "com_github_xi2_xz": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_xi2_xz",
+              "importpath": "github.com/xi2/xz",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:nIPpBwaJSVYIxUFsDv3M8ofmx9yWTog9BfvIu0q41lo=",
+              "replace": "",
+              "version": "v0.0.0-20171230120015-48954b6210f8"
+            }
+          },
+          "com_github_mitchellh_reflectwalk": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_mitchellh_reflectwalk",
+              "importpath": "github.com/mitchellh/reflectwalk",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:G2LzWKi524PWgd3mLHV8Y5k7s6XUvT0Gef6zxSIeXaQ=",
+              "replace": "",
+              "version": "v1.0.2"
+            }
+          },
+          "com_github_goreleaser_fileglob": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_goreleaser_fileglob",
+              "importpath": "github.com/goreleaser/fileglob",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:/X6J7U8lbDpQtBvGcwwPS6OpzkNVlVEsFUVRx9+k+7I=",
+              "replace": "",
+              "version": "v1.3.0"
+            }
+          },
+          "org_golang_x_sys": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~org_golang_x_sys",
+              "importpath": "golang.org/x/sys",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:h48lPFYpsTvQJZF4EKyI4aLHaev3CxivZmv7yZig9pc=",
+              "replace": "",
+              "version": "v0.15.0"
+            }
+          },
+          "com_github_gobwas_glob": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_gobwas_glob",
+              "importpath": "github.com/gobwas/glob",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:A4xDbljILXROh+kObIiy5kIaPYD8e96x1tgBhUI5J+Y=",
+              "replace": "",
+              "version": "v0.2.3"
+            }
+          },
+          "com_github_google_rpmpack": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_google_rpmpack",
+              "importpath": "github.com/google/rpmpack",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:L16KZ3QvkFGpYhmp23iQip+mx1X39foEsqszjMNBm8A=",
+              "replace": "",
+              "version": "v0.5.0"
+            }
+          },
+          "com_github_golang_groupcache": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
+            "ruleClassName": "go_repository",
+            "attributes": {
+              "name": "gazelle~0.35.0~go_deps~com_github_golang_groupcache",
+              "importpath": "github.com/golang/groupcache",
+              "build_directives": [],
+              "build_file_generation": "auto",
+              "build_extra_args": [],
+              "patches": [],
+              "patch_args": [],
+              "sum": "h1:oI5xCqsCo564l8iNU+DwB5epxmsaqB+rhGL0m5jtYqE=",
+              "replace": "",
+              "version": "v0.0.0-20210331224755-41bb18bfe9da"
+            }
+          }
+        },
+        "moduleExtensionMetadata": {
+          "explicitRootModuleDirectDeps": [
+            "cat_dario_mergo",
+            "com_github_aleksi_pointer",
+            "com_github_masterminds_semver_v3",
+            "com_github_protonmail_go_crypto",
+            "com_github_protonmail_gopenpgp_v2",
+            "com_github_blakesmith_ar",
+            "com_github_caarlos0_go_rpmutils",
+            "com_github_caarlos0_go_version",
+            "com_github_google_rpmpack",
+            "com_github_goreleaser_chglog",
+            "com_github_goreleaser_fileglob",
+            "com_github_invopop_jsonschema",
+            "com_github_klauspost_compress",
+            "com_github_klauspost_pgzip",
+            "com_github_muesli_mango_cobra",
+            "com_github_muesli_roff",
+            "com_github_spf13_cobra",
+            "com_github_stretchr_testify",
+            "com_github_ulikunitz_xz",
+            "com_github_xi2_xz",
+            "org_golang_x_exp",
+            "in_gopkg_yaml_v3"
+          ],
+          "explicitRootModuleDirectDevDeps": [],
+          "useAllRepos": "NO"
+        },
+        "recordedRepoMappingEntries": [
+          [
+            "gazelle~0.35.0",
+            "bazel_tools",
+            "bazel_tools"
+          ]
+        ]
+      }
+    },
+    "@@gazelle~0.35.0//internal/bzlmod:non_module_deps.bzl%non_module_deps": {
+      "general": {
+        "bzlTransitiveDigest": "xNdST0Ab6CHJP2h2BsR70cR4mizNZN38jXc/Y2vtlzo=",
+        "accumulatedFileDigests": {},
+        "envVariables": {},
+        "generatedRepoSpecs": {
+          "bazel_gazelle_is_bazel_module": {
+            "bzlFile": "@@gazelle~0.35.0//internal:is_bazel_module.bzl",
+            "ruleClassName": "is_bazel_module",
+            "attributes": {
+              "name": "gazelle~0.35.0~non_module_deps~bazel_gazelle_is_bazel_module",
+              "is_bazel_module": true
+            }
+          },
+          "bazel_gazelle_go_repository_tools": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository_tools.bzl",
+            "ruleClassName": "go_repository_tools",
+            "attributes": {
+              "name": "gazelle~0.35.0~non_module_deps~bazel_gazelle_go_repository_tools",
+              "go_cache": "@@gazelle~0.35.0~non_module_deps~bazel_gazelle_go_repository_cache//:go.env"
+            }
+          },
+          "bazel_gazelle_go_repository_cache": {
+            "bzlFile": "@@gazelle~0.35.0//internal:go_repository_cache.bzl",
+            "ruleClassName": "go_repository_cache",
+            "attributes": {
+              "name": "gazelle~0.35.0~non_module_deps~bazel_gazelle_go_repository_cache",
+              "go_sdk_name": "@rules_go~0.45.1~go_sdk~go_default_sdk",
+              "go_env": {}
+            }
+          }
+        },
+        "recordedRepoMappingEntries": [
+          [
+            "gazelle~0.35.0",
+            "bazel_gazelle_go_repository_cache",
+            "gazelle~0.35.0~non_module_deps~bazel_gazelle_go_repository_cache"
+          ],
+          [
+            "gazelle~0.35.0",
+            "go_host_compatible_sdk_label",
+            "rules_go~0.45.1~go_sdk~go_host_compatible_sdk_label"
+          ],
+          [
+            "rules_go~0.45.1~go_sdk~go_host_compatible_sdk_label",
+            "go_default_sdk",
+            "rules_go~0.45.1~go_sdk~go_default_sdk"
+          ]
+        ]
+      }
+    },
+    "@@rules_go~0.45.1//go:extensions.bzl%go_sdk": {
+      "os:linux,arch:amd64": {
+        "bzlTransitiveDigest": "L/cPIUW4/FOkbv0dYG0SLtG2DITT4s3n5k8ebIjZ8VI=",
+        "accumulatedFileDigests": {},
+        "envVariables": {},
+        "generatedRepoSpecs": {
+          "io_bazel_rules_nogo": {
+            "bzlFile": "@@rules_go~0.45.1//go/private:nogo.bzl",
+            "ruleClassName": "go_register_nogo",
+            "attributes": {
+              "name": "rules_go~0.45.1~go_sdk~io_bazel_rules_nogo",
+              "nogo": "@io_bazel_rules_go//:default_nogo",
+              "includes": [
+                "'@@//:__subpackages__'"
+              ],
+              "excludes": []
+            }
+          },
+          "rules_go__download_0_windows_arm64": {
+            "bzlFile": "@@rules_go~0.45.1//go/private:sdk.bzl",
+            "ruleClassName": "go_download_sdk_rule",
+            "attributes": {
+              "name": "rules_go~0.45.1~go_sdk~rules_go__download_0_windows_arm64",
+              "goos": "",
+              "goarch": "",
+              "sdks": {},
+              "urls": [
+                "https://dl.google.com/go/{}"
+              ],
+              "version": "1.21.1"
+            }
+          },
+          "rules_go__download_0_linux_arm64": {
+            "bzlFile": "@@rules_go~0.45.1//go/private:sdk.bzl",
+            "ruleClassName": "go_download_sdk_rule",
+            "attributes": {
+              "name": "rules_go~0.45.1~go_sdk~rules_go__download_0_linux_arm64",
+              "goos": "",
+              "goarch": "",
+              "sdks": {},
+              "urls": [
+                "https://dl.google.com/go/{}"
+              ],
+              "version": "1.21.1"
+            }
+          },
+          "go_default_sdk": {
+            "bzlFile": "@@rules_go~0.45.1//go/private:sdk.bzl",
+            "ruleClassName": "go_download_sdk_rule",
+            "attributes": {
+              "name": "rules_go~0.45.1~go_sdk~go_default_sdk",
+              "goos": "",
+              "goarch": "",
+              "sdks": {},
+              "experiments": [],
+              "patches": [],
+              "patch_strip": 0,
+              "urls": [
+                "https://dl.google.com/go/{}"
+              ],
+              "version": "1.21.1",
+              "strip_prefix": "go"
+            }
+          },
+          "rules_go__download_0_darwin_arm64": {
+            "bzlFile": "@@rules_go~0.45.1//go/private:sdk.bzl",
+            "ruleClassName": "go_download_sdk_rule",
+            "attributes": {
+              "name": "rules_go~0.45.1~go_sdk~rules_go__download_0_darwin_arm64",
+              "goos": "",
+              "goarch": "",
+              "sdks": {},
+              "urls": [
+                "https://dl.google.com/go/{}"
+              ],
+              "version": "1.21.1"
+            }
+          },
+          "go_host_compatible_sdk_label": {
+            "bzlFile": "@@rules_go~0.45.1//go/private:extensions.bzl",
+            "ruleClassName": "host_compatible_toolchain",
+            "attributes": {
+              "name": "rules_go~0.45.1~go_sdk~go_host_compatible_sdk_label",
+              "toolchain": "@go_default_sdk//:ROOT"
+            }
+          },
+          "rules_go__download_0_darwin_amd64": {
+            "bzlFile": "@@rules_go~0.45.1//go/private:sdk.bzl",
+            "ruleClassName": "go_download_sdk_rule",
+            "attributes": {
+              "name": "rules_go~0.45.1~go_sdk~rules_go__download_0_darwin_amd64",
+              "goos": "",
+              "goarch": "",
+              "sdks": {},
+              "urls": [
+                "https://dl.google.com/go/{}"
+              ],
+              "version": "1.21.1"
+            }
+          },
+          "go_toolchains": {
+            "bzlFile": "@@rules_go~0.45.1//go/private:sdk.bzl",
+            "ruleClassName": "go_multiple_toolchains",
+            "attributes": {
+              "name": "rules_go~0.45.1~go_sdk~go_toolchains",
+              "prefixes": [
+                "_0000_go_default_sdk_",
+                "_0001_rules_go__download_0_darwin_amd64_",
+                "_0002_rules_go__download_0_darwin_arm64_",
+                "_0003_rules_go__download_0_linux_arm64_",
+                "_0004_rules_go__download_0_windows_amd64_",
+                "_0005_rules_go__download_0_windows_arm64_"
+              ],
+              "geese": [
+                "",
+                "darwin",
+                "darwin",
+                "linux",
+                "windows",
+                "windows"
+              ],
+              "goarchs": [
+                "",
+                "amd64",
+                "arm64",
+                "arm64",
+                "amd64",
+                "arm64"
+              ],
+              "sdk_repos": [
+                "go_default_sdk",
+                "rules_go__download_0_darwin_amd64",
+                "rules_go__download_0_darwin_arm64",
+                "rules_go__download_0_linux_arm64",
+                "rules_go__download_0_windows_amd64",
+                "rules_go__download_0_windows_arm64"
+              ],
+              "sdk_types": [
+                "remote",
+                "remote",
+                "remote",
+                "remote",
+                "remote",
+                "remote"
+              ],
+              "sdk_versions": [
+                "1.21.1",
+                "1.21.1",
+                "1.21.1",
+                "1.21.1",
+                "1.21.1",
+                "1.21.1"
+              ]
+            }
+          },
+          "rules_go__download_0_windows_amd64": {
+            "bzlFile": "@@rules_go~0.45.1//go/private:sdk.bzl",
+            "ruleClassName": "go_download_sdk_rule",
+            "attributes": {
+              "name": "rules_go~0.45.1~go_sdk~rules_go__download_0_windows_amd64",
+              "goos": "",
+              "goarch": "",
+              "sdks": {},
+              "urls": [
+                "https://dl.google.com/go/{}"
+              ],
+              "version": "1.21.1"
+            }
+          }
+        },
+        "recordedRepoMappingEntries": [
+          [
+            "bazel_features~1.1.1",
+            "bazel_features_globals",
+            "bazel_features~1.1.1~version_extension~bazel_features_globals"
+          ],
+          [
+            "bazel_features~1.1.1",
+            "bazel_features_version",
+            "bazel_features~1.1.1~version_extension~bazel_features_version"
+          ],
+          [
+            "rules_go~0.45.1",
+            "bazel_tools",
+            "bazel_tools"
+          ],
+          [
+            "rules_go~0.45.1",
+            "io_bazel_rules_go",
+            "rules_go~0.45.1"
+          ],
+          [
+            "rules_go~0.45.1",
+            "io_bazel_rules_go_bazel_features",
+            "bazel_features~1.1.1"
+          ]
+        ]
+      }
+    },
+    "@@rules_java~7.1.0//java:extensions.bzl%toolchains": {
+      "general": {
+        "bzlTransitiveDigest": "D02GmifxnV/IhYgspsJMDZ/aE8HxAjXgek5gi6FSto4=",
+        "accumulatedFileDigests": {},
+        "envVariables": {},
+        "generatedRepoSpecs": {
+          "remotejdk21_linux_toolchain_config_repo": {
+            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
+            "ruleClassName": "_toolchain_config",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk21_linux_toolchain_config_repo",
+              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_21\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"21\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_linux//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_linux//:jdk\",\n)\n"
+            }
+          },
+          "remotejdk17_linux_s390x_toolchain_config_repo": {
+            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
+            "ruleClassName": "_toolchain_config",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux_s390x_toolchain_config_repo",
+              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:s390x\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux_s390x//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:s390x\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux_s390x//:jdk\",\n)\n"
+            }
+          },
+          "remotejdk17_macos_toolchain_config_repo": {
+            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
+            "ruleClassName": "_toolchain_config",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk17_macos_toolchain_config_repo",
+              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_macos//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_macos//:jdk\",\n)\n"
+            }
+          },
+          "remotejdk21_macos_aarch64_toolchain_config_repo": {
+            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
+            "ruleClassName": "_toolchain_config",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk21_macos_aarch64_toolchain_config_repo",
+              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_21\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"21\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_macos_aarch64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_macos_aarch64//:jdk\",\n)\n"
+            }
+          },
+          "remotejdk17_linux_aarch64_toolchain_config_repo": {
+            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
+            "ruleClassName": "_toolchain_config",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux_aarch64_toolchain_config_repo",
+              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux_aarch64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux_aarch64//:jdk\",\n)\n"
+            }
+          },
+          "remotejdk21_macos_aarch64": {
+            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
+            "ruleClassName": "http_archive",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk21_macos_aarch64",
+              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n",
+              "sha256": "2a7a99a3ea263dbd8d32a67d1e6e363ba8b25c645c826f5e167a02bbafaff1fa",
+              "strip_prefix": "zulu21.28.85-ca-jdk21.0.0-macosx_aarch64",
+              "urls": [
+                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-macosx_aarch64.tar.gz",
+                "https://cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-macosx_aarch64.tar.gz"
+              ]
+            }
+          },
+          "remotejdk17_linux_toolchain_config_repo": {
+            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
+            "ruleClassName": "_toolchain_config",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux_toolchain_config_repo",
+              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux//:jdk\",\n)\n"
+            }
+          },
+          "remotejdk17_macos_aarch64": {
+            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
+            "ruleClassName": "http_archive",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk17_macos_aarch64",
+              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
+              "sha256": "314b04568ec0ae9b36ba03c9cbd42adc9e1265f74678923b19297d66eb84dcca",
+              "strip_prefix": "zulu17.44.53-ca-jdk17.0.8.1-macosx_aarch64",
+              "urls": [
+                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-macosx_aarch64.tar.gz",
+                "https://cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-macosx_aarch64.tar.gz"
+              ]
+            }
+          },
+          "remote_java_tools_windows": {
+            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
+            "ruleClassName": "http_archive",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remote_java_tools_windows",
+              "sha256": "c5c70c214a350f12cbf52da8270fa43ba629b795f3dd328028a38f8f0d39c2a1",
+              "urls": [
+                "https://mirror.bazel.build/bazel_java_tools/releases/java/v13.1/java_tools_windows-v13.1.zip",
+                "https://github.com/bazelbuild/java_tools/releases/download/java_v13.1/java_tools_windows-v13.1.zip"
+              ]
+            }
+          },
+          "remotejdk11_win": {
+            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
+            "ruleClassName": "http_archive",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk11_win",
+              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
+              "sha256": "43408193ce2fa0862819495b5ae8541085b95660153f2adcf91a52d3a1710e83",
+              "strip_prefix": "zulu11.66.15-ca-jdk11.0.20-win_x64",
+              "urls": [
+                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-win_x64.zip",
+                "https://cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-win_x64.zip"
+              ]
+            }
+          },
+          "remotejdk11_win_toolchain_config_repo": {
+            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
+            "ruleClassName": "_toolchain_config",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk11_win_toolchain_config_repo",
+              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_win//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_win//:jdk\",\n)\n"
+            }
+          },
+          "remotejdk11_linux_aarch64": {
+            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
+            "ruleClassName": "http_archive",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux_aarch64",
+              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
+              "sha256": "54174439f2b3fddd11f1048c397fe7bb45d4c9d66d452d6889b013d04d21c4de",
+              "strip_prefix": "zulu11.66.15-ca-jdk11.0.20-linux_aarch64",
+              "urls": [
+                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-linux_aarch64.tar.gz",
+                "https://cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-linux_aarch64.tar.gz"
+              ]
+            }
+          },
+          "remotejdk17_linux": {
+            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
+            "ruleClassName": "http_archive",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux",
+              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
+              "sha256": "b9482f2304a1a68a614dfacddcf29569a72f0fac32e6c74f83dc1b9a157b8340",
+              "strip_prefix": "zulu17.44.53-ca-jdk17.0.8.1-linux_x64",
+              "urls": [
+                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-linux_x64.tar.gz",
+                "https://cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-linux_x64.tar.gz"
+              ]
+            }
+          },
+          "remotejdk11_linux_s390x_toolchain_config_repo": {
+            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
+            "ruleClassName": "_toolchain_config",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux_s390x_toolchain_config_repo",
+              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:s390x\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux_s390x//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:s390x\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux_s390x//:jdk\",\n)\n"
+            }
+          },
+          "remotejdk11_linux_toolchain_config_repo": {
+            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
+            "ruleClassName": "_toolchain_config",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux_toolchain_config_repo",
+              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux//:jdk\",\n)\n"
+            }
+          },
+          "remotejdk11_macos": {
+            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
+            "ruleClassName": "http_archive",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk11_macos",
+              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
+              "sha256": "bcaab11cfe586fae7583c6d9d311c64384354fb2638eb9a012eca4c3f1a1d9fd",
+              "strip_prefix": "zulu11.66.15-ca-jdk11.0.20-macosx_x64",
+              "urls": [
+                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-macosx_x64.tar.gz",
+                "https://cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-macosx_x64.tar.gz"
+              ]
+            }
+          },
+          "remotejdk11_win_arm64": {
+            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
+            "ruleClassName": "http_archive",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk11_win_arm64",
+              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
+              "sha256": "b8a28e6e767d90acf793ea6f5bed0bb595ba0ba5ebdf8b99f395266161e53ec2",
+              "strip_prefix": "jdk-11.0.13+8",
+              "urls": [
+                "https://mirror.bazel.build/aka.ms/download-jdk/microsoft-jdk-11.0.13.8.1-windows-aarch64.zip"
+              ]
+            }
+          },
+          "remotejdk17_macos": {
+            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
+            "ruleClassName": "http_archive",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk17_macos",
+              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
+              "sha256": "640453e8afe8ffe0fb4dceb4535fb50db9c283c64665eebb0ba68b19e65f4b1f",
+              "strip_prefix": "zulu17.44.53-ca-jdk17.0.8.1-macosx_x64",
+              "urls": [
+                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-macosx_x64.tar.gz",
+                "https://cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-macosx_x64.tar.gz"
+              ]
+            }
+          },
+          "remotejdk21_macos": {
+            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
+            "ruleClassName": "http_archive",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk21_macos",
+              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n",
+              "sha256": "9639b87db586d0c89f7a9892ae47f421e442c64b97baebdff31788fbe23265bd",
+              "strip_prefix": "zulu21.28.85-ca-jdk21.0.0-macosx_x64",
+              "urls": [
+                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-macosx_x64.tar.gz",
+                "https://cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-macosx_x64.tar.gz"
+              ]
+            }
+          },
+          "remotejdk21_macos_toolchain_config_repo": {
+            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
+            "ruleClassName": "_toolchain_config",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk21_macos_toolchain_config_repo",
+              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_21\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"21\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_macos//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_macos//:jdk\",\n)\n"
+            }
+          },
+          "remotejdk17_macos_aarch64_toolchain_config_repo": {
+            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
+            "ruleClassName": "_toolchain_config",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk17_macos_aarch64_toolchain_config_repo",
+              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_macos_aarch64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_macos_aarch64//:jdk\",\n)\n"
+            }
+          },
+          "remotejdk17_win": {
+            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
+            "ruleClassName": "http_archive",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk17_win",
+              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
+              "sha256": "192f2afca57701de6ec496234f7e45d971bf623ff66b8ee4a5c81582054e5637",
+              "strip_prefix": "zulu17.44.53-ca-jdk17.0.8.1-win_x64",
+              "urls": [
+                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-win_x64.zip",
+                "https://cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-win_x64.zip"
+              ]
+            }
+          },
+          "remotejdk11_macos_aarch64_toolchain_config_repo": {
+            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
+            "ruleClassName": "_toolchain_config",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk11_macos_aarch64_toolchain_config_repo",
+              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_macos_aarch64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_macos_aarch64//:jdk\",\n)\n"
+            }
+          },
+          "remotejdk11_linux_ppc64le_toolchain_config_repo": {
+            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
+            "ruleClassName": "_toolchain_config",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux_ppc64le_toolchain_config_repo",
+              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:ppc\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux_ppc64le//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:ppc\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux_ppc64le//:jdk\",\n)\n"
+            }
+          },
+          "remotejdk21_linux": {
+            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
+            "ruleClassName": "http_archive",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk21_linux",
+              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n",
+              "sha256": "0c0eadfbdc47a7ca64aeab51b9c061f71b6e4d25d2d87674512e9b6387e9e3a6",
+              "strip_prefix": "zulu21.28.85-ca-jdk21.0.0-linux_x64",
+              "urls": [
+                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-linux_x64.tar.gz",
+                "https://cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-linux_x64.tar.gz"
+              ]
+            }
+          },
+          "remote_java_tools_linux": {
+            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
+            "ruleClassName": "http_archive",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remote_java_tools_linux",
+              "sha256": "d134da9b04c9023fb6e56a5d4bffccee73f7bc9572ddc4e747778dacccd7a5a7",
+              "urls": [
+                "https://mirror.bazel.build/bazel_java_tools/releases/java/v13.1/java_tools_linux-v13.1.zip",
+                "https://github.com/bazelbuild/java_tools/releases/download/java_v13.1/java_tools_linux-v13.1.zip"
+              ]
+            }
+          },
+          "remotejdk21_win": {
+            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
+            "ruleClassName": "http_archive",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk21_win",
+              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n",
+              "sha256": "e9959d500a0d9a7694ac243baf657761479da132f0f94720cbffd092150bd802",
+              "strip_prefix": "zulu21.28.85-ca-jdk21.0.0-win_x64",
+              "urls": [
+                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-win_x64.zip",
+                "https://cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-win_x64.zip"
+              ]
+            }
+          },
+          "remotejdk21_linux_aarch64": {
+            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
+            "ruleClassName": "http_archive",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk21_linux_aarch64",
+              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n",
+              "sha256": "1fb64b8036c5d463d8ab59af06bf5b6b006811e6012e3b0eb6bccf57f1c55835",
+              "strip_prefix": "zulu21.28.85-ca-jdk21.0.0-linux_aarch64",
+              "urls": [
+                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-linux_aarch64.tar.gz",
+                "https://cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-linux_aarch64.tar.gz"
+              ]
+            }
+          },
+          "remotejdk11_linux_aarch64_toolchain_config_repo": {
+            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
+            "ruleClassName": "_toolchain_config",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux_aarch64_toolchain_config_repo",
+              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux_aarch64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux_aarch64//:jdk\",\n)\n"
+            }
+          },
+          "remotejdk11_linux_s390x": {
+            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
+            "ruleClassName": "http_archive",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux_s390x",
+              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
+              "sha256": "a58fc0361966af0a5d5a31a2d8a208e3c9bb0f54f345596fd80b99ea9a39788b",
+              "strip_prefix": "jdk-11.0.15+10",
+              "urls": [
+                "https://mirror.bazel.build/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.15+10/OpenJDK11U-jdk_s390x_linux_hotspot_11.0.15_10.tar.gz",
+                "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.15+10/OpenJDK11U-jdk_s390x_linux_hotspot_11.0.15_10.tar.gz"
+              ]
+            }
+          },
+          "remotejdk17_linux_aarch64": {
+            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
+            "ruleClassName": "http_archive",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux_aarch64",
+              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
+              "sha256": "6531cef61e416d5a7b691555c8cf2bdff689201b8a001ff45ab6740062b44313",
+              "strip_prefix": "zulu17.44.53-ca-jdk17.0.8.1-linux_aarch64",
+              "urls": [
+                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-linux_aarch64.tar.gz",
+                "https://cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-linux_aarch64.tar.gz"
+              ]
+            }
+          },
+          "remotejdk17_win_arm64_toolchain_config_repo": {
+            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
+            "ruleClassName": "_toolchain_config",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk17_win_arm64_toolchain_config_repo",
+              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:arm64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_win_arm64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:arm64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_win_arm64//:jdk\",\n)\n"
+            }
+          },
+          "remotejdk11_linux": {
+            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
+            "ruleClassName": "http_archive",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux",
+              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
+              "sha256": "a34b404f87a08a61148b38e1416d837189e1df7a040d949e743633daf4695a3c",
+              "strip_prefix": "zulu11.66.15-ca-jdk11.0.20-linux_x64",
+              "urls": [
+                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-linux_x64.tar.gz",
+                "https://cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-linux_x64.tar.gz"
+              ]
+            }
+          },
+          "remotejdk11_macos_toolchain_config_repo": {
+            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
+            "ruleClassName": "_toolchain_config",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk11_macos_toolchain_config_repo",
+              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_macos//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_macos//:jdk\",\n)\n"
+            }
+          },
+          "remotejdk17_linux_ppc64le_toolchain_config_repo": {
+            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
+            "ruleClassName": "_toolchain_config",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux_ppc64le_toolchain_config_repo",
+              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:ppc\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux_ppc64le//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:ppc\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux_ppc64le//:jdk\",\n)\n"
+            }
+          },
+          "remotejdk17_win_arm64": {
+            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
+            "ruleClassName": "http_archive",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk17_win_arm64",
+              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
+              "sha256": "6802c99eae0d788e21f52d03cab2e2b3bf42bc334ca03cbf19f71eb70ee19f85",
+              "strip_prefix": "zulu17.44.53-ca-jdk17.0.8.1-win_aarch64",
+              "urls": [
+                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-win_aarch64.zip",
+                "https://cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-win_aarch64.zip"
+              ]
+            }
+          },
+          "remote_java_tools_darwin_arm64": {
+            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
+            "ruleClassName": "http_archive",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remote_java_tools_darwin_arm64",
+              "sha256": "dab5bb87ec43e980faea6e1cec14bafb217b8e2f5346f53aa784fd715929a930",
+              "urls": [
+                "https://mirror.bazel.build/bazel_java_tools/releases/java/v13.1/java_tools_darwin_arm64-v13.1.zip",
+                "https://github.com/bazelbuild/java_tools/releases/download/java_v13.1/java_tools_darwin_arm64-v13.1.zip"
+              ]
+            }
+          },
+          "remotejdk17_linux_ppc64le": {
+            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
+            "ruleClassName": "http_archive",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux_ppc64le",
+              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
+              "sha256": "00a4c07603d0218cd678461b5b3b7e25b3253102da4022d31fc35907f21a2efd",
+              "strip_prefix": "jdk-17.0.8.1+1",
+              "urls": [
+                "https://mirror.bazel.build/github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.8.1%2B1/OpenJDK17U-jdk_ppc64le_linux_hotspot_17.0.8.1_1.tar.gz",
+                "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.8.1%2B1/OpenJDK17U-jdk_ppc64le_linux_hotspot_17.0.8.1_1.tar.gz"
+              ]
+            }
+          },
+          "remotejdk21_linux_aarch64_toolchain_config_repo": {
+            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
+            "ruleClassName": "_toolchain_config",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk21_linux_aarch64_toolchain_config_repo",
+              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_21\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"21\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_linux_aarch64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_linux_aarch64//:jdk\",\n)\n"
+            }
+          },
+          "remotejdk11_win_arm64_toolchain_config_repo": {
+            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
+            "ruleClassName": "_toolchain_config",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk11_win_arm64_toolchain_config_repo",
+              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:arm64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_win_arm64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:arm64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_win_arm64//:jdk\",\n)\n"
+            }
+          },
+          "local_jdk": {
+            "bzlFile": "@@rules_java~7.1.0//toolchains:local_java_repository.bzl",
+            "ruleClassName": "_local_java_repository_rule",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~local_jdk",
+              "java_home": "",
+              "version": "",
+              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = {RUNTIME_VERSION},\n)\n"
+            }
+          },
+          "remote_java_tools_darwin_x86_64": {
+            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
+            "ruleClassName": "http_archive",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remote_java_tools_darwin_x86_64",
+              "sha256": "0db40d8505a2b65ef0ed46e4256757807db8162f7acff16225be57c1d5726dbc",
+              "urls": [
+                "https://mirror.bazel.build/bazel_java_tools/releases/java/v13.1/java_tools_darwin_x86_64-v13.1.zip",
+                "https://github.com/bazelbuild/java_tools/releases/download/java_v13.1/java_tools_darwin_x86_64-v13.1.zip"
+              ]
+            }
+          },
+          "remote_java_tools": {
+            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
+            "ruleClassName": "http_archive",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remote_java_tools",
+              "sha256": "286bdbbd66e616fc4ed3f90101418729a73baa7e8c23a98ffbef558f74c0ad14",
+              "urls": [
+                "https://mirror.bazel.build/bazel_java_tools/releases/java/v13.1/java_tools-v13.1.zip",
+                "https://github.com/bazelbuild/java_tools/releases/download/java_v13.1/java_tools-v13.1.zip"
+              ]
+            }
+          },
+          "remotejdk17_linux_s390x": {
+            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
+            "ruleClassName": "http_archive",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux_s390x",
+              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
+              "sha256": "ffacba69c6843d7ca70d572489d6cc7ab7ae52c60f0852cedf4cf0d248b6fc37",
+              "strip_prefix": "jdk-17.0.8.1+1",
+              "urls": [
+                "https://mirror.bazel.build/github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.8.1%2B1/OpenJDK17U-jdk_s390x_linux_hotspot_17.0.8.1_1.tar.gz",
+                "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.8.1%2B1/OpenJDK17U-jdk_s390x_linux_hotspot_17.0.8.1_1.tar.gz"
+              ]
+            }
+          },
+          "remotejdk17_win_toolchain_config_repo": {
+            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
+            "ruleClassName": "_toolchain_config",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk17_win_toolchain_config_repo",
+              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_win//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_win//:jdk\",\n)\n"
+            }
+          },
+          "remotejdk11_linux_ppc64le": {
+            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
+            "ruleClassName": "http_archive",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux_ppc64le",
+              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
+              "sha256": "a8fba686f6eb8ae1d1a9566821dbd5a85a1108b96ad857fdbac5c1e4649fc56f",
+              "strip_prefix": "jdk-11.0.15+10",
+              "urls": [
+                "https://mirror.bazel.build/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.15+10/OpenJDK11U-jdk_ppc64le_linux_hotspot_11.0.15_10.tar.gz",
+                "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.15+10/OpenJDK11U-jdk_ppc64le_linux_hotspot_11.0.15_10.tar.gz"
+              ]
+            }
+          },
+          "remotejdk11_macos_aarch64": {
+            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
+            "ruleClassName": "http_archive",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk11_macos_aarch64",
+              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
+              "sha256": "7632bc29f8a4b7d492b93f3bc75a7b61630894db85d136456035ab2a24d38885",
+              "strip_prefix": "zulu11.66.15-ca-jdk11.0.20-macosx_aarch64",
+              "urls": [
+                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-macosx_aarch64.tar.gz",
+                "https://cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-macosx_aarch64.tar.gz"
+              ]
+            }
+          },
+          "remotejdk21_win_toolchain_config_repo": {
+            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
+            "ruleClassName": "_toolchain_config",
+            "attributes": {
+              "name": "rules_java~7.1.0~toolchains~remotejdk21_win_toolchain_config_repo",
+              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_21\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"21\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_win//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_win//:jdk\",\n)\n"
+            }
+          }
+        },
+        "recordedRepoMappingEntries": [
+          [
+            "rules_java~7.1.0",
+            "bazel_tools",
+            "bazel_tools"
+          ],
+          [
+            "rules_java~7.1.0",
+            "remote_java_tools",
+            "rules_java~7.1.0~toolchains~remote_java_tools"
+          ]
+        ]
+      }
+    }
+  }
+}
diff --git a/WORKSPACE.bzlmod b/WORKSPACE.bzlmod
new file mode 100644
index 0000000..5def4ea
--- /dev/null
+++ b/WORKSPACE.bzlmod
@@ -0,0 +1 @@
+#just empty
\ No newline at end of file
diff --git a/a.patch b/a.patch
new file mode 100644
index 0000000..a7d8746
--- /dev/null
+++ b/a.patch
@@ -0,0 +1,3460 @@
+diff --git a/BUILD.bazel b/BUILD.bazel
+new file mode 100644
+index 0000000..7239e2a
+--- /dev/null
++++ b/BUILD.bazel
+@@ -0,0 +1,27 @@
++load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test", "go_binary")
++
++go_library(
++    name = "nfpm",
++    srcs = ["nfpm.go"],
++    importpath = "github.com/goreleaser/nfpm/v2",
++    visibility = ["//visibility:public"],
++    deps = [
++        "@cat_dario_mergo//:go_default_library",
++        "@com_github_aleksi_pointer//:go_default_library",
++        "@com_github_goreleaser_chglog//:go_default_library",
++        "@com_github_goreleaser_nfpm_v2//files",
++        "@com_github_goreleaser_nfpm_v2//internal/modtime",
++        "@com_github_masterminds_semver_v3//:go_default_library",
++        "@in_gopkg_yaml_v3//:go_default_library",
++    ],
++)
++
++go_test(
++    name = "nfpm_test",
++    srcs = ["nfpm_test.go"],
++    deps = [
++        "@com_github_goreleaser_nfpm_v2//:go_default_library",
++        "@com_github_goreleaser_nfpm_v2//files:go_default_library",
++        "@com_github_stretchr_testify//require:go_default_library",
++    ],
++)
+diff --git a/MODULE.bazel b/MODULE.bazel
+new file mode 100644
+index 0000000..f18beeb
+--- /dev/null
++++ b/MODULE.bazel
+@@ -0,0 +1,31 @@
++module(
++    name = "com_github_goreleaser_nfpm_v2",
++    repo_name = "com_github_goreleaser_nfpm_v2",
++)
++bazel_dep(name = "bazel_skylib", version = "1.4.2")
++bazel_dep(name = "rules_go", version = "0.45.1", repo_name = "io_bazel_rules_go")
++bazel_dep(name = "gazelle", version = "0.35.0", repo_name = "bazel_gazelle")
++go_deps = use_extension("@bazel_gazelle//:extensions.bzl", "go_deps")
++go_deps.from_file(go_mod = "//:go.mod")
++use_repo(
++    go_deps,
++    "in_gopkg_yaml_v3",
++    "com_github_masterminds_semver_v3",
++    "com_github_aleksi_pointer",
++    "cat_dario_mergo",
++    "com_github_goreleaser_chglog",
++    "com_github_goreleaser_fileglob",
++    "com_github_caarlos0_go_version",
++    "com_github_spf13_cobra",
++    "com_github_invopop_jsonschema",
++    "com_github_muesli_mango_cobra",
++    "com_github_muesli_roff",
++    "com_github_klauspost_pgzip",
++    "com_github_ulikunitz_xz",
++    "com_github_google_rpmpack",
++    "com_github_blakesmith_ar",
++    "com_github_klauspost_compress",
++    "com_github_protonmail_go_crypto",
++    "org_golang_x_exp"
++)
++bazel_dep(name = "circl", version = "1.3.7")
+\ No newline at end of file
+diff --git a/MODULE.bazel.lock b/MODULE.bazel.lock
+new file mode 100644
+index 0000000..43e26e1
+--- /dev/null
++++ b/MODULE.bazel.lock
+@@ -0,0 +1,3416 @@
++{
++  "lockFileVersion": 3,
++  "moduleFileHash": "2ce191ff77ea7eb9e494e9083651113c224354380d16c01fd1a695e82ae13ced",
++  "flags": {
++    "cmdRegistries": [
++      "https://bcr.bazel.build/"
++    ],
++    "cmdModuleOverrides": {},
++    "allowedYankedVersions": [],
++    "envVarAllowedYankedVersions": "",
++    "ignoreDevDependency": false,
++    "directDependenciesMode": "WARNING",
++    "compatibilityMode": "ERROR"
++  },
++  "localOverrideHashes": {
++    "bazel_tools": "922ea6752dc9105de5af957f7a99a6933c0a6a712d23df6aad16a9c399f7e787"
++  },
++  "moduleDepGraph": {
++    "<root>": {
++      "name": "com_github_goreleaser_nfpm_v2",
++      "version": "",
++      "key": "<root>",
++      "repoName": "com_github_goreleaser_nfpm_v2",
++      "executionPlatformsToRegister": [],
++      "toolchainsToRegister": [],
++      "extensionUsages": [
++        {
++          "extensionBzlFile": "@bazel_gazelle//:extensions.bzl",
++          "extensionName": "go_deps",
++          "usingModule": "<root>",
++          "location": {
++            "file": "@@//:MODULE.bazel",
++            "line": 8,
++            "column": 24
++          },
++          "imports": {
++            "in_gopkg_yaml_v3": "in_gopkg_yaml_v3",
++            "com_github_masterminds_semver_v3": "com_github_masterminds_semver_v3",
++            "com_github_aleksi_pointer": "com_github_aleksi_pointer",
++            "cat_dario_mergo": "cat_dario_mergo",
++            "com_github_goreleaser_chglog": "com_github_goreleaser_chglog",
++            "com_github_goreleaser_fileglob": "com_github_goreleaser_fileglob",
++            "com_github_caarlos0_go_version": "com_github_caarlos0_go_version",
++            "com_github_spf13_cobra": "com_github_spf13_cobra",
++            "com_github_invopop_jsonschema": "com_github_invopop_jsonschema",
++            "com_github_muesli_mango_cobra": "com_github_muesli_mango_cobra",
++            "com_github_muesli_roff": "com_github_muesli_roff",
++            "com_github_klauspost_pgzip": "com_github_klauspost_pgzip",
++            "com_github_ulikunitz_xz": "com_github_ulikunitz_xz",
++            "com_github_google_rpmpack": "com_github_google_rpmpack",
++            "com_github_blakesmith_ar": "com_github_blakesmith_ar",
++            "com_github_klauspost_compress": "com_github_klauspost_compress",
++            "com_github_protonmail_go_crypto": "com_github_protonmail_go_crypto",
++            "org_golang_x_exp": "org_golang_x_exp"
++          },
++          "devImports": [],
++          "tags": [
++            {
++              "tagName": "from_file",
++              "attributeValues": {
++                "go_mod": "//:go.mod"
++              },
++              "devDependency": false,
++              "location": {
++                "file": "@@//:MODULE.bazel",
++                "line": 9,
++                "column": 18
++              }
++            }
++          ],
++          "hasDevUseExtension": false,
++          "hasNonDevUseExtension": true
++        }
++      ],
++      "deps": {
++        "bazel_skylib": "bazel_skylib@1.5.0",
++        "io_bazel_rules_go": "rules_go@0.45.1",
++        "bazel_gazelle": "gazelle@0.35.0",
++        "circl": "circl@1.3.7",
++        "bazel_tools": "bazel_tools@_",
++        "local_config_platform": "local_config_platform@_"
++      }
++    },
++    "bazel_skylib@1.5.0": {
++      "name": "bazel_skylib",
++      "version": "1.5.0",
++      "key": "bazel_skylib@1.5.0",
++      "repoName": "bazel_skylib",
++      "executionPlatformsToRegister": [],
++      "toolchainsToRegister": [
++        "//toolchains/unittest:cmd_toolchain",
++        "//toolchains/unittest:bash_toolchain"
++      ],
++      "extensionUsages": [],
++      "deps": {
++        "platforms": "platforms@0.0.7",
++        "bazel_tools": "bazel_tools@_",
++        "local_config_platform": "local_config_platform@_"
++      },
++      "repoSpec": {
++        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
++        "ruleClassName": "http_archive",
++        "attributes": {
++          "name": "bazel_skylib~1.5.0",
++          "urls": [
++            "https://github.com/bazelbuild/bazel-skylib/releases/download/1.5.0/bazel-skylib-1.5.0.tar.gz"
++          ],
++          "integrity": "sha256-zVWgYudjuTSZIfD124w5MyiNyLpPdt2UFqrGis7jy5Q=",
++          "strip_prefix": "",
++          "remote_patches": {},
++          "remote_patch_strip": 0
++        }
++      }
++    },
++    "rules_go@0.45.1": {
++      "name": "rules_go",
++      "version": "0.45.1",
++      "key": "rules_go@0.45.1",
++      "repoName": "io_bazel_rules_go",
++      "executionPlatformsToRegister": [],
++      "toolchainsToRegister": [
++        "@go_toolchains//:all"
++      ],
++      "extensionUsages": [
++        {
++          "extensionBzlFile": "@io_bazel_rules_go//go:extensions.bzl",
++          "extensionName": "go_sdk",
++          "usingModule": "rules_go@0.45.1",
++          "location": {
++            "file": "https://bcr.bazel.build/modules/rules_go/0.45.1/MODULE.bazel",
++            "line": 16,
++            "column": 23
++          },
++          "imports": {
++            "go_toolchains": "go_toolchains",
++            "io_bazel_rules_nogo": "io_bazel_rules_nogo"
++          },
++          "devImports": [],
++          "tags": [
++            {
++              "tagName": "download",
++              "attributeValues": {
++                "name": "go_default_sdk",
++                "version": "1.21.1"
++              },
++              "devDependency": false,
++              "location": {
++                "file": "https://bcr.bazel.build/modules/rules_go/0.45.1/MODULE.bazel",
++                "line": 17,
++                "column": 16
++              }
++            }
++          ],
++          "hasDevUseExtension": false,
++          "hasNonDevUseExtension": true
++        },
++        {
++          "extensionBzlFile": "@gazelle//:extensions.bzl",
++          "extensionName": "go_deps",
++          "usingModule": "rules_go@0.45.1",
++          "location": {
++            "file": "https://bcr.bazel.build/modules/rules_go/0.45.1/MODULE.bazel",
++            "line": 32,
++            "column": 24
++          },
++          "imports": {
++            "com_github_gogo_protobuf": "com_github_gogo_protobuf",
++            "com_github_golang_mock": "com_github_golang_mock",
++            "com_github_golang_protobuf": "com_github_golang_protobuf",
++            "org_golang_google_genproto": "org_golang_google_genproto",
++            "org_golang_google_grpc": "org_golang_google_grpc",
++            "org_golang_google_grpc_cmd_protoc_gen_go_grpc": "org_golang_google_grpc_cmd_protoc_gen_go_grpc",
++            "org_golang_google_protobuf": "org_golang_google_protobuf",
++            "org_golang_x_net": "org_golang_x_net",
++            "org_golang_x_tools": "org_golang_x_tools"
++          },
++          "devImports": [],
++          "tags": [
++            {
++              "tagName": "from_file",
++              "attributeValues": {
++                "go_mod": "//:go.mod"
++              },
++              "devDependency": false,
++              "location": {
++                "file": "https://bcr.bazel.build/modules/rules_go/0.45.1/MODULE.bazel",
++                "line": 33,
++                "column": 18
++              }
++            }
++          ],
++          "hasDevUseExtension": false,
++          "hasNonDevUseExtension": true
++        }
++      ],
++      "deps": {
++        "io_bazel_rules_go_bazel_features": "bazel_features@1.1.1",
++        "bazel_skylib": "bazel_skylib@1.5.0",
++        "platforms": "platforms@0.0.7",
++        "rules_proto": "rules_proto@4.0.0",
++        "com_google_protobuf": "protobuf@3.19.6",
++        "gazelle": "gazelle@0.35.0",
++        "bazel_tools": "bazel_tools@_",
++        "local_config_platform": "local_config_platform@_"
++      },
++      "repoSpec": {
++        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
++        "ruleClassName": "http_archive",
++        "attributes": {
++          "name": "rules_go~0.45.1",
++          "urls": [
++            "https://github.com/bazelbuild/rules_go/releases/download/v0.45.1/rules_go-v0.45.1.zip"
++          ],
++          "integrity": "sha256-ZzSnGZk7G6Tr6YBuhThkOVqNOWitJ/nddZwZaz6zq+g=",
++          "strip_prefix": "",
++          "remote_patches": {},
++          "remote_patch_strip": 0
++        }
++      }
++    },
++    "gazelle@0.35.0": {
++      "name": "gazelle",
++      "version": "0.35.0",
++      "key": "gazelle@0.35.0",
++      "repoName": "bazel_gazelle",
++      "executionPlatformsToRegister": [],
++      "toolchainsToRegister": [],
++      "extensionUsages": [
++        {
++          "extensionBzlFile": "@io_bazel_rules_go//go:extensions.bzl",
++          "extensionName": "go_sdk",
++          "usingModule": "gazelle@0.35.0",
++          "location": {
++            "file": "https://bcr.bazel.build/modules/gazelle/0.35.0/MODULE.bazel",
++            "line": 12,
++            "column": 23
++          },
++          "imports": {
++            "go_host_compatible_sdk_label": "go_host_compatible_sdk_label"
++          },
++          "devImports": [],
++          "tags": [],
++          "hasDevUseExtension": false,
++          "hasNonDevUseExtension": true
++        },
++        {
++          "extensionBzlFile": "@bazel_gazelle//internal/bzlmod:non_module_deps.bzl",
++          "extensionName": "non_module_deps",
++          "usingModule": "gazelle@0.35.0",
++          "location": {
++            "file": "https://bcr.bazel.build/modules/gazelle/0.35.0/MODULE.bazel",
++            "line": 20,
++            "column": 32
++          },
++          "imports": {
++            "bazel_gazelle_go_repository_cache": "bazel_gazelle_go_repository_cache",
++            "bazel_gazelle_go_repository_tools": "bazel_gazelle_go_repository_tools",
++            "bazel_gazelle_is_bazel_module": "bazel_gazelle_is_bazel_module"
++          },
++          "devImports": [],
++          "tags": [],
++          "hasDevUseExtension": false,
++          "hasNonDevUseExtension": true
++        },
++        {
++          "extensionBzlFile": "@bazel_gazelle//:extensions.bzl",
++          "extensionName": "go_deps",
++          "usingModule": "gazelle@0.35.0",
++          "location": {
++            "file": "https://bcr.bazel.build/modules/gazelle/0.35.0/MODULE.bazel",
++            "line": 28,
++            "column": 24
++          },
++          "imports": {
++            "com_github_bazelbuild_buildtools": "com_github_bazelbuild_buildtools",
++            "com_github_bmatcuk_doublestar_v4": "com_github_bmatcuk_doublestar_v4",
++            "com_github_fsnotify_fsnotify": "com_github_fsnotify_fsnotify",
++            "com_github_google_go_cmp": "com_github_google_go_cmp",
++            "com_github_pmezard_go_difflib": "com_github_pmezard_go_difflib",
++            "org_golang_x_mod": "org_golang_x_mod",
++            "org_golang_x_sync": "org_golang_x_sync",
++            "org_golang_x_tools": "org_golang_x_tools",
++            "org_golang_x_tools_go_vcs": "org_golang_x_tools_go_vcs",
++            "bazel_gazelle_go_repository_config": "bazel_gazelle_go_repository_config",
++            "com_github_golang_protobuf": "com_github_golang_protobuf",
++            "org_golang_google_protobuf": "org_golang_google_protobuf"
++          },
++          "devImports": [],
++          "tags": [
++            {
++              "tagName": "from_file",
++              "attributeValues": {
++                "go_mod": "//:go.mod"
++              },
++              "devDependency": false,
++              "location": {
++                "file": "https://bcr.bazel.build/modules/gazelle/0.35.0/MODULE.bazel",
++                "line": 29,
++                "column": 18
++              }
++            },
++            {
++              "tagName": "module",
++              "attributeValues": {
++                "path": "golang.org/x/tools",
++                "sum": "h1:zdAyfUGbYmuVokhzVmghFl2ZJh5QhcfebBgmVPFYA+8=",
++                "version": "v0.15.0"
++              },
++              "devDependency": false,
++              "location": {
++                "file": "https://bcr.bazel.build/modules/gazelle/0.35.0/MODULE.bazel",
++                "line": 33,
++                "column": 15
++              }
++            }
++          ],
++          "hasDevUseExtension": false,
++          "hasNonDevUseExtension": true
++        }
++      ],
++      "deps": {
++        "bazel_skylib": "bazel_skylib@1.5.0",
++        "com_google_protobuf": "protobuf@3.19.6",
++        "io_bazel_rules_go": "rules_go@0.45.1",
++        "rules_proto": "rules_proto@4.0.0",
++        "bazel_tools": "bazel_tools@_",
++        "local_config_platform": "local_config_platform@_"
++      },
++      "repoSpec": {
++        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
++        "ruleClassName": "http_archive",
++        "attributes": {
++          "name": "gazelle~0.35.0",
++          "urls": [
++            "https://github.com/bazelbuild/bazel-gazelle/releases/download/v0.35.0/bazel-gazelle-v0.35.0.tar.gz"
++          ],
++          "integrity": "sha256-MpOL2hbmcABjA1R5Bj2dJMYO2o15/Uc5Vj9Q0zHLMgk=",
++          "strip_prefix": "",
++          "remote_patches": {},
++          "remote_patch_strip": 0
++        }
++      }
++    },
++    "circl@1.3.7": {
++      "name": "circl",
++      "version": "1.3.7",
++      "key": "circl@1.3.7",
++      "repoName": "circl",
++      "executionPlatformsToRegister": [],
++      "toolchainsToRegister": [],
++      "extensionUsages": [
++        {
++          "extensionBzlFile": "@gazelle//:extensions.bzl",
++          "extensionName": "go_deps",
++          "usingModule": "circl@1.3.7",
++          "location": {
++            "file": "https://bcr.bazel.build/modules/circl/1.3.7/MODULE.bazel",
++            "line": 9,
++            "column": 24
++          },
++          "imports": {
++            "com_github_bwesterb_go_ristretto": "com_github_bwesterb_go_ristretto",
++            "org_golang_x_crypto": "org_golang_x_crypto",
++            "org_golang_x_sys": "org_golang_x_sys"
++          },
++          "devImports": [],
++          "tags": [
++            {
++              "tagName": "from_file",
++              "attributeValues": {
++                "go_mod": "//:go.mod"
++              },
++              "devDependency": false,
++              "location": {
++                "file": "https://bcr.bazel.build/modules/circl/1.3.7/MODULE.bazel",
++                "line": 10,
++                "column": 18
++              }
++            }
++          ],
++          "hasDevUseExtension": false,
++          "hasNonDevUseExtension": true
++        }
++      ],
++      "deps": {
++        "io_bazel_rules_go": "rules_go@0.45.1",
++        "gazelle": "gazelle@0.35.0",
++        "bazel_tools": "bazel_tools@_",
++        "local_config_platform": "local_config_platform@_"
++      },
++      "repoSpec": {
++        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
++        "ruleClassName": "http_archive",
++        "attributes": {
++          "name": "circl~1.3.7",
++          "urls": [
++            "https://proxy.golang.org/github.com/cloudflare/circl/@v/v1.3.7.zip"
++          ],
++          "integrity": "sha256-RJcJPLdUTTDp1ddBpeYsFPuJicQnHKCpoKA6c1cLO4M=",
++          "strip_prefix": "github.com/cloudflare/circl@v1.3.7",
++          "remote_patches": {
++            "https://bcr.bazel.build/modules/circl/1.3.7/patches/add_module_file.patch": "sha256-oJqWBroozXyWQ2XpjeE9Bc1ovwCE+eFjuuHZp6tke68=",
++            "https://bcr.bazel.build/modules/circl/1.3.7/patches/generate_build_files.patch": "sha256-eeaK8yZzN37I4sMke+y0VZkGs6umdC1NGFNM6oPuMpc=",
++            "https://bcr.bazel.build/modules/circl/1.3.7/patches/modify_build_files.patch": "sha256-tQe2SIRz5t9HN9n5KrWCakNujPWQUcR3AR4uakOBIy8="
++          },
++          "remote_patch_strip": 1
++        }
++      }
++    },
++    "bazel_tools@_": {
++      "name": "bazel_tools",
++      "version": "",
++      "key": "bazel_tools@_",
++      "repoName": "bazel_tools",
++      "executionPlatformsToRegister": [],
++      "toolchainsToRegister": [
++        "@local_config_cc_toolchains//:all",
++        "@local_config_sh//:local_sh_toolchain"
++      ],
++      "extensionUsages": [
++        {
++          "extensionBzlFile": "@bazel_tools//tools/cpp:cc_configure.bzl",
++          "extensionName": "cc_configure_extension",
++          "usingModule": "bazel_tools@_",
++          "location": {
++            "file": "@@bazel_tools//:MODULE.bazel",
++            "line": 17,
++            "column": 29
++          },
++          "imports": {
++            "local_config_cc": "local_config_cc",
++            "local_config_cc_toolchains": "local_config_cc_toolchains"
++          },
++          "devImports": [],
++          "tags": [],
++          "hasDevUseExtension": false,
++          "hasNonDevUseExtension": true
++        },
++        {
++          "extensionBzlFile": "@bazel_tools//tools/osx:xcode_configure.bzl",
++          "extensionName": "xcode_configure_extension",
++          "usingModule": "bazel_tools@_",
++          "location": {
++            "file": "@@bazel_tools//:MODULE.bazel",
++            "line": 21,
++            "column": 32
++          },
++          "imports": {
++            "local_config_xcode": "local_config_xcode"
++          },
++          "devImports": [],
++          "tags": [],
++          "hasDevUseExtension": false,
++          "hasNonDevUseExtension": true
++        },
++        {
++          "extensionBzlFile": "@rules_java//java:extensions.bzl",
++          "extensionName": "toolchains",
++          "usingModule": "bazel_tools@_",
++          "location": {
++            "file": "@@bazel_tools//:MODULE.bazel",
++            "line": 24,
++            "column": 32
++          },
++          "imports": {
++            "local_jdk": "local_jdk",
++            "remote_java_tools": "remote_java_tools",
++            "remote_java_tools_linux": "remote_java_tools_linux",
++            "remote_java_tools_windows": "remote_java_tools_windows",
++            "remote_java_tools_darwin_x86_64": "remote_java_tools_darwin_x86_64",
++            "remote_java_tools_darwin_arm64": "remote_java_tools_darwin_arm64"
++          },
++          "devImports": [],
++          "tags": [],
++          "hasDevUseExtension": false,
++          "hasNonDevUseExtension": true
++        },
++        {
++          "extensionBzlFile": "@bazel_tools//tools/sh:sh_configure.bzl",
++          "extensionName": "sh_configure_extension",
++          "usingModule": "bazel_tools@_",
++          "location": {
++            "file": "@@bazel_tools//:MODULE.bazel",
++            "line": 35,
++            "column": 39
++          },
++          "imports": {
++            "local_config_sh": "local_config_sh"
++          },
++          "devImports": [],
++          "tags": [],
++          "hasDevUseExtension": false,
++          "hasNonDevUseExtension": true
++        },
++        {
++          "extensionBzlFile": "@bazel_tools//tools/test:extensions.bzl",
++          "extensionName": "remote_coverage_tools_extension",
++          "usingModule": "bazel_tools@_",
++          "location": {
++            "file": "@@bazel_tools//:MODULE.bazel",
++            "line": 39,
++            "column": 48
++          },
++          "imports": {
++            "remote_coverage_tools": "remote_coverage_tools"
++          },
++          "devImports": [],
++          "tags": [],
++          "hasDevUseExtension": false,
++          "hasNonDevUseExtension": true
++        },
++        {
++          "extensionBzlFile": "@bazel_tools//tools/android:android_extensions.bzl",
++          "extensionName": "remote_android_tools_extensions",
++          "usingModule": "bazel_tools@_",
++          "location": {
++            "file": "@@bazel_tools//:MODULE.bazel",
++            "line": 42,
++            "column": 42
++          },
++          "imports": {
++            "android_gmaven_r8": "android_gmaven_r8",
++            "android_tools": "android_tools"
++          },
++          "devImports": [],
++          "tags": [],
++          "hasDevUseExtension": false,
++          "hasNonDevUseExtension": true
++        }
++      ],
++      "deps": {
++        "rules_cc": "rules_cc@0.0.9",
++        "rules_java": "rules_java@7.1.0",
++        "rules_license": "rules_license@0.0.7",
++        "rules_proto": "rules_proto@4.0.0",
++        "rules_python": "rules_python@0.4.0",
++        "platforms": "platforms@0.0.7",
++        "com_google_protobuf": "protobuf@3.19.6",
++        "zlib": "zlib@1.3",
++        "build_bazel_apple_support": "apple_support@1.5.0",
++        "local_config_platform": "local_config_platform@_"
++      }
++    },
++    "local_config_platform@_": {
++      "name": "local_config_platform",
++      "version": "",
++      "key": "local_config_platform@_",
++      "repoName": "local_config_platform",
++      "executionPlatformsToRegister": [],
++      "toolchainsToRegister": [],
++      "extensionUsages": [],
++      "deps": {
++        "platforms": "platforms@0.0.7",
++        "bazel_tools": "bazel_tools@_"
++      }
++    },
++    "platforms@0.0.7": {
++      "name": "platforms",
++      "version": "0.0.7",
++      "key": "platforms@0.0.7",
++      "repoName": "platforms",
++      "executionPlatformsToRegister": [],
++      "toolchainsToRegister": [],
++      "extensionUsages": [],
++      "deps": {
++        "rules_license": "rules_license@0.0.7",
++        "bazel_tools": "bazel_tools@_",
++        "local_config_platform": "local_config_platform@_"
++      },
++      "repoSpec": {
++        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
++        "ruleClassName": "http_archive",
++        "attributes": {
++          "name": "platforms",
++          "urls": [
++            "https://github.com/bazelbuild/platforms/releases/download/0.0.7/platforms-0.0.7.tar.gz"
++          ],
++          "integrity": "sha256-OlYcmee9vpFzqmU/1Xn+hJ8djWc5V4CrR3Cx84FDHVE=",
++          "strip_prefix": "",
++          "remote_patches": {},
++          "remote_patch_strip": 0
++        }
++      }
++    },
++    "bazel_features@1.1.1": {
++      "name": "bazel_features",
++      "version": "1.1.1",
++      "key": "bazel_features@1.1.1",
++      "repoName": "bazel_features",
++      "executionPlatformsToRegister": [],
++      "toolchainsToRegister": [],
++      "extensionUsages": [
++        {
++          "extensionBzlFile": "@bazel_features//private:extensions.bzl",
++          "extensionName": "version_extension",
++          "usingModule": "bazel_features@1.1.1",
++          "location": {
++            "file": "https://bcr.bazel.build/modules/bazel_features/1.1.1/MODULE.bazel",
++            "line": 6,
++            "column": 24
++          },
++          "imports": {
++            "bazel_features_globals": "bazel_features_globals",
++            "bazel_features_version": "bazel_features_version"
++          },
++          "devImports": [],
++          "tags": [],
++          "hasDevUseExtension": false,
++          "hasNonDevUseExtension": true
++        }
++      ],
++      "deps": {
++        "bazel_tools": "bazel_tools@_",
++        "local_config_platform": "local_config_platform@_"
++      },
++      "repoSpec": {
++        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
++        "ruleClassName": "http_archive",
++        "attributes": {
++          "name": "bazel_features~1.1.1",
++          "urls": [
++            "https://github.com/bazel-contrib/bazel_features/releases/download/v1.1.1/bazel_features-v1.1.1.tar.gz"
++          ],
++          "integrity": "sha256-YsJuQn5cvHUQJERpJ2IuOYqdzfMsZDJSOIFXCdEcEag=",
++          "strip_prefix": "bazel_features-1.1.1",
++          "remote_patches": {
++            "https://bcr.bazel.build/modules/bazel_features/1.1.1/patches/module_dot_bazel_version.patch": "sha256-+56MAEsc7bYN/Pzhn252ZQUxiRzZg9bynXj1qpsmCYs="
++          },
++          "remote_patch_strip": 1
++        }
++      }
++    },
++    "rules_proto@4.0.0": {
++      "name": "rules_proto",
++      "version": "4.0.0",
++      "key": "rules_proto@4.0.0",
++      "repoName": "rules_proto",
++      "executionPlatformsToRegister": [],
++      "toolchainsToRegister": [],
++      "extensionUsages": [],
++      "deps": {
++        "bazel_skylib": "bazel_skylib@1.5.0",
++        "rules_cc": "rules_cc@0.0.9",
++        "bazel_tools": "bazel_tools@_",
++        "local_config_platform": "local_config_platform@_"
++      },
++      "repoSpec": {
++        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
++        "ruleClassName": "http_archive",
++        "attributes": {
++          "name": "rules_proto~4.0.0",
++          "urls": [
++            "https://github.com/bazelbuild/rules_proto/archive/refs/tags/4.0.0.zip"
++          ],
++          "integrity": "sha256-Lr5z6xyuRA19pNtRYMGjKaynwQpck4H/lwYyVjyhoq4=",
++          "strip_prefix": "rules_proto-4.0.0",
++          "remote_patches": {
++            "https://bcr.bazel.build/modules/rules_proto/4.0.0/patches/module_dot_bazel.patch": "sha256-MclJO7tIAM2ElDAmscNId9pKTpOuDGHgVlW/9VBOIp0="
++          },
++          "remote_patch_strip": 0
++        }
++      }
++    },
++    "protobuf@3.19.6": {
++      "name": "protobuf",
++      "version": "3.19.6",
++      "key": "protobuf@3.19.6",
++      "repoName": "protobuf",
++      "executionPlatformsToRegister": [],
++      "toolchainsToRegister": [],
++      "extensionUsages": [],
++      "deps": {
++        "bazel_skylib": "bazel_skylib@1.5.0",
++        "zlib": "zlib@1.3",
++        "rules_python": "rules_python@0.4.0",
++        "rules_cc": "rules_cc@0.0.9",
++        "rules_proto": "rules_proto@4.0.0",
++        "rules_java": "rules_java@7.1.0",
++        "bazel_tools": "bazel_tools@_",
++        "local_config_platform": "local_config_platform@_"
++      },
++      "repoSpec": {
++        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
++        "ruleClassName": "http_archive",
++        "attributes": {
++          "name": "protobuf~3.19.6",
++          "urls": [
++            "https://github.com/protocolbuffers/protobuf/archive/refs/tags/v3.19.6.zip"
++          ],
++          "integrity": "sha256-OH4sVZuyx8G8N5jE5s/wFTgaebJ1hpavy/johzC0c4k=",
++          "strip_prefix": "protobuf-3.19.6",
++          "remote_patches": {
++            "https://bcr.bazel.build/modules/protobuf/3.19.6/patches/relative_repo_names.patch": "sha256-w/5gw/zGv8NFId+669hcdw1Uus2lxgYpulATHIwIByI=",
++            "https://bcr.bazel.build/modules/protobuf/3.19.6/patches/remove_dependency_on_rules_jvm_external.patch": "sha256-THUTnVgEBmjA0W7fKzIyZOVG58DnW9HQTkr4D2zKUUc=",
++            "https://bcr.bazel.build/modules/protobuf/3.19.6/patches/add_module_dot_bazel_for_examples.patch": "sha256-s/b1gi3baK3LsXefI2rQilhmkb2R5jVJdnT6zEcdfHY=",
++            "https://bcr.bazel.build/modules/protobuf/3.19.6/patches/module_dot_bazel.patch": "sha256-S0DEni8zgx7rHscW3z/rCEubQnYec0XhNet640cw0h4="
++          },
++          "remote_patch_strip": 1
++        }
++      }
++    },
++    "rules_cc@0.0.9": {
++      "name": "rules_cc",
++      "version": "0.0.9",
++      "key": "rules_cc@0.0.9",
++      "repoName": "rules_cc",
++      "executionPlatformsToRegister": [],
++      "toolchainsToRegister": [
++        "@local_config_cc_toolchains//:all"
++      ],
++      "extensionUsages": [
++        {
++          "extensionBzlFile": "@bazel_tools//tools/cpp:cc_configure.bzl",
++          "extensionName": "cc_configure_extension",
++          "usingModule": "rules_cc@0.0.9",
++          "location": {
++            "file": "https://bcr.bazel.build/modules/rules_cc/0.0.9/MODULE.bazel",
++            "line": 9,
++            "column": 29
++          },
++          "imports": {
++            "local_config_cc_toolchains": "local_config_cc_toolchains"
++          },
++          "devImports": [],
++          "tags": [],
++          "hasDevUseExtension": false,
++          "hasNonDevUseExtension": true
++        }
++      ],
++      "deps": {
++        "platforms": "platforms@0.0.7",
++        "bazel_tools": "bazel_tools@_",
++        "local_config_platform": "local_config_platform@_"
++      },
++      "repoSpec": {
++        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
++        "ruleClassName": "http_archive",
++        "attributes": {
++          "name": "rules_cc~0.0.9",
++          "urls": [
++            "https://github.com/bazelbuild/rules_cc/releases/download/0.0.9/rules_cc-0.0.9.tar.gz"
++          ],
++          "integrity": "sha256-IDeHW5pEVtzkp50RKorohbvEqtlo5lh9ym5k86CQDN8=",
++          "strip_prefix": "rules_cc-0.0.9",
++          "remote_patches": {
++            "https://bcr.bazel.build/modules/rules_cc/0.0.9/patches/module_dot_bazel_version.patch": "sha256-mM+qzOI0SgAdaJBlWOSMwMPKpaA9b7R37Hj/tp5bb4g="
++          },
++          "remote_patch_strip": 0
++        }
++      }
++    },
++    "rules_java@7.1.0": {
++      "name": "rules_java",
++      "version": "7.1.0",
++      "key": "rules_java@7.1.0",
++      "repoName": "rules_java",
++      "executionPlatformsToRegister": [],
++      "toolchainsToRegister": [
++        "//toolchains:all",
++        "@local_jdk//:runtime_toolchain_definition",
++        "@local_jdk//:bootstrap_runtime_toolchain_definition",
++        "@remotejdk11_linux_toolchain_config_repo//:all",
++        "@remotejdk11_linux_aarch64_toolchain_config_repo//:all",
++        "@remotejdk11_linux_ppc64le_toolchain_config_repo//:all",
++        "@remotejdk11_linux_s390x_toolchain_config_repo//:all",
++        "@remotejdk11_macos_toolchain_config_repo//:all",
++        "@remotejdk11_macos_aarch64_toolchain_config_repo//:all",
++        "@remotejdk11_win_toolchain_config_repo//:all",
++        "@remotejdk11_win_arm64_toolchain_config_repo//:all",
++        "@remotejdk17_linux_toolchain_config_repo//:all",
++        "@remotejdk17_linux_aarch64_toolchain_config_repo//:all",
++        "@remotejdk17_linux_ppc64le_toolchain_config_repo//:all",
++        "@remotejdk17_linux_s390x_toolchain_config_repo//:all",
++        "@remotejdk17_macos_toolchain_config_repo//:all",
++        "@remotejdk17_macos_aarch64_toolchain_config_repo//:all",
++        "@remotejdk17_win_toolchain_config_repo//:all",
++        "@remotejdk17_win_arm64_toolchain_config_repo//:all",
++        "@remotejdk21_linux_toolchain_config_repo//:all",
++        "@remotejdk21_linux_aarch64_toolchain_config_repo//:all",
++        "@remotejdk21_macos_toolchain_config_repo//:all",
++        "@remotejdk21_macos_aarch64_toolchain_config_repo//:all",
++        "@remotejdk21_win_toolchain_config_repo//:all"
++      ],
++      "extensionUsages": [
++        {
++          "extensionBzlFile": "@rules_java//java:extensions.bzl",
++          "extensionName": "toolchains",
++          "usingModule": "rules_java@7.1.0",
++          "location": {
++            "file": "https://bcr.bazel.build/modules/rules_java/7.1.0/MODULE.bazel",
++            "line": 19,
++            "column": 27
++          },
++          "imports": {
++            "remote_java_tools": "remote_java_tools",
++            "remote_java_tools_linux": "remote_java_tools_linux",
++            "remote_java_tools_windows": "remote_java_tools_windows",
++            "remote_java_tools_darwin_x86_64": "remote_java_tools_darwin_x86_64",
++            "remote_java_tools_darwin_arm64": "remote_java_tools_darwin_arm64",
++            "local_jdk": "local_jdk",
++            "remotejdk11_linux_toolchain_config_repo": "remotejdk11_linux_toolchain_config_repo",
++            "remotejdk11_linux_aarch64_toolchain_config_repo": "remotejdk11_linux_aarch64_toolchain_config_repo",
++            "remotejdk11_linux_ppc64le_toolchain_config_repo": "remotejdk11_linux_ppc64le_toolchain_config_repo",
++            "remotejdk11_linux_s390x_toolchain_config_repo": "remotejdk11_linux_s390x_toolchain_config_repo",
++            "remotejdk11_macos_toolchain_config_repo": "remotejdk11_macos_toolchain_config_repo",
++            "remotejdk11_macos_aarch64_toolchain_config_repo": "remotejdk11_macos_aarch64_toolchain_config_repo",
++            "remotejdk11_win_toolchain_config_repo": "remotejdk11_win_toolchain_config_repo",
++            "remotejdk11_win_arm64_toolchain_config_repo": "remotejdk11_win_arm64_toolchain_config_repo",
++            "remotejdk17_linux_toolchain_config_repo": "remotejdk17_linux_toolchain_config_repo",
++            "remotejdk17_linux_aarch64_toolchain_config_repo": "remotejdk17_linux_aarch64_toolchain_config_repo",
++            "remotejdk17_linux_ppc64le_toolchain_config_repo": "remotejdk17_linux_ppc64le_toolchain_config_repo",
++            "remotejdk17_linux_s390x_toolchain_config_repo": "remotejdk17_linux_s390x_toolchain_config_repo",
++            "remotejdk17_macos_toolchain_config_repo": "remotejdk17_macos_toolchain_config_repo",
++            "remotejdk17_macos_aarch64_toolchain_config_repo": "remotejdk17_macos_aarch64_toolchain_config_repo",
++            "remotejdk17_win_toolchain_config_repo": "remotejdk17_win_toolchain_config_repo",
++            "remotejdk17_win_arm64_toolchain_config_repo": "remotejdk17_win_arm64_toolchain_config_repo",
++            "remotejdk21_linux_toolchain_config_repo": "remotejdk21_linux_toolchain_config_repo",
++            "remotejdk21_linux_aarch64_toolchain_config_repo": "remotejdk21_linux_aarch64_toolchain_config_repo",
++            "remotejdk21_macos_toolchain_config_repo": "remotejdk21_macos_toolchain_config_repo",
++            "remotejdk21_macos_aarch64_toolchain_config_repo": "remotejdk21_macos_aarch64_toolchain_config_repo",
++            "remotejdk21_win_toolchain_config_repo": "remotejdk21_win_toolchain_config_repo"
++          },
++          "devImports": [],
++          "tags": [],
++          "hasDevUseExtension": false,
++          "hasNonDevUseExtension": true
++        }
++      ],
++      "deps": {
++        "platforms": "platforms@0.0.7",
++        "rules_cc": "rules_cc@0.0.9",
++        "bazel_skylib": "bazel_skylib@1.5.0",
++        "rules_proto": "rules_proto@4.0.0",
++        "rules_license": "rules_license@0.0.7",
++        "bazel_tools": "bazel_tools@_",
++        "local_config_platform": "local_config_platform@_"
++      },
++      "repoSpec": {
++        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
++        "ruleClassName": "http_archive",
++        "attributes": {
++          "name": "rules_java~7.1.0",
++          "urls": [
++            "https://github.com/bazelbuild/rules_java/releases/download/7.1.0/rules_java-7.1.0.tar.gz"
++          ],
++          "integrity": "sha256-o3pOX2OrgnFuXdau75iO2EYcegC46TYnImKJn1h81OE=",
++          "strip_prefix": "",
++          "remote_patches": {},
++          "remote_patch_strip": 0
++        }
++      }
++    },
++    "rules_license@0.0.7": {
++      "name": "rules_license",
++      "version": "0.0.7",
++      "key": "rules_license@0.0.7",
++      "repoName": "rules_license",
++      "executionPlatformsToRegister": [],
++      "toolchainsToRegister": [],
++      "extensionUsages": [],
++      "deps": {
++        "bazel_tools": "bazel_tools@_",
++        "local_config_platform": "local_config_platform@_"
++      },
++      "repoSpec": {
++        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
++        "ruleClassName": "http_archive",
++        "attributes": {
++          "name": "rules_license~0.0.7",
++          "urls": [
++            "https://github.com/bazelbuild/rules_license/releases/download/0.0.7/rules_license-0.0.7.tar.gz"
++          ],
++          "integrity": "sha256-RTHezLkTY5ww5cdRKgVNXYdWmNrrddjPkPKEN1/nw2A=",
++          "strip_prefix": "",
++          "remote_patches": {},
++          "remote_patch_strip": 0
++        }
++      }
++    },
++    "rules_python@0.4.0": {
++      "name": "rules_python",
++      "version": "0.4.0",
++      "key": "rules_python@0.4.0",
++      "repoName": "rules_python",
++      "executionPlatformsToRegister": [],
++      "toolchainsToRegister": [
++        "@bazel_tools//tools/python:autodetecting_toolchain"
++      ],
++      "extensionUsages": [
++        {
++          "extensionBzlFile": "@rules_python//bzlmod:extensions.bzl",
++          "extensionName": "pip_install",
++          "usingModule": "rules_python@0.4.0",
++          "location": {
++            "file": "https://bcr.bazel.build/modules/rules_python/0.4.0/MODULE.bazel",
++            "line": 7,
++            "column": 28
++          },
++          "imports": {
++            "pypi__click": "pypi__click",
++            "pypi__pip": "pypi__pip",
++            "pypi__pip_tools": "pypi__pip_tools",
++            "pypi__pkginfo": "pypi__pkginfo",
++            "pypi__setuptools": "pypi__setuptools",
++            "pypi__wheel": "pypi__wheel"
++          },
++          "devImports": [],
++          "tags": [],
++          "hasDevUseExtension": false,
++          "hasNonDevUseExtension": true
++        }
++      ],
++      "deps": {
++        "bazel_tools": "bazel_tools@_",
++        "local_config_platform": "local_config_platform@_"
++      },
++      "repoSpec": {
++        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
++        "ruleClassName": "http_archive",
++        "attributes": {
++          "name": "rules_python~0.4.0",
++          "urls": [
++            "https://github.com/bazelbuild/rules_python/releases/download/0.4.0/rules_python-0.4.0.tar.gz"
++          ],
++          "integrity": "sha256-lUqom0kb5KCDMEosuDgBnIuMNyCnq7nEy4GseiQjDOo=",
++          "strip_prefix": "",
++          "remote_patches": {
++            "https://bcr.bazel.build/modules/rules_python/0.4.0/patches/propagate_pip_install_dependencies.patch": "sha256-v7S/dem/mixg63MF4KoRGDA4KEol9ab/tIVp+6Xq0D0=",
++            "https://bcr.bazel.build/modules/rules_python/0.4.0/patches/module_dot_bazel.patch": "sha256-kG4VIfWxQazzTuh50mvsx6pmyoRVA4lfH5rkto/Oq+Y="
++          },
++          "remote_patch_strip": 1
++        }
++      }
++    },
++    "zlib@1.3": {
++      "name": "zlib",
++      "version": "1.3",
++      "key": "zlib@1.3",
++      "repoName": "zlib",
++      "executionPlatformsToRegister": [],
++      "toolchainsToRegister": [],
++      "extensionUsages": [],
++      "deps": {
++        "platforms": "platforms@0.0.7",
++        "rules_cc": "rules_cc@0.0.9",
++        "bazel_tools": "bazel_tools@_",
++        "local_config_platform": "local_config_platform@_"
++      },
++      "repoSpec": {
++        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
++        "ruleClassName": "http_archive",
++        "attributes": {
++          "name": "zlib~1.3",
++          "urls": [
++            "https://github.com/madler/zlib/releases/download/v1.3/zlib-1.3.tar.gz"
++          ],
++          "integrity": "sha256-/wukwpIBPbwnUws6geH5qBPNOd4Byl4Pi/NVcC76WT4=",
++          "strip_prefix": "zlib-1.3",
++          "remote_patches": {
++            "https://bcr.bazel.build/modules/zlib/1.3/patches/add_build_file.patch": "sha256-Ei+FYaaOo7A3jTKunMEodTI0Uw5NXQyZEcboMC8JskY=",
++            "https://bcr.bazel.build/modules/zlib/1.3/patches/module_dot_bazel.patch": "sha256-fPWLM+2xaF/kuy+kZc1YTfW6hNjrkG400Ho7gckuyJk="
++          },
++          "remote_patch_strip": 0
++        }
++      }
++    },
++    "apple_support@1.5.0": {
++      "name": "apple_support",
++      "version": "1.5.0",
++      "key": "apple_support@1.5.0",
++      "repoName": "build_bazel_apple_support",
++      "executionPlatformsToRegister": [],
++      "toolchainsToRegister": [
++        "@local_config_apple_cc_toolchains//:all"
++      ],
++      "extensionUsages": [
++        {
++          "extensionBzlFile": "@build_bazel_apple_support//crosstool:setup.bzl",
++          "extensionName": "apple_cc_configure_extension",
++          "usingModule": "apple_support@1.5.0",
++          "location": {
++            "file": "https://bcr.bazel.build/modules/apple_support/1.5.0/MODULE.bazel",
++            "line": 17,
++            "column": 35
++          },
++          "imports": {
++            "local_config_apple_cc": "local_config_apple_cc",
++            "local_config_apple_cc_toolchains": "local_config_apple_cc_toolchains"
++          },
++          "devImports": [],
++          "tags": [],
++          "hasDevUseExtension": false,
++          "hasNonDevUseExtension": true
++        }
++      ],
++      "deps": {
++        "bazel_skylib": "bazel_skylib@1.5.0",
++        "platforms": "platforms@0.0.7",
++        "bazel_tools": "bazel_tools@_",
++        "local_config_platform": "local_config_platform@_"
++      },
++      "repoSpec": {
++        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
++        "ruleClassName": "http_archive",
++        "attributes": {
++          "name": "apple_support~1.5.0",
++          "urls": [
++            "https://github.com/bazelbuild/apple_support/releases/download/1.5.0/apple_support.1.5.0.tar.gz"
++          ],
++          "integrity": "sha256-miM41vja0yRPgj8txghKA+TQ+7J8qJLclw5okNW0gYQ=",
++          "strip_prefix": "",
++          "remote_patches": {},
++          "remote_patch_strip": 0
++        }
++      }
++    }
++  },
++  "moduleExtensions": {
++    "@@apple_support~1.5.0//crosstool:setup.bzl%apple_cc_configure_extension": {
++      "general": {
++        "bzlTransitiveDigest": "pMLFCYaRPkgXPQ8vtuNkMfiHfPmRBy6QJfnid4sWfv0=",
++        "accumulatedFileDigests": {},
++        "envVariables": {},
++        "generatedRepoSpecs": {
++          "local_config_apple_cc": {
++            "bzlFile": "@@apple_support~1.5.0//crosstool:setup.bzl",
++            "ruleClassName": "_apple_cc_autoconf",
++            "attributes": {
++              "name": "apple_support~1.5.0~apple_cc_configure_extension~local_config_apple_cc"
++            }
++          },
++          "local_config_apple_cc_toolchains": {
++            "bzlFile": "@@apple_support~1.5.0//crosstool:setup.bzl",
++            "ruleClassName": "_apple_cc_autoconf_toolchains",
++            "attributes": {
++              "name": "apple_support~1.5.0~apple_cc_configure_extension~local_config_apple_cc_toolchains"
++            }
++          }
++        },
++        "recordedRepoMappingEntries": [
++          [
++            "apple_support~1.5.0",
++            "bazel_tools",
++            "bazel_tools"
++          ]
++        ]
++      }
++    },
++    "@@bazel_features~1.1.1//private:extensions.bzl%version_extension": {
++      "general": {
++        "bzlTransitiveDigest": "xm7Skm1Las5saxzFWt2hbS+e68BWi+MXyt6+lKIhjPA=",
++        "accumulatedFileDigests": {},
++        "envVariables": {},
++        "generatedRepoSpecs": {
++          "bazel_features_version": {
++            "bzlFile": "@@bazel_features~1.1.1//private:version_repo.bzl",
++            "ruleClassName": "version_repo",
++            "attributes": {
++              "name": "bazel_features~1.1.1~version_extension~bazel_features_version"
++            }
++          },
++          "bazel_features_globals": {
++            "bzlFile": "@@bazel_features~1.1.1//private:globals_repo.bzl",
++            "ruleClassName": "globals_repo",
++            "attributes": {
++              "name": "bazel_features~1.1.1~version_extension~bazel_features_globals",
++              "globals": {
++                "RunEnvironmentInfo": "5.3.0",
++                "DefaultInfo": "0.0.1",
++                "__TestingOnly_NeverAvailable": "1000000000.0.0"
++              }
++            }
++          }
++        },
++        "recordedRepoMappingEntries": []
++      }
++    },
++    "@@bazel_tools//tools/cpp:cc_configure.bzl%cc_configure_extension": {
++      "general": {
++        "bzlTransitiveDigest": "mcsWHq3xORJexV5/4eCvNOLxFOQKV6eli3fkr+tEaqE=",
++        "accumulatedFileDigests": {},
++        "envVariables": {},
++        "generatedRepoSpecs": {
++          "local_config_cc": {
++            "bzlFile": "@@bazel_tools//tools/cpp:cc_configure.bzl",
++            "ruleClassName": "cc_autoconf",
++            "attributes": {
++              "name": "bazel_tools~cc_configure_extension~local_config_cc"
++            }
++          },
++          "local_config_cc_toolchains": {
++            "bzlFile": "@@bazel_tools//tools/cpp:cc_configure.bzl",
++            "ruleClassName": "cc_autoconf_toolchains",
++            "attributes": {
++              "name": "bazel_tools~cc_configure_extension~local_config_cc_toolchains"
++            }
++          }
++        },
++        "recordedRepoMappingEntries": [
++          [
++            "bazel_tools",
++            "bazel_tools",
++            "bazel_tools"
++          ]
++        ]
++      }
++    },
++    "@@bazel_tools//tools/osx:xcode_configure.bzl%xcode_configure_extension": {
++      "general": {
++        "bzlTransitiveDigest": "Qh2bWTU6QW6wkrd87qrU4YeY+SG37Nvw3A0PR4Y0L2Y=",
++        "accumulatedFileDigests": {},
++        "envVariables": {},
++        "generatedRepoSpecs": {
++          "local_config_xcode": {
++            "bzlFile": "@@bazel_tools//tools/osx:xcode_configure.bzl",
++            "ruleClassName": "xcode_autoconf",
++            "attributes": {
++              "name": "bazel_tools~xcode_configure_extension~local_config_xcode",
++              "xcode_locator": "@bazel_tools//tools/osx:xcode_locator.m",
++              "remote_xcode": ""
++            }
++          }
++        },
++        "recordedRepoMappingEntries": []
++      }
++    },
++    "@@bazel_tools//tools/sh:sh_configure.bzl%sh_configure_extension": {
++      "general": {
++        "bzlTransitiveDigest": "hp4NgmNjEg5+xgvzfh6L83bt9/aiiWETuNpwNuF1MSU=",
++        "accumulatedFileDigests": {},
++        "envVariables": {},
++        "generatedRepoSpecs": {
++          "local_config_sh": {
++            "bzlFile": "@@bazel_tools//tools/sh:sh_configure.bzl",
++            "ruleClassName": "sh_config",
++            "attributes": {
++              "name": "bazel_tools~sh_configure_extension~local_config_sh"
++            }
++          }
++        },
++        "recordedRepoMappingEntries": []
++      }
++    },
++    "@@gazelle~0.35.0//:extensions.bzl%go_deps": {
++      "general": {
++        "bzlTransitiveDigest": "zP01muRk4s4xWGK3gNPXOyDMQkOPsIhu99akeKWFFQ0=",
++        "accumulatedFileDigests": {
++          "@@//:go.mod": "075992fbd5b5d7ae7fd39696c36ee6d9c67c24c9fb3538eecfd72efe1de4703c",
++          "@@//:go.sum": "5c6896cd2db44401ba89497f654bbabb4237868de971731f986d0548eb6c9675",
++          "@@gazelle~0.35.0//:go.mod": "48dc6e771c3028ee1c18b9ffc81e596fd5f6d7e0016c5ef280e30f2821f60473",
++          "@@gazelle~0.35.0//:go.sum": "7c4460e8ecb5dd8691a51d4fa2e9e4751108b933636497ce46db499fc2e7a88d",
++          "@@circl~1.3.7//:go.sum": "0bd5c0e45a89a2de0ac7eead749230a78347445611e14f5732a53177e2dcf703",
++          "@@rules_go~0.45.1//:go.mod": "de22304b720f7f61350ec1c9739de6c0a1b1103fd22bfeb6e92c6c843ddc6d6e",
++          "@@rules_go~0.45.1//:go.sum": "d56fdb19b21a5f12bcf625c49432371ac39c2def0f564098fbda107f7c080f40",
++          "@@circl~1.3.7//:go.mod": "9ae0a84b061664ec8589ba6a61c18c83c890212072a18e48c9b6b0ba9e68da8c"
++        },
++        "envVariables": {},
++        "generatedRepoSpecs": {
++          "org_golang_x_tools_go_vcs": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~org_golang_x_tools_go_vcs",
++              "importpath": "golang.org/x/tools/go/vcs",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:cOIJqWBl99H1dH5LWizPa+0ImeeJq3t3cJjaeOWUAL4=",
++              "replace": "",
++              "version": "v0.1.0-deprecated"
++            }
++          },
++          "com_github_fsnotify_fsnotify": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_fsnotify_fsnotify",
++              "importpath": "github.com/fsnotify/fsnotify",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:8JEhPFa5W2WU7YfeZzPNqzMP6Lwt7L2715Ggo0nosvA=",
++              "replace": "",
++              "version": "v1.7.0"
++            }
++          },
++          "com_github_bahlo_generic_list_go": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_bahlo_generic_list_go",
++              "importpath": "github.com/bahlo/generic-list-go",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:5sz/EEAK+ls5wF+NeqDpk5+iNdMDXrh3z3nPnH1Wvgk=",
++              "replace": "",
++              "version": "v0.2.0"
++            }
++          },
++          "com_github_mitchellh_copystructure": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_mitchellh_copystructure",
++              "importpath": "github.com/mitchellh/copystructure",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:vpKXTN4ewci03Vljg/q9QvCGUDttBOGBIa15WveJJGw=",
++              "replace": "",
++              "version": "v1.2.0"
++            }
++          },
++          "com_github_spf13_cobra": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_spf13_cobra",
++              "importpath": "github.com/spf13/cobra",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:7aJaZx1B85qltLMc546zn58BxxfZdR/W22ej9CFoEf0=",
++              "replace": "",
++              "version": "v1.8.0"
++            }
++          },
++          "org_golang_x_exp": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~org_golang_x_exp",
++              "importpath": "golang.org/x/exp",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:c0vyKkb6yr3KR7jEfJaOSv4lG7xPkbN6r52aJz1d8a8=",
++              "replace": "",
++              "version": "v0.0.0-20231206192017-f3f8817b8deb"
++            }
++          },
++          "com_github_spf13_cast": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_spf13_cast",
++              "importpath": "github.com/spf13/cast",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:R+kOtfhWQE6TVQzY+4D7wJLBgkdVasCEFxSUBYBYIlA=",
++              "replace": "",
++              "version": "v1.5.1"
++            }
++          },
++          "org_golang_x_net": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~org_golang_x_net",
++              "importpath": "golang.org/x/net",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:zTwKpTd2XuCqf8huc7Fo2iSy+4RHPd10s4KzeTnVr1c=",
++              "replace": "",
++              "version": "v0.19.0"
++            }
++          },
++          "com_github_spf13_pflag": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_spf13_pflag",
++              "importpath": "github.com/spf13/pflag",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:iy+VFUOCP1a+8yFto/drg2CJ5u0yRoB7fZw3DKv/JXA=",
++              "replace": "",
++              "version": "v1.0.5"
++            }
++          },
++          "com_github_protonmail_go_crypto": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_protonmail_go_crypto",
++              "importpath": "github.com/ProtonMail/go-crypto",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:LRuvITjQWX+WIfr930YHG2HNfjR1uOfyf5vE0kC2U78=",
++              "replace": "",
++              "version": "v1.0.0"
++            }
++          },
++          "com_github_muesli_mango_cobra": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_muesli_mango_cobra",
++              "importpath": "github.com/muesli/mango-cobra",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:DQvjzAM0PMZr85Iv9LIMaYISpTOliMEg+uMFtNbYvWg=",
++              "replace": "",
++              "version": "v1.2.0"
++            }
++          },
++          "com_github_invopop_jsonschema": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_invopop_jsonschema",
++              "importpath": "github.com/invopop/jsonschema",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:6ovsNSuvn9wEQVOyc72aycBMVQFKz7cPdMJn10CvzRI=",
++              "replace": "",
++              "version": "v0.12.0"
++            }
++          },
++          "com_github_masterminds_goutils": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_masterminds_goutils",
++              "importpath": "github.com/Masterminds/goutils",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:5nUrii3FMTL5diU80unEVvNevw1nH4+ZV4DSLVJLSYI=",
++              "replace": "",
++              "version": "v1.1.1"
++            }
++          },
++          "com_github_protonmail_gopenpgp_v2": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_protonmail_gopenpgp_v2",
++              "importpath": "github.com/ProtonMail/gopenpgp/v2",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:Awsg7MPc2gD3I7IFac2qE3Gdls0lZW8SzrFZ3k1oz0s=",
++              "replace": "",
++              "version": "v2.7.1"
++            }
++          },
++          "com_github_microsoft_go_winio": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_microsoft_go_winio",
++              "importpath": "github.com/Microsoft/go-winio",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:9/kr64B9VUZrLm5YYwbGtUJnMgqWVOdUAXu6Migciow=",
++              "replace": "",
++              "version": "v0.6.1"
++            }
++          },
++          "com_github_golang_mock": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_golang_mock",
++              "importpath": "github.com/golang/mock",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:YojYx61/OLFsiv6Rw1Z96LpldJIy31o+UHmwAUMJ6/U=",
++              "replace": "",
++              "version": "v1.7.0-rc.1"
++            }
++          },
++          "org_golang_x_sync": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~org_golang_x_sync",
++              "importpath": "golang.org/x/sync",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:60k92dhOjHxJkrqnwsfl8KuaHbn/5dl0lUPUklKo3qE=",
++              "replace": "",
++              "version": "v0.5.0"
++            }
++          },
++          "com_gitlab_digitalxero_go_conventional_commit": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_gitlab_digitalxero_go_conventional_commit",
++              "importpath": "gitlab.com/digitalxero/go-conventional-commit",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:8/dO6WWG+98PMhlZowt/YjuiKhqhGlOCwlIV8SqqGh8=",
++              "replace": "",
++              "version": "v1.0.7"
++            }
++          },
++          "com_github_imdario_mergo": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_imdario_mergo",
++              "importpath": "github.com/imdario/mergo",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:wwQJbIsHYGMUyLSPrEq1CT16AhnhNJQ51+4fdHUnCl4=",
++              "replace": "",
++              "version": "v0.3.16"
++            }
++          },
++          "com_github_caarlos0_go_version": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_caarlos0_go_version",
++              "importpath": "github.com/caarlos0/go-version",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:1bikKHkGGVIIxqCmufhSSs3hpBScgHGacrvsi8FuIfc=",
++              "replace": "",
++              "version": "v0.1.1"
++            }
++          },
++          "org_golang_google_protobuf": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~org_golang_google_protobuf",
++              "importpath": "google.golang.org/protobuf",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:g0LDEJHgrBl9N9r17Ru3sqWhkIx2NB67okBHPwC7hs8=",
++              "replace": "",
++              "version": "v1.31.0"
++            }
++          },
++          "com_github_emirpasic_gods": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_emirpasic_gods",
++              "importpath": "github.com/emirpasic/gods",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:FXtiHYKDGKCW2KzwZKx0iC0PQmdlorYgdFG9jPXJ1Bc=",
++              "replace": "",
++              "version": "v1.18.1"
++            }
++          },
++          "com_github_muesli_mango": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_muesli_mango",
++              "importpath": "github.com/muesli/mango",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:DZQK45d2gGbql1arsYA4vfg4d7I9Hfx5rX/GCmzsAvI=",
++              "replace": "",
++              "version": "v0.1.0"
++            }
++          },
++          "org_golang_x_mod": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~org_golang_x_mod",
++              "importpath": "golang.org/x/mod",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:dGoOF9QVLYng8IHTm7BAyWqCqSheQ5pYWGhzW00YJr0=",
++              "replace": "",
++              "version": "v0.14.0"
++            }
++          },
++          "com_github_bwesterb_go_ristretto": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_bwesterb_go_ristretto",
++              "importpath": "github.com/bwesterb/go-ristretto",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:1w53tCkGhCQ5djbat3+MH0BAQ5Kfgbt56UZQ/JMzngw=",
++              "replace": "",
++              "version": "v1.2.3"
++            }
++          },
++          "in_gopkg_yaml_v3": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~in_gopkg_yaml_v3",
++              "importpath": "gopkg.in/yaml.v3",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=",
++              "replace": "",
++              "version": "v3.0.1"
++            }
++          },
++          "org_golang_x_crypto": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~org_golang_x_crypto",
++              "importpath": "golang.org/x/crypto",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:r8bRNjWL3GshPW3gkd+RpvzWrZAwPS49OmTGZ/uhM4k=",
++              "replace": "",
++              "version": "v0.17.0"
++            }
++          },
++          "com_github_skeema_knownhosts": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_skeema_knownhosts",
++              "importpath": "github.com/skeema/knownhosts",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:SHWdIUa82uGZz+F+47k8SY4QhhI291cXCpopT1lK2AQ=",
++              "replace": "",
++              "version": "v1.2.1"
++            }
++          },
++          "com_github_masterminds_semver_v3": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_masterminds_semver_v3",
++              "importpath": "github.com/Masterminds/semver/v3",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:RN9w6+7QoMeJVGyfmbcgs28Br8cvmnucEXnY0rYXWg0=",
++              "replace": "",
++              "version": "v3.2.1"
++            }
++          },
++          "com_github_golang_protobuf": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_golang_protobuf",
++              "importpath": "github.com/golang/protobuf",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:KhyjKVUg7Usr/dYsdSqoFveMYd5ko72D+zANwlG1mmg=",
++              "replace": "",
++              "version": "v1.5.3"
++            }
++          },
++          "com_github_buger_jsonparser": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_buger_jsonparser",
++              "importpath": "github.com/buger/jsonparser",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:2PnMjfWD7wBILjqQbt530v576A/cAbQvEW9gGIpYMUs=",
++              "replace": "",
++              "version": "v1.1.1"
++            }
++          },
++          "com_github_inconshreveable_mousetrap": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_inconshreveable_mousetrap",
++              "importpath": "github.com/inconshreveable/mousetrap",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:wN+x4NVGpMsO7ErUn/mUI3vEoE6Jt13X2s0bqwp9tc8=",
++              "replace": "",
++              "version": "v1.1.0"
++            }
++          },
++          "com_github_klauspost_compress": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_klauspost_compress",
++              "importpath": "github.com/klauspost/compress",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:d4vBd+7CHydUqpFBgUEKkSdtSugf9YFmSkvUYPquI5E=",
++              "replace": "",
++              "version": "v1.17.5"
++            }
++          },
++          "com_github_blakesmith_ar": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_blakesmith_ar",
++              "importpath": "github.com/blakesmith/ar",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:m935MPodAbYS46DG4pJSv7WO+VECIWUQ7OJYSoTrMh4=",
++              "replace": "",
++              "version": "v0.0.0-20190502131153-809d4375e1fb"
++            }
++          },
++          "com_github_caarlos0_go_rpmutils": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_caarlos0_go_rpmutils",
++              "importpath": "github.com/caarlos0/go-rpmutils",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:5TPRjT2njvPKzXUcrcg6Dt+JPzQF+M5K7xb5V1Nwteg=",
++              "replace": "",
++              "version": "v0.2.1-0.20240105125627-01185134a559"
++            }
++          },
++          "com_github_huandu_xstrings": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_huandu_xstrings",
++              "importpath": "github.com/huandu/xstrings",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:/Gcsuc1x8JVbJ9/rlye4xZnVAbEkGauT8lbebqcQws4=",
++              "replace": "",
++              "version": "v1.3.3"
++            }
++          },
++          "com_github_cyphar_filepath_securejoin": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_cyphar_filepath_securejoin",
++              "importpath": "github.com/cyphar/filepath-securejoin",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:Ugdm7cg7i6ZK6x3xDF1oEu1nfkyfH53EtKeQYTC3kyg=",
++              "replace": "",
++              "version": "v0.2.4"
++            }
++          },
++          "org_golang_google_grpc_cmd_protoc_gen_go_grpc": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~org_golang_google_grpc_cmd_protoc_gen_go_grpc",
++              "importpath": "google.golang.org/grpc/cmd/protoc-gen-go-grpc",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:rNBFJjBCOgVr9pWD7rs/knKL4FRTKgpZmsRfV214zcA=",
++              "replace": "",
++              "version": "v1.3.0"
++            }
++          },
++          "com_github_muesli_roff": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_muesli_roff",
++              "importpath": "github.com/muesli/roff",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:YD0lalCotmYuF5HhZliKWlIx7IEhiXeSfq7hNjFqGF8=",
++              "replace": "",
++              "version": "v0.1.0"
++            }
++          },
++          "com_github_pmezard_go_difflib": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_pmezard_go_difflib",
++              "importpath": "github.com/pmezard/go-difflib",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=",
++              "replace": "",
++              "version": "v1.0.0"
++            }
++          },
++          "com_github_bmatcuk_doublestar_v4": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_bmatcuk_doublestar_v4",
++              "importpath": "github.com/bmatcuk/doublestar/v4",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:FH9SifrbvJhnlQpztAx++wlkk70QBf0iBWDwNy7PA4I=",
++              "replace": "",
++              "version": "v4.6.1"
++            }
++          },
++          "com_github_goreleaser_chglog": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_goreleaser_chglog",
++              "importpath": "github.com/goreleaser/chglog",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:Sk6BMIpx8+vpAf8KyPit34OgWui8c7nKTMHhYx88jJ4=",
++              "replace": "",
++              "version": "v0.5.0"
++            }
++          },
++          "com_github_ulikunitz_xz": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_ulikunitz_xz",
++              "importpath": "github.com/ulikunitz/xz",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:kpFauv27b6ynzBNT/Xy+1k+fK4WswhN/6PN5WhFAGw8=",
++              "replace": "",
++              "version": "v0.5.11"
++            }
++          },
++          "com_github_davecgh_go_spew": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_davecgh_go_spew",
++              "importpath": "github.com/davecgh/go-spew",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=",
++              "replace": "",
++              "version": "v1.1.1"
++            }
++          },
++          "org_golang_x_tools": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~org_golang_x_tools",
++              "importpath": "golang.org/x/tools",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:GO788SKMRunPIBCXiQyo2AaexLstOrVhuAL5YwsckQM=",
++              "replace": "",
++              "version": "v0.16.0"
++            }
++          },
++          "com_github_bazelbuild_buildtools": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_bazelbuild_buildtools",
++              "importpath": "github.com/bazelbuild/buildtools",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:2Gc2Q6hVR1SJ8bBI9Ybzoggp8u/ED2WkM4MfvEIn9+c=",
++              "replace": "",
++              "version": "v0.0.0-20231115204819-d4c9dccdfbb1"
++            }
++          },
++          "org_golang_google_genproto": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~org_golang_google_genproto",
++              "importpath": "google.golang.org/genproto",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:+kGHl1aib/qcwaRi1CbqBZ1rk19r85MNUf8HaBghugY=",
++              "replace": "",
++              "version": "v0.0.0-20200526211855-cb27e3aa2013"
++            }
++          },
++          "com_github_kevinburke_ssh_config": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_kevinburke_ssh_config",
++              "importpath": "github.com/kevinburke/ssh_config",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:x584FjTGwHzMwvHx18PXxbBVzfnxogHaAReU4gf13a4=",
++              "replace": "",
++              "version": "v1.2.0"
++            }
++          },
++          "com_github_gogo_protobuf": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_gogo_protobuf",
++              "importpath": "github.com/gogo/protobuf",
++              "build_directives": [
++                "gazelle:proto disable"
++              ],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:Ov1cvc58UF3b5XjBnZv7+opcTcQFZebYjWzi34vdm4Q=",
++              "replace": "",
++              "version": "v1.3.2"
++            }
++          },
++          "com_github_stretchr_testify": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_stretchr_testify",
++              "importpath": "github.com/stretchr/testify",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:CcVxjf3Q8PM0mHUKJCdn+eZZtm5yQwehR5yeSVQQcUk=",
++              "replace": "",
++              "version": "v1.8.4"
++            }
++          },
++          "com_github_shopspring_decimal": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_shopspring_decimal",
++              "importpath": "github.com/shopspring/decimal",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:abSATXmQEYyShuxI4/vyW3tV1MrKAJzCZ/0zLUXYbsQ=",
++              "replace": "",
++              "version": "v1.2.0"
++            }
++          },
++          "com_github_protonmail_go_mime": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_protonmail_go_mime",
++              "importpath": "github.com/ProtonMail/go-mime",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:tCbYj7/299ekTTXpdwKYF8eBlsYsDVoggDAuAjoK66k=",
++              "replace": "",
++              "version": "v0.0.0-20230322103455-7d82a3887f2f"
++            }
++          },
++          "com_github_pkg_errors": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_pkg_errors",
++              "importpath": "github.com/pkg/errors",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=",
++              "replace": "",
++              "version": "v0.9.1"
++            }
++          },
++          "com_github_go_git_go_git_v5": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_go_git_go_git_v5",
++              "importpath": "github.com/go-git/go-git/v5",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:XIZc1p+8YzypNr34itUfSvYJcv+eYdTnTvOZ2vD3cA4=",
++              "replace": "",
++              "version": "v5.11.0"
++            }
++          },
++          "cat_dario_mergo": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~cat_dario_mergo",
++              "importpath": "dario.cat/mergo",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:AGCNq9Evsj31mOgNPcLyXc+4PNABt905YmuqPYYpBWk=",
++              "replace": "",
++              "version": "v1.0.0"
++            }
++          },
++          "com_github_go_git_go_billy_v5": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_go_git_go_billy_v5",
++              "importpath": "github.com/go-git/go-billy/v5",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:yEY4yhzCDuMGSv83oGxiBotRzhwhNr8VZyphhiu+mTU=",
++              "replace": "",
++              "version": "v5.5.0"
++            }
++          },
++          "com_github_jbenet_go_context": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_jbenet_go_context",
++              "importpath": "github.com/jbenet/go-context",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:BQSFePA1RWJOlocH6Fxy8MmwDt+yVQYULKfN0RoTN8A=",
++              "replace": "",
++              "version": "v0.0.0-20150711004518-d14ea06fba99"
++            }
++          },
++          "org_golang_google_grpc": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~org_golang_google_grpc",
++              "importpath": "google.golang.org/grpc",
++              "build_directives": [
++                "gazelle:proto disable"
++              ],
++              "build_file_generation": "on",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:pnP7OclFFFgFi4VHQDQDaoXUVauOFyktqTsqqgzFKbc=",
++              "replace": "",
++              "version": "v1.40.1"
++            }
++          },
++          "com_github_klauspost_pgzip": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_klauspost_pgzip",
++              "importpath": "github.com/klauspost/pgzip",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:8RXeL5crjEUFnR2/Sn6GJNWtSQ3Dk8pq4CL3jvdDyjU=",
++              "replace": "",
++              "version": "v1.2.6"
++            }
++          },
++          "com_github_aleksi_pointer": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_aleksi_pointer",
++              "importpath": "github.com/AlekSi/pointer",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:glcy/gc4h8HnG2Z3ZECSzZ1IX1x2JxRVuDzaJwQE0+w=",
++              "replace": "",
++              "version": "v1.2.0"
++            }
++          },
++          "com_github_pjbgf_sha1cd": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_pjbgf_sha1cd",
++              "importpath": "github.com/pjbgf/sha1cd",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:4D5XXmUUBUl/xQ6IjCkEAbqXskkq/4O7LmGn0AqMDs4=",
++              "replace": "",
++              "version": "v0.3.0"
++            }
++          },
++          "com_github_go_git_gcfg": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_go_git_gcfg",
++              "importpath": "github.com/go-git/gcfg",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:+zs/tPmkDkHx3U66DAb0lQFJrpS6731Oaa12ikc+DiI=",
++              "replace": "",
++              "version": "v1.5.1-0.20230307220236-3a3c6141e376"
++            }
++          },
++          "com_github_google_go_cmp": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_google_go_cmp",
++              "importpath": "github.com/google/go-cmp",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=",
++              "replace": "",
++              "version": "v0.6.0"
++            }
++          },
++          "com_github_cavaliergopher_cpio": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_cavaliergopher_cpio",
++              "importpath": "github.com/cavaliergopher/cpio",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:KQFSeKmZhv0cr+kawA3a0xTQCU4QxXF1vhU7P7av2KM=",
++              "replace": "",
++              "version": "v1.0.1"
++            }
++          },
++          "org_golang_x_text": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~org_golang_x_text",
++              "importpath": "golang.org/x/text",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:ScX5w1eTa3QqT8oi6+ziP7dTV1S2+ALU0bI+0zXKWiQ=",
++              "replace": "",
++              "version": "v0.14.0"
++            }
++          },
++          "in_gopkg_warnings_v0": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~in_gopkg_warnings_v0",
++              "importpath": "gopkg.in/warnings.v0",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:wFXVbFY8DY5/xOe1ECiWdKCzZlxgshcYVNkBHstARME=",
++              "replace": "",
++              "version": "v0.1.2"
++            }
++          },
++          "com_github_cpuguy83_go_md2man_v2": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_cpuguy83_go_md2man_v2",
++              "importpath": "github.com/cpuguy83/go-md2man/v2",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:qMCsGGgs+MAzDFyp9LpAe1Lqy/fY/qCovCm0qnXZOBM=",
++              "replace": "",
++              "version": "v2.0.3"
++            }
++          },
++          "com_github_google_uuid": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_google_uuid",
++              "importpath": "github.com/google/uuid",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:t6JiXgmwXMjEs8VusXIJk2BXHsn+wx8BZdTaoZ5fu7I=",
++              "replace": "",
++              "version": "v1.3.0"
++            }
++          },
++          "com_github_xanzy_ssh_agent": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_xanzy_ssh_agent",
++              "importpath": "github.com/xanzy/ssh-agent",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:+/15pJfg/RsTxqYcX6fHqOXZwwMP+2VyYWJeWM2qQFM=",
++              "replace": "",
++              "version": "v0.3.3"
++            }
++          },
++          "com_github_mailru_easyjson": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_mailru_easyjson",
++              "importpath": "github.com/mailru/easyjson",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:UGYAvKxe3sBsEDzO8ZeWOSlIQfWFlxbzLZe7hwFURr0=",
++              "replace": "",
++              "version": "v0.7.7"
++            }
++          },
++          "com_github_russross_blackfriday_v2": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_russross_blackfriday_v2",
++              "importpath": "github.com/russross/blackfriday/v2",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:JIOH55/0cWyOuilr9/qlrm0BSXldqnqwMsf35Ld67mk=",
++              "replace": "",
++              "version": "v2.1.0"
++            }
++          },
++          "com_github_muesli_mango_pflag": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_muesli_mango_pflag",
++              "importpath": "github.com/muesli/mango-pflag",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:UADqbYgpUyRoBja3g6LUL+3LErjpsOwaC9ywvBWe7Sg=",
++              "replace": "",
++              "version": "v0.1.0"
++            }
++          },
++          "com_github_sergi_go_diff": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_sergi_go_diff",
++              "importpath": "github.com/sergi/go-diff",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:XU+rvMAioB0UC3q1MFrIQy4Vo5/4VsRDQQXHsEya6xQ=",
++              "replace": "",
++              "version": "v1.2.0"
++            }
++          },
++          "com_github_masterminds_sprig_v3": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_masterminds_sprig_v3",
++              "importpath": "github.com/Masterminds/sprig/v3",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:eL2fZNezLomi0uOLqjQoN6BfsDD+fyLtgbJMAj9n6YA=",
++              "replace": "",
++              "version": "v3.2.3"
++            }
++          },
++          "com_github_wk8_go_ordered_map_v2": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_wk8_go_ordered_map_v2",
++              "importpath": "github.com/wk8/go-ordered-map/v2",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:5h/BUHu93oj4gIdvHHHGsScSTMijfx5PeYkE/fJgbpc=",
++              "replace": "",
++              "version": "v2.1.8"
++            }
++          },
++          "bazel_gazelle_go_repository_config": {
++            "bzlFile": "@@gazelle~0.35.0//internal/bzlmod:go_deps.bzl",
++            "ruleClassName": "_go_repository_config",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~bazel_gazelle_go_repository_config",
++              "importpaths": {
++                "cat_dario_mergo": "dario.cat/mergo",
++                "com_github_aleksi_pointer": "github.com/AlekSi/pointer",
++                "com_github_masterminds_semver_v3": "github.com/Masterminds/semver/v3",
++                "com_github_protonmail_go_crypto": "github.com/ProtonMail/go-crypto",
++                "com_github_protonmail_gopenpgp_v2": "github.com/ProtonMail/gopenpgp/v2",
++                "com_github_blakesmith_ar": "github.com/blakesmith/ar",
++                "com_github_caarlos0_go_rpmutils": "github.com/caarlos0/go-rpmutils",
++                "com_github_caarlos0_go_version": "github.com/caarlos0/go-version",
++                "com_github_google_rpmpack": "github.com/google/rpmpack",
++                "com_github_goreleaser_chglog": "github.com/goreleaser/chglog",
++                "com_github_goreleaser_fileglob": "github.com/goreleaser/fileglob",
++                "com_github_invopop_jsonschema": "github.com/invopop/jsonschema",
++                "com_github_klauspost_compress": "github.com/klauspost/compress",
++                "com_github_klauspost_pgzip": "github.com/klauspost/pgzip",
++                "com_github_muesli_mango_cobra": "github.com/muesli/mango-cobra",
++                "com_github_muesli_roff": "github.com/muesli/roff",
++                "com_github_spf13_cobra": "github.com/spf13/cobra",
++                "com_github_stretchr_testify": "github.com/stretchr/testify",
++                "com_github_ulikunitz_xz": "github.com/ulikunitz/xz",
++                "com_github_xi2_xz": "github.com/xi2/xz",
++                "org_golang_x_exp": "golang.org/x/exp",
++                "in_gopkg_yaml_v3": "gopkg.in/yaml.v3",
++                "com_github_masterminds_goutils": "github.com/Masterminds/goutils",
++                "com_github_masterminds_sprig_v3": "github.com/Masterminds/sprig/v3",
++                "com_github_microsoft_go_winio": "github.com/Microsoft/go-winio",
++                "com_github_protonmail_go_mime": "github.com/ProtonMail/go-mime",
++                "com_github_bahlo_generic_list_go": "github.com/bahlo/generic-list-go",
++                "com_github_buger_jsonparser": "github.com/buger/jsonparser",
++                "com_github_cavaliergopher_cpio": "github.com/cavaliergopher/cpio",
++                "@circl~1.3.7": "github.com/cloudflare/circl",
++                "com_github_cpuguy83_go_md2man_v2": "github.com/cpuguy83/go-md2man/v2",
++                "com_github_cyphar_filepath_securejoin": "github.com/cyphar/filepath-securejoin",
++                "com_github_davecgh_go_spew": "github.com/davecgh/go-spew",
++                "com_github_emirpasic_gods": "github.com/emirpasic/gods",
++                "com_github_go_git_gcfg": "github.com/go-git/gcfg",
++                "com_github_go_git_go_billy_v5": "github.com/go-git/go-billy/v5",
++                "com_github_go_git_go_git_v5": "github.com/go-git/go-git/v5",
++                "com_github_gobwas_glob": "github.com/gobwas/glob",
++                "com_github_golang_groupcache": "github.com/golang/groupcache",
++                "com_github_google_uuid": "github.com/google/uuid",
++                "com_github_huandu_xstrings": "github.com/huandu/xstrings",
++                "com_github_imdario_mergo": "github.com/imdario/mergo",
++                "com_github_inconshreveable_mousetrap": "github.com/inconshreveable/mousetrap",
++                "com_github_jbenet_go_context": "github.com/jbenet/go-context",
++                "com_github_kevinburke_ssh_config": "github.com/kevinburke/ssh_config",
++                "com_github_mailru_easyjson": "github.com/mailru/easyjson",
++                "com_github_mitchellh_copystructure": "github.com/mitchellh/copystructure",
++                "com_github_mitchellh_reflectwalk": "github.com/mitchellh/reflectwalk",
++                "com_github_muesli_mango": "github.com/muesli/mango",
++                "com_github_muesli_mango_pflag": "github.com/muesli/mango-pflag",
++                "com_github_pjbgf_sha1cd": "github.com/pjbgf/sha1cd",
++                "com_github_pkg_errors": "github.com/pkg/errors",
++                "com_github_pmezard_go_difflib": "github.com/pmezard/go-difflib",
++                "com_github_russross_blackfriday_v2": "github.com/russross/blackfriday/v2",
++                "com_github_sergi_go_diff": "github.com/sergi/go-diff",
++                "com_github_shopspring_decimal": "github.com/shopspring/decimal",
++                "com_github_skeema_knownhosts": "github.com/skeema/knownhosts",
++                "com_github_spf13_cast": "github.com/spf13/cast",
++                "com_github_spf13_pflag": "github.com/spf13/pflag",
++                "com_github_wk8_go_ordered_map_v2": "github.com/wk8/go-ordered-map/v2",
++                "com_github_xanzy_ssh_agent": "github.com/xanzy/ssh-agent",
++                "com_gitlab_digitalxero_go_conventional_commit": "gitlab.com/digitalxero/go-conventional-commit",
++                "org_golang_x_crypto": "golang.org/x/crypto",
++                "org_golang_x_mod": "golang.org/x/mod",
++                "org_golang_x_net": "golang.org/x/net",
++                "org_golang_x_sys": "golang.org/x/sys",
++                "org_golang_x_text": "golang.org/x/text",
++                "org_golang_x_tools": "golang.org/x/tools",
++                "in_gopkg_warnings_v0": "gopkg.in/warnings.v0",
++                "com_github_gogo_protobuf": "github.com/gogo/protobuf",
++                "com_github_golang_mock": "github.com/golang/mock",
++                "com_github_golang_protobuf": "github.com/golang/protobuf",
++                "org_golang_google_genproto": "google.golang.org/genproto",
++                "org_golang_google_grpc": "google.golang.org/grpc",
++                "org_golang_google_grpc_cmd_protoc_gen_go_grpc": "google.golang.org/grpc/cmd/protoc-gen-go-grpc",
++                "org_golang_google_protobuf": "google.golang.org/protobuf",
++                "com_github_bazelbuild_buildtools": "github.com/bazelbuild/buildtools",
++                "com_github_bmatcuk_doublestar_v4": "github.com/bmatcuk/doublestar/v4",
++                "com_github_fsnotify_fsnotify": "github.com/fsnotify/fsnotify",
++                "com_github_google_go_cmp": "github.com/google/go-cmp",
++                "org_golang_x_sync": "golang.org/x/sync",
++                "org_golang_x_tools_go_vcs": "golang.org/x/tools/go/vcs",
++                "com_github_bwesterb_go_ristretto": "github.com/bwesterb/go-ristretto",
++                "@rules_go~0.45.1": "github.com/bazelbuild/rules_go",
++                "@gazelle~0.35.0": "github.com/bazelbuild/bazel-gazelle"
++              },
++              "module_names": {
++                "@rules_go~0.45.1": "rules_go",
++                "@gazelle~0.35.0": "gazelle",
++                "@circl~1.3.7": "circl"
++              },
++              "build_naming_conventions": {}
++            }
++          },
++          "com_github_xi2_xz": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_xi2_xz",
++              "importpath": "github.com/xi2/xz",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:nIPpBwaJSVYIxUFsDv3M8ofmx9yWTog9BfvIu0q41lo=",
++              "replace": "",
++              "version": "v0.0.0-20171230120015-48954b6210f8"
++            }
++          },
++          "com_github_mitchellh_reflectwalk": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_mitchellh_reflectwalk",
++              "importpath": "github.com/mitchellh/reflectwalk",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:G2LzWKi524PWgd3mLHV8Y5k7s6XUvT0Gef6zxSIeXaQ=",
++              "replace": "",
++              "version": "v1.0.2"
++            }
++          },
++          "com_github_goreleaser_fileglob": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_goreleaser_fileglob",
++              "importpath": "github.com/goreleaser/fileglob",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:/X6J7U8lbDpQtBvGcwwPS6OpzkNVlVEsFUVRx9+k+7I=",
++              "replace": "",
++              "version": "v1.3.0"
++            }
++          },
++          "org_golang_x_sys": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~org_golang_x_sys",
++              "importpath": "golang.org/x/sys",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:h48lPFYpsTvQJZF4EKyI4aLHaev3CxivZmv7yZig9pc=",
++              "replace": "",
++              "version": "v0.15.0"
++            }
++          },
++          "com_github_gobwas_glob": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_gobwas_glob",
++              "importpath": "github.com/gobwas/glob",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:A4xDbljILXROh+kObIiy5kIaPYD8e96x1tgBhUI5J+Y=",
++              "replace": "",
++              "version": "v0.2.3"
++            }
++          },
++          "com_github_google_rpmpack": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_google_rpmpack",
++              "importpath": "github.com/google/rpmpack",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:L16KZ3QvkFGpYhmp23iQip+mx1X39foEsqszjMNBm8A=",
++              "replace": "",
++              "version": "v0.5.0"
++            }
++          },
++          "com_github_golang_groupcache": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository.bzl",
++            "ruleClassName": "go_repository",
++            "attributes": {
++              "name": "gazelle~0.35.0~go_deps~com_github_golang_groupcache",
++              "importpath": "github.com/golang/groupcache",
++              "build_directives": [],
++              "build_file_generation": "auto",
++              "build_extra_args": [],
++              "patches": [],
++              "patch_args": [],
++              "sum": "h1:oI5xCqsCo564l8iNU+DwB5epxmsaqB+rhGL0m5jtYqE=",
++              "replace": "",
++              "version": "v0.0.0-20210331224755-41bb18bfe9da"
++            }
++          }
++        },
++        "moduleExtensionMetadata": {
++          "explicitRootModuleDirectDeps": [
++            "cat_dario_mergo",
++            "com_github_aleksi_pointer",
++            "com_github_masterminds_semver_v3",
++            "com_github_protonmail_go_crypto",
++            "com_github_protonmail_gopenpgp_v2",
++            "com_github_blakesmith_ar",
++            "com_github_caarlos0_go_rpmutils",
++            "com_github_caarlos0_go_version",
++            "com_github_google_rpmpack",
++            "com_github_goreleaser_chglog",
++            "com_github_goreleaser_fileglob",
++            "com_github_invopop_jsonschema",
++            "com_github_klauspost_compress",
++            "com_github_klauspost_pgzip",
++            "com_github_muesli_mango_cobra",
++            "com_github_muesli_roff",
++            "com_github_spf13_cobra",
++            "com_github_stretchr_testify",
++            "com_github_ulikunitz_xz",
++            "com_github_xi2_xz",
++            "org_golang_x_exp",
++            "in_gopkg_yaml_v3"
++          ],
++          "explicitRootModuleDirectDevDeps": [],
++          "useAllRepos": "NO"
++        },
++        "recordedRepoMappingEntries": [
++          [
++            "gazelle~0.35.0",
++            "bazel_tools",
++            "bazel_tools"
++          ]
++        ]
++      }
++    },
++    "@@gazelle~0.35.0//internal/bzlmod:non_module_deps.bzl%non_module_deps": {
++      "general": {
++        "bzlTransitiveDigest": "xNdST0Ab6CHJP2h2BsR70cR4mizNZN38jXc/Y2vtlzo=",
++        "accumulatedFileDigests": {},
++        "envVariables": {},
++        "generatedRepoSpecs": {
++          "bazel_gazelle_is_bazel_module": {
++            "bzlFile": "@@gazelle~0.35.0//internal:is_bazel_module.bzl",
++            "ruleClassName": "is_bazel_module",
++            "attributes": {
++              "name": "gazelle~0.35.0~non_module_deps~bazel_gazelle_is_bazel_module",
++              "is_bazel_module": true
++            }
++          },
++          "bazel_gazelle_go_repository_tools": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository_tools.bzl",
++            "ruleClassName": "go_repository_tools",
++            "attributes": {
++              "name": "gazelle~0.35.0~non_module_deps~bazel_gazelle_go_repository_tools",
++              "go_cache": "@@gazelle~0.35.0~non_module_deps~bazel_gazelle_go_repository_cache//:go.env"
++            }
++          },
++          "bazel_gazelle_go_repository_cache": {
++            "bzlFile": "@@gazelle~0.35.0//internal:go_repository_cache.bzl",
++            "ruleClassName": "go_repository_cache",
++            "attributes": {
++              "name": "gazelle~0.35.0~non_module_deps~bazel_gazelle_go_repository_cache",
++              "go_sdk_name": "@rules_go~0.45.1~go_sdk~go_default_sdk",
++              "go_env": {}
++            }
++          }
++        },
++        "recordedRepoMappingEntries": [
++          [
++            "gazelle~0.35.0",
++            "bazel_gazelle_go_repository_cache",
++            "gazelle~0.35.0~non_module_deps~bazel_gazelle_go_repository_cache"
++          ],
++          [
++            "gazelle~0.35.0",
++            "go_host_compatible_sdk_label",
++            "rules_go~0.45.1~go_sdk~go_host_compatible_sdk_label"
++          ],
++          [
++            "rules_go~0.45.1~go_sdk~go_host_compatible_sdk_label",
++            "go_default_sdk",
++            "rules_go~0.45.1~go_sdk~go_default_sdk"
++          ]
++        ]
++      }
++    },
++    "@@rules_go~0.45.1//go:extensions.bzl%go_sdk": {
++      "os:linux,arch:amd64": {
++        "bzlTransitiveDigest": "L/cPIUW4/FOkbv0dYG0SLtG2DITT4s3n5k8ebIjZ8VI=",
++        "accumulatedFileDigests": {},
++        "envVariables": {},
++        "generatedRepoSpecs": {
++          "io_bazel_rules_nogo": {
++            "bzlFile": "@@rules_go~0.45.1//go/private:nogo.bzl",
++            "ruleClassName": "go_register_nogo",
++            "attributes": {
++              "name": "rules_go~0.45.1~go_sdk~io_bazel_rules_nogo",
++              "nogo": "@io_bazel_rules_go//:default_nogo",
++              "includes": [
++                "'@@//:__subpackages__'"
++              ],
++              "excludes": []
++            }
++          },
++          "rules_go__download_0_windows_arm64": {
++            "bzlFile": "@@rules_go~0.45.1//go/private:sdk.bzl",
++            "ruleClassName": "go_download_sdk_rule",
++            "attributes": {
++              "name": "rules_go~0.45.1~go_sdk~rules_go__download_0_windows_arm64",
++              "goos": "",
++              "goarch": "",
++              "sdks": {},
++              "urls": [
++                "https://dl.google.com/go/{}"
++              ],
++              "version": "1.21.1"
++            }
++          },
++          "rules_go__download_0_linux_arm64": {
++            "bzlFile": "@@rules_go~0.45.1//go/private:sdk.bzl",
++            "ruleClassName": "go_download_sdk_rule",
++            "attributes": {
++              "name": "rules_go~0.45.1~go_sdk~rules_go__download_0_linux_arm64",
++              "goos": "",
++              "goarch": "",
++              "sdks": {},
++              "urls": [
++                "https://dl.google.com/go/{}"
++              ],
++              "version": "1.21.1"
++            }
++          },
++          "go_default_sdk": {
++            "bzlFile": "@@rules_go~0.45.1//go/private:sdk.bzl",
++            "ruleClassName": "go_download_sdk_rule",
++            "attributes": {
++              "name": "rules_go~0.45.1~go_sdk~go_default_sdk",
++              "goos": "",
++              "goarch": "",
++              "sdks": {},
++              "experiments": [],
++              "patches": [],
++              "patch_strip": 0,
++              "urls": [
++                "https://dl.google.com/go/{}"
++              ],
++              "version": "1.21.1",
++              "strip_prefix": "go"
++            }
++          },
++          "rules_go__download_0_darwin_arm64": {
++            "bzlFile": "@@rules_go~0.45.1//go/private:sdk.bzl",
++            "ruleClassName": "go_download_sdk_rule",
++            "attributes": {
++              "name": "rules_go~0.45.1~go_sdk~rules_go__download_0_darwin_arm64",
++              "goos": "",
++              "goarch": "",
++              "sdks": {},
++              "urls": [
++                "https://dl.google.com/go/{}"
++              ],
++              "version": "1.21.1"
++            }
++          },
++          "go_host_compatible_sdk_label": {
++            "bzlFile": "@@rules_go~0.45.1//go/private:extensions.bzl",
++            "ruleClassName": "host_compatible_toolchain",
++            "attributes": {
++              "name": "rules_go~0.45.1~go_sdk~go_host_compatible_sdk_label",
++              "toolchain": "@go_default_sdk//:ROOT"
++            }
++          },
++          "rules_go__download_0_darwin_amd64": {
++            "bzlFile": "@@rules_go~0.45.1//go/private:sdk.bzl",
++            "ruleClassName": "go_download_sdk_rule",
++            "attributes": {
++              "name": "rules_go~0.45.1~go_sdk~rules_go__download_0_darwin_amd64",
++              "goos": "",
++              "goarch": "",
++              "sdks": {},
++              "urls": [
++                "https://dl.google.com/go/{}"
++              ],
++              "version": "1.21.1"
++            }
++          },
++          "go_toolchains": {
++            "bzlFile": "@@rules_go~0.45.1//go/private:sdk.bzl",
++            "ruleClassName": "go_multiple_toolchains",
++            "attributes": {
++              "name": "rules_go~0.45.1~go_sdk~go_toolchains",
++              "prefixes": [
++                "_0000_go_default_sdk_",
++                "_0001_rules_go__download_0_darwin_amd64_",
++                "_0002_rules_go__download_0_darwin_arm64_",
++                "_0003_rules_go__download_0_linux_arm64_",
++                "_0004_rules_go__download_0_windows_amd64_",
++                "_0005_rules_go__download_0_windows_arm64_"
++              ],
++              "geese": [
++                "",
++                "darwin",
++                "darwin",
++                "linux",
++                "windows",
++                "windows"
++              ],
++              "goarchs": [
++                "",
++                "amd64",
++                "arm64",
++                "arm64",
++                "amd64",
++                "arm64"
++              ],
++              "sdk_repos": [
++                "go_default_sdk",
++                "rules_go__download_0_darwin_amd64",
++                "rules_go__download_0_darwin_arm64",
++                "rules_go__download_0_linux_arm64",
++                "rules_go__download_0_windows_amd64",
++                "rules_go__download_0_windows_arm64"
++              ],
++              "sdk_types": [
++                "remote",
++                "remote",
++                "remote",
++                "remote",
++                "remote",
++                "remote"
++              ],
++              "sdk_versions": [
++                "1.21.1",
++                "1.21.1",
++                "1.21.1",
++                "1.21.1",
++                "1.21.1",
++                "1.21.1"
++              ]
++            }
++          },
++          "rules_go__download_0_windows_amd64": {
++            "bzlFile": "@@rules_go~0.45.1//go/private:sdk.bzl",
++            "ruleClassName": "go_download_sdk_rule",
++            "attributes": {
++              "name": "rules_go~0.45.1~go_sdk~rules_go__download_0_windows_amd64",
++              "goos": "",
++              "goarch": "",
++              "sdks": {},
++              "urls": [
++                "https://dl.google.com/go/{}"
++              ],
++              "version": "1.21.1"
++            }
++          }
++        },
++        "recordedRepoMappingEntries": [
++          [
++            "bazel_features~1.1.1",
++            "bazel_features_globals",
++            "bazel_features~1.1.1~version_extension~bazel_features_globals"
++          ],
++          [
++            "bazel_features~1.1.1",
++            "bazel_features_version",
++            "bazel_features~1.1.1~version_extension~bazel_features_version"
++          ],
++          [
++            "rules_go~0.45.1",
++            "bazel_tools",
++            "bazel_tools"
++          ],
++          [
++            "rules_go~0.45.1",
++            "io_bazel_rules_go",
++            "rules_go~0.45.1"
++          ],
++          [
++            "rules_go~0.45.1",
++            "io_bazel_rules_go_bazel_features",
++            "bazel_features~1.1.1"
++          ]
++        ]
++      }
++    },
++    "@@rules_java~7.1.0//java:extensions.bzl%toolchains": {
++      "general": {
++        "bzlTransitiveDigest": "D02GmifxnV/IhYgspsJMDZ/aE8HxAjXgek5gi6FSto4=",
++        "accumulatedFileDigests": {},
++        "envVariables": {},
++        "generatedRepoSpecs": {
++          "remotejdk21_linux_toolchain_config_repo": {
++            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
++            "ruleClassName": "_toolchain_config",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk21_linux_toolchain_config_repo",
++              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_21\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"21\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_linux//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_linux//:jdk\",\n)\n"
++            }
++          },
++          "remotejdk17_linux_s390x_toolchain_config_repo": {
++            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
++            "ruleClassName": "_toolchain_config",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux_s390x_toolchain_config_repo",
++              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:s390x\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux_s390x//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:s390x\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux_s390x//:jdk\",\n)\n"
++            }
++          },
++          "remotejdk17_macos_toolchain_config_repo": {
++            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
++            "ruleClassName": "_toolchain_config",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk17_macos_toolchain_config_repo",
++              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_macos//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_macos//:jdk\",\n)\n"
++            }
++          },
++          "remotejdk21_macos_aarch64_toolchain_config_repo": {
++            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
++            "ruleClassName": "_toolchain_config",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk21_macos_aarch64_toolchain_config_repo",
++              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_21\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"21\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_macos_aarch64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_macos_aarch64//:jdk\",\n)\n"
++            }
++          },
++          "remotejdk17_linux_aarch64_toolchain_config_repo": {
++            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
++            "ruleClassName": "_toolchain_config",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux_aarch64_toolchain_config_repo",
++              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux_aarch64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux_aarch64//:jdk\",\n)\n"
++            }
++          },
++          "remotejdk21_macos_aarch64": {
++            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
++            "ruleClassName": "http_archive",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk21_macos_aarch64",
++              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n",
++              "sha256": "2a7a99a3ea263dbd8d32a67d1e6e363ba8b25c645c826f5e167a02bbafaff1fa",
++              "strip_prefix": "zulu21.28.85-ca-jdk21.0.0-macosx_aarch64",
++              "urls": [
++                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-macosx_aarch64.tar.gz",
++                "https://cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-macosx_aarch64.tar.gz"
++              ]
++            }
++          },
++          "remotejdk17_linux_toolchain_config_repo": {
++            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
++            "ruleClassName": "_toolchain_config",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux_toolchain_config_repo",
++              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux//:jdk\",\n)\n"
++            }
++          },
++          "remotejdk17_macos_aarch64": {
++            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
++            "ruleClassName": "http_archive",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk17_macos_aarch64",
++              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
++              "sha256": "314b04568ec0ae9b36ba03c9cbd42adc9e1265f74678923b19297d66eb84dcca",
++              "strip_prefix": "zulu17.44.53-ca-jdk17.0.8.1-macosx_aarch64",
++              "urls": [
++                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-macosx_aarch64.tar.gz",
++                "https://cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-macosx_aarch64.tar.gz"
++              ]
++            }
++          },
++          "remote_java_tools_windows": {
++            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
++            "ruleClassName": "http_archive",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remote_java_tools_windows",
++              "sha256": "c5c70c214a350f12cbf52da8270fa43ba629b795f3dd328028a38f8f0d39c2a1",
++              "urls": [
++                "https://mirror.bazel.build/bazel_java_tools/releases/java/v13.1/java_tools_windows-v13.1.zip",
++                "https://github.com/bazelbuild/java_tools/releases/download/java_v13.1/java_tools_windows-v13.1.zip"
++              ]
++            }
++          },
++          "remotejdk11_win": {
++            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
++            "ruleClassName": "http_archive",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk11_win",
++              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
++              "sha256": "43408193ce2fa0862819495b5ae8541085b95660153f2adcf91a52d3a1710e83",
++              "strip_prefix": "zulu11.66.15-ca-jdk11.0.20-win_x64",
++              "urls": [
++                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-win_x64.zip",
++                "https://cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-win_x64.zip"
++              ]
++            }
++          },
++          "remotejdk11_win_toolchain_config_repo": {
++            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
++            "ruleClassName": "_toolchain_config",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk11_win_toolchain_config_repo",
++              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_win//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_win//:jdk\",\n)\n"
++            }
++          },
++          "remotejdk11_linux_aarch64": {
++            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
++            "ruleClassName": "http_archive",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux_aarch64",
++              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
++              "sha256": "54174439f2b3fddd11f1048c397fe7bb45d4c9d66d452d6889b013d04d21c4de",
++              "strip_prefix": "zulu11.66.15-ca-jdk11.0.20-linux_aarch64",
++              "urls": [
++                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-linux_aarch64.tar.gz",
++                "https://cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-linux_aarch64.tar.gz"
++              ]
++            }
++          },
++          "remotejdk17_linux": {
++            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
++            "ruleClassName": "http_archive",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux",
++              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
++              "sha256": "b9482f2304a1a68a614dfacddcf29569a72f0fac32e6c74f83dc1b9a157b8340",
++              "strip_prefix": "zulu17.44.53-ca-jdk17.0.8.1-linux_x64",
++              "urls": [
++                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-linux_x64.tar.gz",
++                "https://cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-linux_x64.tar.gz"
++              ]
++            }
++          },
++          "remotejdk11_linux_s390x_toolchain_config_repo": {
++            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
++            "ruleClassName": "_toolchain_config",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux_s390x_toolchain_config_repo",
++              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:s390x\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux_s390x//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:s390x\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux_s390x//:jdk\",\n)\n"
++            }
++          },
++          "remotejdk11_linux_toolchain_config_repo": {
++            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
++            "ruleClassName": "_toolchain_config",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux_toolchain_config_repo",
++              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux//:jdk\",\n)\n"
++            }
++          },
++          "remotejdk11_macos": {
++            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
++            "ruleClassName": "http_archive",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk11_macos",
++              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
++              "sha256": "bcaab11cfe586fae7583c6d9d311c64384354fb2638eb9a012eca4c3f1a1d9fd",
++              "strip_prefix": "zulu11.66.15-ca-jdk11.0.20-macosx_x64",
++              "urls": [
++                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-macosx_x64.tar.gz",
++                "https://cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-macosx_x64.tar.gz"
++              ]
++            }
++          },
++          "remotejdk11_win_arm64": {
++            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
++            "ruleClassName": "http_archive",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk11_win_arm64",
++              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
++              "sha256": "b8a28e6e767d90acf793ea6f5bed0bb595ba0ba5ebdf8b99f395266161e53ec2",
++              "strip_prefix": "jdk-11.0.13+8",
++              "urls": [
++                "https://mirror.bazel.build/aka.ms/download-jdk/microsoft-jdk-11.0.13.8.1-windows-aarch64.zip"
++              ]
++            }
++          },
++          "remotejdk17_macos": {
++            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
++            "ruleClassName": "http_archive",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk17_macos",
++              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
++              "sha256": "640453e8afe8ffe0fb4dceb4535fb50db9c283c64665eebb0ba68b19e65f4b1f",
++              "strip_prefix": "zulu17.44.53-ca-jdk17.0.8.1-macosx_x64",
++              "urls": [
++                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-macosx_x64.tar.gz",
++                "https://cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-macosx_x64.tar.gz"
++              ]
++            }
++          },
++          "remotejdk21_macos": {
++            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
++            "ruleClassName": "http_archive",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk21_macos",
++              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n",
++              "sha256": "9639b87db586d0c89f7a9892ae47f421e442c64b97baebdff31788fbe23265bd",
++              "strip_prefix": "zulu21.28.85-ca-jdk21.0.0-macosx_x64",
++              "urls": [
++                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-macosx_x64.tar.gz",
++                "https://cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-macosx_x64.tar.gz"
++              ]
++            }
++          },
++          "remotejdk21_macos_toolchain_config_repo": {
++            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
++            "ruleClassName": "_toolchain_config",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk21_macos_toolchain_config_repo",
++              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_21\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"21\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_macos//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_macos//:jdk\",\n)\n"
++            }
++          },
++          "remotejdk17_macos_aarch64_toolchain_config_repo": {
++            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
++            "ruleClassName": "_toolchain_config",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk17_macos_aarch64_toolchain_config_repo",
++              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_macos_aarch64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_macos_aarch64//:jdk\",\n)\n"
++            }
++          },
++          "remotejdk17_win": {
++            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
++            "ruleClassName": "http_archive",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk17_win",
++              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
++              "sha256": "192f2afca57701de6ec496234f7e45d971bf623ff66b8ee4a5c81582054e5637",
++              "strip_prefix": "zulu17.44.53-ca-jdk17.0.8.1-win_x64",
++              "urls": [
++                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-win_x64.zip",
++                "https://cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-win_x64.zip"
++              ]
++            }
++          },
++          "remotejdk11_macos_aarch64_toolchain_config_repo": {
++            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
++            "ruleClassName": "_toolchain_config",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk11_macos_aarch64_toolchain_config_repo",
++              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_macos_aarch64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_macos_aarch64//:jdk\",\n)\n"
++            }
++          },
++          "remotejdk11_linux_ppc64le_toolchain_config_repo": {
++            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
++            "ruleClassName": "_toolchain_config",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux_ppc64le_toolchain_config_repo",
++              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:ppc\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux_ppc64le//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:ppc\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux_ppc64le//:jdk\",\n)\n"
++            }
++          },
++          "remotejdk21_linux": {
++            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
++            "ruleClassName": "http_archive",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk21_linux",
++              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n",
++              "sha256": "0c0eadfbdc47a7ca64aeab51b9c061f71b6e4d25d2d87674512e9b6387e9e3a6",
++              "strip_prefix": "zulu21.28.85-ca-jdk21.0.0-linux_x64",
++              "urls": [
++                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-linux_x64.tar.gz",
++                "https://cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-linux_x64.tar.gz"
++              ]
++            }
++          },
++          "remote_java_tools_linux": {
++            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
++            "ruleClassName": "http_archive",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remote_java_tools_linux",
++              "sha256": "d134da9b04c9023fb6e56a5d4bffccee73f7bc9572ddc4e747778dacccd7a5a7",
++              "urls": [
++                "https://mirror.bazel.build/bazel_java_tools/releases/java/v13.1/java_tools_linux-v13.1.zip",
++                "https://github.com/bazelbuild/java_tools/releases/download/java_v13.1/java_tools_linux-v13.1.zip"
++              ]
++            }
++          },
++          "remotejdk21_win": {
++            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
++            "ruleClassName": "http_archive",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk21_win",
++              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n",
++              "sha256": "e9959d500a0d9a7694ac243baf657761479da132f0f94720cbffd092150bd802",
++              "strip_prefix": "zulu21.28.85-ca-jdk21.0.0-win_x64",
++              "urls": [
++                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-win_x64.zip",
++                "https://cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-win_x64.zip"
++              ]
++            }
++          },
++          "remotejdk21_linux_aarch64": {
++            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
++            "ruleClassName": "http_archive",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk21_linux_aarch64",
++              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n",
++              "sha256": "1fb64b8036c5d463d8ab59af06bf5b6b006811e6012e3b0eb6bccf57f1c55835",
++              "strip_prefix": "zulu21.28.85-ca-jdk21.0.0-linux_aarch64",
++              "urls": [
++                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-linux_aarch64.tar.gz",
++                "https://cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-linux_aarch64.tar.gz"
++              ]
++            }
++          },
++          "remotejdk11_linux_aarch64_toolchain_config_repo": {
++            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
++            "ruleClassName": "_toolchain_config",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux_aarch64_toolchain_config_repo",
++              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux_aarch64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux_aarch64//:jdk\",\n)\n"
++            }
++          },
++          "remotejdk11_linux_s390x": {
++            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
++            "ruleClassName": "http_archive",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux_s390x",
++              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
++              "sha256": "a58fc0361966af0a5d5a31a2d8a208e3c9bb0f54f345596fd80b99ea9a39788b",
++              "strip_prefix": "jdk-11.0.15+10",
++              "urls": [
++                "https://mirror.bazel.build/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.15+10/OpenJDK11U-jdk_s390x_linux_hotspot_11.0.15_10.tar.gz",
++                "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.15+10/OpenJDK11U-jdk_s390x_linux_hotspot_11.0.15_10.tar.gz"
++              ]
++            }
++          },
++          "remotejdk17_linux_aarch64": {
++            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
++            "ruleClassName": "http_archive",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux_aarch64",
++              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
++              "sha256": "6531cef61e416d5a7b691555c8cf2bdff689201b8a001ff45ab6740062b44313",
++              "strip_prefix": "zulu17.44.53-ca-jdk17.0.8.1-linux_aarch64",
++              "urls": [
++                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-linux_aarch64.tar.gz",
++                "https://cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-linux_aarch64.tar.gz"
++              ]
++            }
++          },
++          "remotejdk17_win_arm64_toolchain_config_repo": {
++            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
++            "ruleClassName": "_toolchain_config",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk17_win_arm64_toolchain_config_repo",
++              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:arm64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_win_arm64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:arm64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_win_arm64//:jdk\",\n)\n"
++            }
++          },
++          "remotejdk11_linux": {
++            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
++            "ruleClassName": "http_archive",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux",
++              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
++              "sha256": "a34b404f87a08a61148b38e1416d837189e1df7a040d949e743633daf4695a3c",
++              "strip_prefix": "zulu11.66.15-ca-jdk11.0.20-linux_x64",
++              "urls": [
++                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-linux_x64.tar.gz",
++                "https://cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-linux_x64.tar.gz"
++              ]
++            }
++          },
++          "remotejdk11_macos_toolchain_config_repo": {
++            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
++            "ruleClassName": "_toolchain_config",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk11_macos_toolchain_config_repo",
++              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_macos//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_macos//:jdk\",\n)\n"
++            }
++          },
++          "remotejdk17_linux_ppc64le_toolchain_config_repo": {
++            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
++            "ruleClassName": "_toolchain_config",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux_ppc64le_toolchain_config_repo",
++              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:ppc\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux_ppc64le//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:ppc\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux_ppc64le//:jdk\",\n)\n"
++            }
++          },
++          "remotejdk17_win_arm64": {
++            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
++            "ruleClassName": "http_archive",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk17_win_arm64",
++              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
++              "sha256": "6802c99eae0d788e21f52d03cab2e2b3bf42bc334ca03cbf19f71eb70ee19f85",
++              "strip_prefix": "zulu17.44.53-ca-jdk17.0.8.1-win_aarch64",
++              "urls": [
++                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-win_aarch64.zip",
++                "https://cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-win_aarch64.zip"
++              ]
++            }
++          },
++          "remote_java_tools_darwin_arm64": {
++            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
++            "ruleClassName": "http_archive",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remote_java_tools_darwin_arm64",
++              "sha256": "dab5bb87ec43e980faea6e1cec14bafb217b8e2f5346f53aa784fd715929a930",
++              "urls": [
++                "https://mirror.bazel.build/bazel_java_tools/releases/java/v13.1/java_tools_darwin_arm64-v13.1.zip",
++                "https://github.com/bazelbuild/java_tools/releases/download/java_v13.1/java_tools_darwin_arm64-v13.1.zip"
++              ]
++            }
++          },
++          "remotejdk17_linux_ppc64le": {
++            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
++            "ruleClassName": "http_archive",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux_ppc64le",
++              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
++              "sha256": "00a4c07603d0218cd678461b5b3b7e25b3253102da4022d31fc35907f21a2efd",
++              "strip_prefix": "jdk-17.0.8.1+1",
++              "urls": [
++                "https://mirror.bazel.build/github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.8.1%2B1/OpenJDK17U-jdk_ppc64le_linux_hotspot_17.0.8.1_1.tar.gz",
++                "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.8.1%2B1/OpenJDK17U-jdk_ppc64le_linux_hotspot_17.0.8.1_1.tar.gz"
++              ]
++            }
++          },
++          "remotejdk21_linux_aarch64_toolchain_config_repo": {
++            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
++            "ruleClassName": "_toolchain_config",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk21_linux_aarch64_toolchain_config_repo",
++              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_21\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"21\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_linux_aarch64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_linux_aarch64//:jdk\",\n)\n"
++            }
++          },
++          "remotejdk11_win_arm64_toolchain_config_repo": {
++            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
++            "ruleClassName": "_toolchain_config",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk11_win_arm64_toolchain_config_repo",
++              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:arm64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_win_arm64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:arm64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_win_arm64//:jdk\",\n)\n"
++            }
++          },
++          "local_jdk": {
++            "bzlFile": "@@rules_java~7.1.0//toolchains:local_java_repository.bzl",
++            "ruleClassName": "_local_java_repository_rule",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~local_jdk",
++              "java_home": "",
++              "version": "",
++              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = {RUNTIME_VERSION},\n)\n"
++            }
++          },
++          "remote_java_tools_darwin_x86_64": {
++            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
++            "ruleClassName": "http_archive",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remote_java_tools_darwin_x86_64",
++              "sha256": "0db40d8505a2b65ef0ed46e4256757807db8162f7acff16225be57c1d5726dbc",
++              "urls": [
++                "https://mirror.bazel.build/bazel_java_tools/releases/java/v13.1/java_tools_darwin_x86_64-v13.1.zip",
++                "https://github.com/bazelbuild/java_tools/releases/download/java_v13.1/java_tools_darwin_x86_64-v13.1.zip"
++              ]
++            }
++          },
++          "remote_java_tools": {
++            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
++            "ruleClassName": "http_archive",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remote_java_tools",
++              "sha256": "286bdbbd66e616fc4ed3f90101418729a73baa7e8c23a98ffbef558f74c0ad14",
++              "urls": [
++                "https://mirror.bazel.build/bazel_java_tools/releases/java/v13.1/java_tools-v13.1.zip",
++                "https://github.com/bazelbuild/java_tools/releases/download/java_v13.1/java_tools-v13.1.zip"
++              ]
++            }
++          },
++          "remotejdk17_linux_s390x": {
++            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
++            "ruleClassName": "http_archive",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux_s390x",
++              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
++              "sha256": "ffacba69c6843d7ca70d572489d6cc7ab7ae52c60f0852cedf4cf0d248b6fc37",
++              "strip_prefix": "jdk-17.0.8.1+1",
++              "urls": [
++                "https://mirror.bazel.build/github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.8.1%2B1/OpenJDK17U-jdk_s390x_linux_hotspot_17.0.8.1_1.tar.gz",
++                "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.8.1%2B1/OpenJDK17U-jdk_s390x_linux_hotspot_17.0.8.1_1.tar.gz"
++              ]
++            }
++          },
++          "remotejdk17_win_toolchain_config_repo": {
++            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
++            "ruleClassName": "_toolchain_config",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk17_win_toolchain_config_repo",
++              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_win//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_win//:jdk\",\n)\n"
++            }
++          },
++          "remotejdk11_linux_ppc64le": {
++            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
++            "ruleClassName": "http_archive",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux_ppc64le",
++              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
++              "sha256": "a8fba686f6eb8ae1d1a9566821dbd5a85a1108b96ad857fdbac5c1e4649fc56f",
++              "strip_prefix": "jdk-11.0.15+10",
++              "urls": [
++                "https://mirror.bazel.build/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.15+10/OpenJDK11U-jdk_ppc64le_linux_hotspot_11.0.15_10.tar.gz",
++                "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.15+10/OpenJDK11U-jdk_ppc64le_linux_hotspot_11.0.15_10.tar.gz"
++              ]
++            }
++          },
++          "remotejdk11_macos_aarch64": {
++            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
++            "ruleClassName": "http_archive",
++            "attributes": {
++              "name": "rules_java~7.1.0~toolchains~remotejdk11_macos_aarch64",
++              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob
\ No newline at end of file
diff --git a/apk/BUILD.bazel b/apk/BUILD.bazel
new file mode 100644
index 0000000..92ef329
--- /dev/null
+++ b/apk/BUILD.bazel
@@ -0,0 +1,28 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")
+
+go_library(
+    name = "apk",
+    srcs = ["apk.go"],
+    importpath = "github.com/goreleaser/nfpm/v2/apk",
+    visibility = ["//visibility:public"],
+    deps = [
+        "@com_github_goreleaser_nfpm_v2//:nfpm",
+        "@com_github_goreleaser_nfpm_v2//files",
+        "@com_github_goreleaser_nfpm_v2//internal/maps",
+        "@com_github_goreleaser_nfpm_v2//internal/sign",
+        "@com_github_klauspost_pgzip//:go_default_library",
+    ],
+)
+
+go_test(
+    name = "apk_test",
+    srcs = ["apk_test.go"],
+    data = glob(["testdata/**"]),
+    embed = [":apk"],
+    deps = [
+        "@com_github_goreleaser_nfpm_v2//:go_default_library",
+        "@com_github_goreleaser_nfpm_v2//files:go_default_library",
+        "@com_github_goreleaser_nfpm_v2//internal/sign:go_default_library",
+        "@com_github_stretchr_testify//require:go_default_library",
+    ],
+)
diff --git a/arch/BUILD.bazel b/arch/BUILD.bazel
new file mode 100644
index 0000000..29b6c1a
--- /dev/null
+++ b/arch/BUILD.bazel
@@ -0,0 +1,29 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")
+
+go_library(
+    name = "arch",
+    srcs = ["arch.go"],
+    importpath = "github.com/goreleaser/nfpm/v2/arch",
+    visibility = ["//visibility:public"],
+    deps = [
+        "@com_github_goreleaser_nfpm_v2//:nfpm",
+        "@com_github_goreleaser_nfpm_v2//files",
+        "@com_github_goreleaser_nfpm_v2//internal/maps",
+        "@com_github_goreleaser_nfpm_v2//internal/modtime",
+        "@com_github_klauspost_compress//zstd:go_default_library",
+        "@com_github_klauspost_pgzip//:go_default_library",
+    ],
+)
+
+go_test(
+    name = "arch_test",
+    srcs = ["arch_test.go"],
+    embed = [":arch"],
+    deps = [
+        "@com_github_goreleaser_nfpm_v2//:go_default_library",
+        "@com_github_goreleaser_nfpm_v2//files:go_default_library",
+        "@com_github_klauspost_compress//zstd:go_default_library",
+        "@com_github_klauspost_pgzip//:go_default_library",
+        "@com_github_stretchr_testify//require:go_default_library",
+    ],
+)
diff --git a/bazel-bin b/bazel-bin
new file mode 120000
index 0000000..a63cd3e
--- /dev/null
+++ b/bazel-bin
@@ -0,0 +1 @@
+/home/az/.cache/bazel/_bazel_az/d1dba60431701da713147e3f294b56a8/execroot/_main/bazel-out/k8-fastbuild/bin
\ No newline at end of file
diff --git a/bazel-nfpm b/bazel-nfpm
new file mode 120000
index 0000000..1d9944c
--- /dev/null
+++ b/bazel-nfpm
@@ -0,0 +1 @@
+/home/az/.cache/bazel/_bazel_az/d1dba60431701da713147e3f294b56a8/execroot/_main
\ No newline at end of file
diff --git a/bazel-out b/bazel-out
new file mode 120000
index 0000000..522f550
--- /dev/null
+++ b/bazel-out
@@ -0,0 +1 @@
+/home/az/.cache/bazel/_bazel_az/d1dba60431701da713147e3f294b56a8/execroot/_main/bazel-out
\ No newline at end of file
diff --git a/bazel-testlogs b/bazel-testlogs
new file mode 120000
index 0000000..5073f76
--- /dev/null
+++ b/bazel-testlogs
@@ -0,0 +1 @@
+/home/az/.cache/bazel/_bazel_az/d1dba60431701da713147e3f294b56a8/execroot/_main/bazel-out/k8-fastbuild/testlogs
\ No newline at end of file
diff --git a/cmd/nfpm/BUILD.bazel b/cmd/nfpm/BUILD.bazel
new file mode 100644
index 0000000..aa32627
--- /dev/null
+++ b/cmd/nfpm/BUILD.bazel
@@ -0,0 +1,19 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library")
+
+go_library(
+    name = "nfpm_lib",
+    srcs = ["main.go"],
+    embedsrcs = ["art.txt"],
+    importpath = "github.com/goreleaser/nfpm/v2/cmd/nfpm",
+    visibility = ["//visibility:private"],
+    deps = [
+        "@com_github_caarlos0_go_version//:go_default_library",
+        "@com_github_goreleaser_nfpm_v2//internal/cmd",
+    ],
+)
+
+go_binary(
+    name = "nfpm",
+    embed = [":nfpm_lib"],
+    visibility = ["//visibility:public"],
+)
diff --git a/deb/BUILD.bazel b/deb/BUILD.bazel
new file mode 100644
index 0000000..9a9d944
--- /dev/null
+++ b/deb/BUILD.bazel
@@ -0,0 +1,37 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")
+
+go_library(
+    name = "deb",
+    srcs = ["deb.go"],
+    importpath = "github.com/goreleaser/nfpm/v2/deb",
+    visibility = ["//visibility:public"],
+    deps = [
+        "@com_github_blakesmith_ar//:go_default_library",
+        "@com_github_goreleaser_chglog//:go_default_library",
+        "@com_github_goreleaser_nfpm_v2//:nfpm",
+        "@com_github_goreleaser_nfpm_v2//deprecation",
+        "@com_github_goreleaser_nfpm_v2//files",
+        "@com_github_goreleaser_nfpm_v2//internal/maps",
+        "@com_github_goreleaser_nfpm_v2//internal/modtime",
+        "@com_github_goreleaser_nfpm_v2//internal/sign",
+        "@com_github_klauspost_compress//zstd:go_default_library",
+        "@com_github_ulikunitz_xz//:go_default_library",
+    ],
+)
+
+go_test(
+    name = "deb_test",
+    srcs = ["deb_test.go"],
+    data = glob(["testdata/**"]),
+    embed = [":deb"],
+    deps = [
+        "@com_github_blakesmith_ar//:go_default_library",
+        "@com_github_goreleaser_chglog//:go_default_library",
+        "@com_github_goreleaser_nfpm_v2//:go_default_library",
+        "@com_github_goreleaser_nfpm_v2//files:go_default_library",
+        "@com_github_goreleaser_nfpm_v2//internal/sign:go_default_library",
+        "@com_github_klauspost_compress//zstd:go_default_library",
+        "@com_github_stretchr_testify//require:go_default_library",
+        "@com_github_xi2_xz//:go_default_library",
+    ],
+)
diff --git a/deprecation/BUILD.bazel b/deprecation/BUILD.bazel
new file mode 100644
index 0000000..3158a9b
--- /dev/null
+++ b/deprecation/BUILD.bazel
@@ -0,0 +1,15 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")
+
+go_library(
+    name = "deprecation",
+    srcs = ["deprecation.go"],
+    importpath = "github.com/goreleaser/nfpm/v2/deprecation",
+    visibility = ["//visibility:public"],
+)
+
+go_test(
+    name = "deprecation_test",
+    srcs = ["deprecation_test.go"],
+    embed = [":deprecation"],
+    deps = ["@com_github_stretchr_testify//require:go_default_library"],
+)
diff --git a/files/BUILD.bazel b/files/BUILD.bazel
new file mode 100644
index 0000000..53d6cef
--- /dev/null
+++ b/files/BUILD.bazel
@@ -0,0 +1,24 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")
+
+go_library(
+    name = "files",
+    srcs = [
+        "files.go",
+        "fs.go",
+    ],
+    importpath = "github.com/goreleaser/nfpm/v2/files",
+    visibility = ["//visibility:public"],
+    deps = ["@com_github_goreleaser_nfpm_v2//internal/glob:glob"],
+)
+
+go_test(
+    name = "files_test",
+    srcs = ["files_test.go"],
+    data = glob(["testdata/**"]),
+    deps = [
+        "@com_github_goreleaser_nfpm_v2//files:go_default_library",
+        "@com_github_stretchr_testify//assert:go_default_library",
+        "@com_github_stretchr_testify//require:go_default_library",
+        "@in_gopkg_yaml_v3//:go_default_library",
+    ],
+)
diff --git a/files/files.go b/files/files.go
index 776949d..0fc4084 100644
--- a/files/files.go
+++ b/files/files.go
@@ -430,10 +430,6 @@ func addGlobbedFiles(
 			FileInfo:    newFileInfo,
 			Packager:    origFile.Packager,
 		}).WithFileInfoDefaults(umask, mtime)
-		if dst, err := os.Readlink(src); err == nil {
-			newFile.Source = dst
-			newFile.Type = TypeSymlink
-		}
 
 		all[dst] = newFile
 	}
diff --git a/internal/cmd/BUILD.bazel b/internal/cmd/BUILD.bazel
new file mode 100644
index 0000000..ca35a61
--- /dev/null
+++ b/internal/cmd/BUILD.bazel
@@ -0,0 +1,29 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "cmd",
+    srcs = [
+        "doc.go",
+        "docs.go",
+        "init.go",
+        "man.go",
+        "package.go",
+        "root.go",
+        "schema.go",
+    ],
+    importpath = "github.com/goreleaser/nfpm/v2/internal/cmd",
+    visibility = ["//:__subpackages__"],
+    deps = [
+        "@com_github_caarlos0_go_version//:go_default_library",
+        "@com_github_goreleaser_nfpm_v2//:nfpm",
+        "@com_github_goreleaser_nfpm_v2//apk",
+        "@com_github_goreleaser_nfpm_v2//arch",
+        "@com_github_goreleaser_nfpm_v2//deb",
+        "@com_github_goreleaser_nfpm_v2//rpm",
+        "@com_github_invopop_jsonschema//:go_default_library",
+        "@com_github_muesli_mango_cobra//:go_default_library",
+        "@com_github_muesli_roff//:go_default_library",
+        "@com_github_spf13_cobra//:go_default_library",
+        "@com_github_spf13_cobra//doc:go_default_library",
+    ],
+)
diff --git a/internal/glob/BUILD.bazel b/internal/glob/BUILD.bazel
new file mode 100644
index 0000000..95f0415
--- /dev/null
+++ b/internal/glob/BUILD.bazel
@@ -0,0 +1,17 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")
+
+go_library(
+    name = "glob",
+    srcs = ["glob.go"],
+    importpath = "github.com/goreleaser/nfpm/v2/internal/glob",
+    visibility = ["//:__subpackages__"],
+    deps = ["@com_github_goreleaser_fileglob//:go_default_library"],
+)
+
+go_test(
+    name = "glob_test",
+    srcs = ["glob_test.go"],
+    data = glob(["testdata/**"]),
+    embed = [":glob"],
+    deps = ["@com_github_stretchr_testify//require:go_default_library"],
+)
diff --git a/internal/maps/BUILD.bazel b/internal/maps/BUILD.bazel
new file mode 100644
index 0000000..4ed6f8f
--- /dev/null
+++ b/internal/maps/BUILD.bazel
@@ -0,0 +1,9 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "maps",
+    srcs = ["maps.go"],
+    importpath = "github.com/goreleaser/nfpm/v2/internal/maps",
+    visibility = ["//:__subpackages__"],
+    deps = ["@org_golang_x_exp//maps:go_default_library"],
+)
diff --git a/internal/modtime/BUILD.bazel b/internal/modtime/BUILD.bazel
new file mode 100644
index 0000000..6fe323d
--- /dev/null
+++ b/internal/modtime/BUILD.bazel
@@ -0,0 +1,8 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library")
+
+go_library(
+    name = "modtime",
+    srcs = ["mtime.go"],
+    importpath = "github.com/goreleaser/nfpm/v2/internal/modtime",
+    visibility = ["//:__subpackages__"],
+)
diff --git a/internal/sign/BUILD.bazel b/internal/sign/BUILD.bazel
new file mode 100644
index 0000000..8361b40
--- /dev/null
+++ b/internal/sign/BUILD.bazel
@@ -0,0 +1,33 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")
+
+go_library(
+    name = "sign",
+    srcs = [
+        "pgp.go",
+        "rsa.go",
+    ],
+    importpath = "github.com/goreleaser/nfpm/v2/internal/sign",
+    visibility = ["//:__subpackages__"],
+    deps = [
+        "@com_github_goreleaser_nfpm_v2//:nfpm",
+        "@com_github_protonmail_go_crypto//openpgp:go_default_library",
+        "@com_github_protonmail_go_crypto//openpgp/clearsign:go_default_library",
+        "@com_github_protonmail_go_crypto//openpgp/packet:go_default_library",
+    ],
+)
+
+go_test(
+    name = "sign_test",
+    srcs = [
+        "pgp_test.go",
+        "rsa_test.go",
+    ],
+    data = glob(["testdata/**"]),
+    embed = [":sign"],
+    deps = [
+        "@com_github_aleksi_pointer//:go_default_library",
+        "@com_github_goreleaser_nfpm_v2//:go_default_library",
+        "@com_github_protonmail_gopenpgp_v2//crypto:go_default_library",
+        "@com_github_stretchr_testify//require:go_default_library",
+    ],
+)
diff --git a/rpm/BUILD.bazel b/rpm/BUILD.bazel
new file mode 100644
index 0000000..90ea223
--- /dev/null
+++ b/rpm/BUILD.bazel
@@ -0,0 +1,32 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")
+
+go_library(
+    name = "rpm",
+    srcs = ["rpm.go"],
+    importpath = "github.com/goreleaser/nfpm/v2/rpm",
+    visibility = ["//visibility:public"],
+    deps = [
+        "@com_github_google_rpmpack//:go_default_library",
+        "@com_github_goreleaser_chglog//:go_default_library",
+        "@com_github_goreleaser_nfpm_v2//:nfpm",
+        "@com_github_goreleaser_nfpm_v2//files",
+        "@com_github_goreleaser_nfpm_v2//internal/modtime",
+        "@com_github_goreleaser_nfpm_v2//internal/sign",
+    ],
+)
+
+go_test(
+    name = "rpm_test",
+    srcs = ["rpm_test.go"],
+    embed = [":rpm"],
+    deps = [
+        "@com_github_caarlos0_go_rpmutils//:go_default_library",
+        "@com_github_caarlos0_go_rpmutils//cpio:go_default_library",
+        "@com_github_goreleaser_chglog//:go_default_library",
+        "@com_github_goreleaser_nfpm_v2//:go_default_library",
+        "@com_github_goreleaser_nfpm_v2//files:go_default_library",
+        "@com_github_goreleaser_nfpm_v2//internal/sign:go_default_library",
+        "@com_github_protonmail_go_crypto//openpgp:go_default_library",
+        "@com_github_stretchr_testify//require:go_default_library",
+    ],
+)
diff --git a/testdata/BUILD.bazel b/testdata/BUILD.bazel
new file mode 100644
index 0000000..a76c315
--- /dev/null
+++ b/testdata/BUILD.bazel
@@ -0,0 +1,14 @@
+load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library")
+
+go_library(
+    name = "testdata_lib",
+    srcs = ["main.go"],
+    importpath = "github.com/goreleaser/nfpm/v2/testdata",
+    visibility = ["//visibility:private"],
+)
+
+go_binary(
+    name = "testdata",
+    embed = [":testdata_lib"],
+    visibility = ["//visibility:public"],
+)
